WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.199
In the last video,

00:00:01.199 --> 00:00:03.945
we talked about why we need a Lambda function,

00:00:03.944 --> 00:00:07.605
and we talked about what that Lambda function needs to do.

00:00:07.605 --> 00:00:11.009
In this video, we're going to actually implement that Lambda function.

00:00:11.009 --> 00:00:13.169
To start with, let's jump ahead and take a look at

00:00:13.169 --> 00:00:15.390
what the contents of the Lambda function will be,

00:00:15.390 --> 00:00:16.740
they're included right here.

00:00:16.739 --> 00:00:20.939
Of course, we need to import any of the modules we're going to use inside of it.

00:00:20.940 --> 00:00:23.580
Here, you will see the same review

00:00:23.579 --> 00:00:27.104
towards method that we used at the very top of this notebook,

00:00:27.105 --> 00:00:30.629
and here, you will see the same bag of words

00:00:30.629 --> 00:00:34.335
encoding method that we also used earlier on in this notebook.

00:00:34.335 --> 00:00:39.225
One thing to note is that the bag of words encoding method requires a vocabulary.

00:00:39.225 --> 00:00:43.145
So, we're going to have to make sure to include that in our Lambda function.

00:00:43.145 --> 00:00:45.280
Now, we can look the Lambda function itself.

00:00:45.280 --> 00:00:47.300
It's pretty straight forward, but I included lots of

00:00:47.299 --> 00:00:49.519
comments in case you want to take a look at it yourself.

00:00:49.520 --> 00:00:52.520
At the top here, we have to make sure to include the vocabulary that

00:00:52.520 --> 00:00:55.734
we created earlier on using the training set.

00:00:55.734 --> 00:01:00.185
Then, we need to extract the review that is submitted by the user

00:01:00.185 --> 00:01:04.969
from the body of the event that was passed to the Lambda handler.

00:01:04.969 --> 00:01:06.409
Once we do that,

00:01:06.409 --> 00:01:11.795
we need to clean up the review by removing any HTML tags and any punctuation.

00:01:11.795 --> 00:01:15.650
Next, we construct a bag of words encoding of our review.

00:01:15.650 --> 00:01:18.380
Once we have the bag of words encoded review,

00:01:18.379 --> 00:01:24.109
we can invoke the end point that we've created making sure to include the endpoint name,

00:01:24.109 --> 00:01:28.640
and making sure to serialize the bag of words encoding of our review.

00:01:28.640 --> 00:01:30.560
Once we get the response,

00:01:30.560 --> 00:01:32.140
we read it back,

00:01:32.140 --> 00:01:33.674
convert it to a string,

00:01:33.674 --> 00:01:35.724
and then for convenience,

00:01:35.724 --> 00:01:39.319
we round it either to one meaning that the review is positive,

00:01:39.319 --> 00:01:41.884
or zero meaning the review is negative.

00:01:41.885 --> 00:01:45.984
Lastly, we return the result to whoever called us.

00:01:45.984 --> 00:01:48.290
So, how do we actually go and set this up?

00:01:48.290 --> 00:01:50.660
Well, there are two things we need to do.

00:01:50.659 --> 00:01:53.015
In addition to creating a Lambda function itself,

00:01:53.015 --> 00:01:57.500
we need to give that Lambda function permission to use a SageMaker endpoint.

00:01:57.500 --> 00:02:01.814
So, let's set up a new role that our Lambda function will have.

00:02:01.814 --> 00:02:05.484
To do that, we go back to the Amazon console,

00:02:05.484 --> 00:02:09.468
and we scroll all the way down to security identity and compliance,

00:02:09.468 --> 00:02:11.629
and click on IAM.

00:02:11.629 --> 00:02:15.049
Our goal is to create a new role for our Lambda function.

00:02:15.050 --> 00:02:16.370
So, on the left-hand side,

00:02:16.370 --> 00:02:18.860
we click on "Roles," and then we click on

00:02:18.860 --> 00:02:21.880
the "Create role" button because we'd like to create a new role.

00:02:21.879 --> 00:02:25.504
Now, our new role is going to be for a Lambda function.

00:02:25.504 --> 00:02:29.484
So, we select Lambda function under the service that we'll use this rule,

00:02:29.485 --> 00:02:30.905
then we click on next.

00:02:30.905 --> 00:02:34.210
Now, what permissions do we want to give our Lambda function?

00:02:34.210 --> 00:02:36.950
Well, we want to give it access to SageMaker.

00:02:36.949 --> 00:02:39.439
So, if we type SageMaker into the search bar,

00:02:39.439 --> 00:02:40.984
and then scroll down,

00:02:40.985 --> 00:02:43.865
you will see SageMakerFullAccess.

00:02:43.865 --> 00:02:47.270
Make sure to click on the check box to the left to include

00:02:47.270 --> 00:02:50.719
the SageMakerFullAccess permissions to this role.

00:02:50.719 --> 00:02:54.469
Click on "Next," and now we need to give this role a name.

00:02:54.469 --> 00:02:59.134
I'm going to call mine LambdaSageMakerRole to remind me

00:02:59.134 --> 00:03:04.370
that this is a role for Lambda that provides access to SageMaker,

00:03:04.370 --> 00:03:08.314
and we click on "Create role," the role will be created for us.

00:03:08.314 --> 00:03:10.370
Great. So, that's the first step.

00:03:10.370 --> 00:03:14.120
We've now set up a role for our Lambda function to have.

00:03:14.120 --> 00:03:17.300
Now, we need to set the Lambda function up itself.

00:03:17.300 --> 00:03:20.900
If we again go back to the main Amazon console.

00:03:20.900 --> 00:03:23.045
In this time under Compute,

00:03:23.044 --> 00:03:27.089
we click on "Lambda," we can create a new Lambda function.

00:03:27.090 --> 00:03:29.085
We would like to start from scratch,

00:03:29.085 --> 00:03:30.930
and we need to name our function.

00:03:30.930 --> 00:03:34.290
I'm going to call mine sentiment_lambda_function.

00:03:34.289 --> 00:03:36.340
Since we're using Python in this course,

00:03:36.340 --> 00:03:40.370
we need to make sure to set the runtime to Python 3.6.

00:03:40.370 --> 00:03:43.145
Lastly, we need to give this lambda function or role.

00:03:43.145 --> 00:03:46.025
Of course, we want to use the role that we just created.

00:03:46.025 --> 00:03:48.890
So, we leave this at choose an existing role,

00:03:48.889 --> 00:03:52.609
and then we choose the role that we created from this drop down menu here.

00:03:52.610 --> 00:03:56.240
Now clicking on "Create," our Lambda function has been created.

00:03:56.240 --> 00:03:57.725
If you scroll down,

00:03:57.724 --> 00:03:59.960
we can see the code for our Lambda function.

00:03:59.960 --> 00:04:02.260
Currently, it doesn't do much at all.

00:04:02.259 --> 00:04:04.634
However, if we go back to the notebook,

00:04:04.634 --> 00:04:08.824
scrolling down, we can copy and paste the function that I've provided here.

00:04:08.824 --> 00:04:12.649
So, we select it, copy and paste.

00:04:12.649 --> 00:04:18.464
Remember, there are two things that we need to add to this Lambda function.

00:04:18.464 --> 00:04:22.794
The first is the name of the endpoint that we've deployed.

00:04:22.795 --> 00:04:24.759
Heading back to the notebook,

00:04:24.759 --> 00:04:30.305
remember that we can get the name of the endpoint by typing xgb_predictor.endpoint.

00:04:30.305 --> 00:04:34.225
So, if we copy this and paste it over here,

00:04:34.225 --> 00:04:37.075
now our Lambda function knows which end point to use.

00:04:37.074 --> 00:04:41.555
The second thing we need to add here is the vocabulary object.

00:04:41.555 --> 00:04:43.430
Going back to our notebook,

00:04:43.430 --> 00:04:50.735
we can print the vocabulary so that we can copy it and paste it into the Lambda function.

00:04:50.735 --> 00:04:53.759
Once we've done that, click on "Save."

00:04:53.759 --> 00:04:56.774
So, currently our Lambda function has been set up.

00:04:56.774 --> 00:04:59.625
Let's create a test event to test it.

00:04:59.625 --> 00:05:02.689
In the drop-down menu right here where it says "Select a test event",

00:05:02.689 --> 00:05:04.384
click on "Configure test events."

00:05:04.384 --> 00:05:05.974
This is how you can add a new one.

00:05:05.975 --> 00:05:07.850
We wanted to create a new test event,

00:05:07.850 --> 00:05:10.280
and our event template scrolling all the way up to

00:05:10.279 --> 00:05:14.839
the top is going to be API Gateway AWS proxy.

00:05:14.839 --> 00:05:18.104
Our event name is just going to be testEvent.

00:05:18.105 --> 00:05:20.750
As you can see, our test event is going to send a whole bunch

00:05:20.750 --> 00:05:23.370
of data to our Lambda function,

00:05:23.370 --> 00:05:27.590
but the only bit of data that our Lambda function cares about is the body entry,

00:05:27.589 --> 00:05:32.209
which we are going to replace with a review we wish to send our Lambda function.

00:05:32.209 --> 00:05:35.199
So, let's plug in a very simple example review.

00:05:35.199 --> 00:05:37.779
Lets just say, "The movie was horrible."

00:05:37.779 --> 00:05:39.829
I do not recommend this at all.

00:05:39.829 --> 00:05:42.889
Clicking on create will then create this test event.

00:05:42.889 --> 00:05:44.764
Now that this test event has been selected,

00:05:44.764 --> 00:05:49.099
I can click on "Test," and the result is zero,

00:05:49.100 --> 00:05:53.750
meaning that my model thinks that the review I entered was negative.

00:05:53.750 --> 00:05:55.235
So, so far so good,

00:05:55.235 --> 00:05:56.720
our Lambda function is working.

00:05:56.720 --> 00:05:59.390
However, how do we get our website to use it?

00:05:59.389 --> 00:06:03.419
Well, we're going to have to create our own endpoint using API gateway,

00:06:03.420 --> 00:06:05.199
and that's what we'll do in the next video.

