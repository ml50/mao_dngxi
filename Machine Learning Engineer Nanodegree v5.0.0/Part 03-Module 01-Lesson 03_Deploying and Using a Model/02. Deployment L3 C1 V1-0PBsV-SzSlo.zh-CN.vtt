WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.050
我们学习了如何使用 SageMaker 创建和训练模型

00:00:04.050 --> 00:00:08.190
以及如何使用批量转换功能测试训练的模型

00:00:08.190 --> 00:00:10.290
下面我们将学习如何部署训练的模型

00:00:10.290 --> 00:00:12.990
我们将使端点能够访问部署的模型

00:00:12.990 --> 00:00:17.190
这是 SageMaker 支持的模型部署方式

00:00:17.190 --> 00:00:19.510
我们将从 notebook 本身里使用部署的模型

00:00:19.510 --> 00:00:20.820
但是稍后

00:00:20.820 --> 00:00:23.670
我们将创建一个能够访问部署的模型的网络应用

00:00:23.670 --> 00:00:25.590
要跟着操作

00:00:25.590 --> 00:00:29.355
请转到 SageMaker 文件夹 然后在 Tutorials 文件夹中打开

00:00:29.355 --> 00:00:34.470
Boston Housing XGBoost High Level deploy notebook

00:00:34.470 --> 00:00:37.560
我们将使用与其他 Boston Housing notebook

00:00:37.560 --> 00:00:40.675
一样的数据集并创建相同的模型

00:00:40.675 --> 00:00:42.980
我们将使用 XGBoost

00:00:42.980 --> 00:00:45.635
预测波士顿地区的房价中位数

00:00:45.635 --> 00:00:46.925
因为之前已经讲解过这些步骤

00:00:46.925 --> 00:00:49.490
所以我将直接训练模型

00:00:49.490 --> 00:00:51.470
我们获取了数据

00:00:51.470 --> 00:00:53.240
执行了所有的处理步骤

00:00:53.240 --> 00:00:55.090
构建并训练了模型

00:00:55.090 --> 00:00:58.220
但是这次我们不使用批转换作业测试模型

00:00:58.220 --> 00:00:59.790
而是先部署模型

00:00:59.790 --> 00:01:02.645
然后将测试数据发送给部署的端点

00:01:02.645 --> 00:01:06.560
使用高阶方法部署模型非常简单

00:01:06.560 --> 00:01:10.820
直接对训练的模型对象调用 deploy() 方法

00:01:10.820 --> 00:01:16.025
在这里指定虚拟机的数量以及类型

00:01:16.025 --> 00:01:19.670
目前 SageMaker 正在准备中 然后运行部署的模型

00:01:19.670 --> 00:01:21.770
运行完毕后再回来

00:01:21.770 --> 00:01:24.620
可以看到 模型已经部署了

00:01:24.620 --> 00:01:26.815
到底是什么意思？

00:01:26.815 --> 00:01:30.290
意思是 SageMaker 创建了一个虚拟机

00:01:30.290 --> 00:01:33.990
其中包含我们训练的模型 该模型可以从端点访问

00:01:33.990 --> 00:01:36.910
即从特定的 URL 访问

00:01:36.910 --> 00:01:38.900
在下个视频中讲解详细流程时

00:01:38.900 --> 00:01:42.020
我将告诉你如何查找该 URL

00:01:42.020 --> 00:01:44.780
暂时 deploy() 方法返回的 predictor 对象

00:01:44.780 --> 00:01:47.520
将为你完成一切工作

00:01:47.520 --> 00:01:50.820
为了将数据发送给模型的端点

00:01:50.820 --> 00:01:55.730
我们可以使用返回的 predictor 对象的 predict 方法

00:01:55.730 --> 00:02:01.300
但是 提供给 predictor 对象的数据必须先序列化

00:02:01.300 --> 00:02:04.610
幸运的是 SageMaker 为我们提供了此功能

00:02:04.610 --> 00:02:08.240
只需指定模型需要的数据类型

00:02:08.240 --> 00:02:10.370
我们将使用 csv 数据

00:02:10.370 --> 00:02:14.515
所以可以使用提供的 csv_serializer

00:02:14.515 --> 00:02:18.410
模型对发送的每条记录进行推理后

00:02:18.410 --> 00:02:19.670
将返回结果

00:02:19.670 --> 00:02:21.860
即序列化预测

00:02:21.860 --> 00:02:25.460
对于每条记录来说 结果是按逗号分隔的字符串结果

00:02:25.460 --> 00:02:29.470
我们需要将其转换为 numpy 数组

00:02:29.470 --> 00:02:30.680
也就是这一步的作用

00:02:30.680 --> 00:02:33.440
一旦获得转换好格式的数据后

00:02:33.440 --> 00:02:36.230
我们可以绘制图形 看看模型的表现如何

00:02:36.230 --> 00:02:39.080
当然 这个模型的效果

00:02:39.080 --> 00:02:42.755
应该与使用同一数据集创建的其他 XGBoost 模型相似

00:02:42.755 --> 00:02:48.070
最后一个必须完成的步骤是关闭部署的模型

00:02:48.070 --> 00:02:49.760
SageMaker 为你创建了一个虚拟机

00:02:49.760 --> 00:02:52.865
用来托管你训练的模型

00:02:52.865 --> 00:02:55.640
这个虚拟机将继续运行

00:02:55.640 --> 00:02:58.450
等待你向其发送数据 直到你关闭它

00:02:58.450 --> 00:03:02.720
因为运行部署的模型按运行时长计费

00:03:02.720 --> 00:03:05.470
所以不使用端点后 需要关闭端点

