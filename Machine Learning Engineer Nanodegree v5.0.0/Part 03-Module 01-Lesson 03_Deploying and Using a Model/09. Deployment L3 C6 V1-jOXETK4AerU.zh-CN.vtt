WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.200
在上个视频中

00:00:01.200 --> 00:00:03.945
我们讨论了为何需要 Lambda 函数

00:00:03.945 --> 00:00:07.605
并且讨论了 Lambda 函数需要执行什么操作

00:00:07.605 --> 00:00:11.010
在此视频中 我们将实现该 Lambda 函数

00:00:11.010 --> 00:00:13.170
首先看看

00:00:13.170 --> 00:00:15.390
Lambda 函数的内容是什么

00:00:15.390 --> 00:00:16.740
这些是函数内容

00:00:16.740 --> 00:00:20.940
当然 我们需要导入要使用的所有模块

00:00:20.940 --> 00:00:23.580
这个 review_to_words 函数

00:00:23.580 --> 00:00:27.105
与在此 notebook 的开头见到的一样

00:00:27.105 --> 00:00:30.630
并且这个是之前在此 notebook 中

00:00:30.630 --> 00:00:34.335
使用的相同词袋编码方法

00:00:34.335 --> 00:00:39.225
需要注意的一点是 词袋编码方法需要词汇表

00:00:39.225 --> 00:00:43.145
所以我们需要在 Lambda 函数中包含词汇表

00:00:43.145 --> 00:00:45.280
现在看看 Lambda 函数本身

00:00:45.280 --> 00:00:47.300
该函数很简单 但是我添加了很多注释

00:00:47.300 --> 00:00:49.520
帮助你理解该函数

00:00:49.520 --> 00:00:52.520
在这里需要添加

00:00:52.520 --> 00:00:55.735
之前使用训练集创建的词汇表

00:00:55.735 --> 00:01:00.185
然后需要从传递给 Lambda 处理程序的

00:01:00.185 --> 00:01:04.970
事件主体中提取用户提交的影评

00:01:04.970 --> 00:01:06.410
提取之后

00:01:06.410 --> 00:01:11.795
我们需要删除影评中的所有 HTML 标记和标点

00:01:11.795 --> 00:01:15.650
接着用词袋编码影评

00:01:15.650 --> 00:01:18.380
用词袋编码后

00:01:18.380 --> 00:01:24.110
调用创建的端点 记得传入端点名称

00:01:24.110 --> 00:01:28.640
并且要序列化影评词袋编码

00:01:28.640 --> 00:01:30.560
获得响应后

00:01:30.560 --> 00:01:32.140
读取该响应

00:01:32.140 --> 00:01:33.675
转换为字符串

00:01:33.675 --> 00:01:35.725
然后为了便于阅读

00:01:35.725 --> 00:01:39.320
将结果四舍五入到 1 表示影评是正面的

00:01:39.320 --> 00:01:41.885
或四舍五入到 0 表示影评是负面的

00:01:41.885 --> 00:01:45.985
最后 将结果返回给调用者

00:01:45.985 --> 00:01:48.290
那么如何设置该函数呢？

00:01:48.290 --> 00:01:50.660
我们需要完成两项任务

00:01:50.660 --> 00:01:53.015
除了创建 Lambda 函数本身外

00:01:53.015 --> 00:01:57.500
我们还需授予该 Lambda 函数 SageMaker 端点的使用权限

00:01:57.500 --> 00:02:01.815
我们将为 Lambda 函数设置一个新的角色

00:02:01.815 --> 00:02:05.485
切换到 Amazon 控制台

00:02:05.485 --> 00:02:09.469
一直向下滚动到“Security, Identity and Compliance”部分

00:02:09.469 --> 00:02:11.630
点击“IAM”

00:02:11.630 --> 00:02:15.050
我们想要为 Lambda 函数新建一个角色

00:02:15.050 --> 00:02:16.370
所以在左侧

00:02:16.370 --> 00:02:18.860
点击“Roles”

00:02:18.860 --> 00:02:21.880
然后点击“Create role”按钮 因为我们要新建一个角色

00:02:21.880 --> 00:02:25.505
这个新角色针对的是 Lambda 函数

00:02:25.505 --> 00:02:29.485
所以选择 Lambda 函数 在此服务下我们将使用该角色

00:02:29.485 --> 00:02:30.905
然后点击“Next”

00:02:30.905 --> 00:02:34.210
我们要授予该 Lambda 函数什么权限？

00:02:34.210 --> 00:02:36.950
我们希望它能访问 SageMaker

00:02:36.950 --> 00:02:39.440
所以在搜索栏里输入 SageMaker

00:02:39.440 --> 00:02:40.985
向下滚动

00:02:40.985 --> 00:02:43.865
你将看到 SageMakerFullAccess

00:02:43.865 --> 00:02:47.270
点击左侧的复选框

00:02:47.270 --> 00:02:50.720
使此角色具有 SageMakerFullAccess 权限

00:02:50.720 --> 00:02:54.470
点击“Next” 现在需要设定一个名称

00:02:54.470 --> 00:02:59.135
我设为 LambdaSageMakerRole

00:02:59.135 --> 00:03:04.370
表示这个角色针对的是 Lambda 函数 并且能够访问 SageMaker

00:03:04.370 --> 00:03:08.315
点击“Create role”就创建了该角色

00:03:08.315 --> 00:03:10.370
好的这就是第一步

00:03:10.370 --> 00:03:14.120
我们为 Lambda 函数设置了一个角色

00:03:14.120 --> 00:03:17.300
现在需要设置 Lambda 函数本身

00:03:17.300 --> 00:03:20.900
回到 Amazon 主控制台

00:03:20.900 --> 00:03:23.045
在 Compute 下

00:03:23.045 --> 00:03:27.090
点击“Lambda”我们可以新建一个 Lambda 函数

00:03:27.090 --> 00:03:29.085
我们将从头开始创建

00:03:29.085 --> 00:03:30.930
需要命名该函数

00:03:30.930 --> 00:03:34.290
我称之为 sentiment_lambda_function

00:03:34.290 --> 00:03:36.340
因为我们在这门课程中使用 Python

00:03:36.340 --> 00:03:40.370
所以将运行时设为 Python 3.6

00:03:40.370 --> 00:03:43.145
最后 需要为此 Lambda 函数设定一个角色

00:03:43.145 --> 00:03:46.025
我们要使用刚刚创建的角色

00:03:46.025 --> 00:03:48.890
所以这个保留为“Choose an existing role”

00:03:48.890 --> 00:03:52.610
然后从这个下拉菜单中选择我们创建的角色

00:03:52.610 --> 00:03:56.240
点击“Create”即创建了 Lambda 函数

00:03:56.240 --> 00:03:57.725
向下滚动

00:03:57.725 --> 00:03:59.960
可以看到 Lambda 函数的代码

00:03:59.960 --> 00:04:02.260
目前里面没有太多代码

00:04:02.260 --> 00:04:04.635
切换到 notebook

00:04:04.635 --> 00:04:08.825
向下滚动并复制粘贴这段函数代码

00:04:08.825 --> 00:04:12.649
选择代码 然后复制粘贴

00:04:12.649 --> 00:04:18.465
我们向此 Lambda 函数添加两项内容

00:04:18.465 --> 00:04:22.795
首先是部署的端点的名称

00:04:22.795 --> 00:04:24.760
回到 notebook

00:04:24.760 --> 00:04:30.305
可以通过输入 xgb_predictor.endpoin 获取端点的名称

00:04:30.305 --> 00:04:34.225
将这个名称复制粘贴到这里

00:04:34.225 --> 00:04:37.075
现在 Lambda 函数知道要使用哪个端点了

00:04:37.075 --> 00:04:41.555
第二个要添加到这里的是词汇表对象

00:04:41.555 --> 00:04:43.430
回到 notebook

00:04:43.430 --> 00:04:50.735
我们可以输出词汇表 然后将其复制粘贴到 Lambda 函数里

00:04:50.735 --> 00:04:53.760
复制后 点击“Save”

00:04:53.760 --> 00:04:56.775
现在 Lambda 函数已经设置好了

00:04:56.775 --> 00:04:59.625
我们创建一个测试事件测试下

00:04:59.625 --> 00:05:02.690
在这个“Select a test event”下拉菜单中

00:05:02.690 --> 00:05:04.385
点击“Configure test events”

00:05:04.385 --> 00:05:05.975
这样就可以添加新的测试事件

00:05:05.975 --> 00:05:07.850
我们想创建一个新的测试事件

00:05:07.850 --> 00:05:10.280
在事件模板列表中滚动到顶部

00:05:10.280 --> 00:05:14.840
选择 API Gateway AWS Proxy

00:05:14.840 --> 00:05:18.105
事件名称为 testEvent

00:05:18.105 --> 00:05:20.750
可以看到 测试事件会向 Lambda 函数

00:05:20.750 --> 00:05:23.370
发送大量数据

00:05:23.370 --> 00:05:27.590
但是 Lambda 函数唯一关心的是 body 条目

00:05:27.590 --> 00:05:32.210
我们将其替换为要发送给 Lambda 函数的影评

00:05:32.210 --> 00:05:35.200
我们代入一个简单的示例影评

00:05:35.200 --> 00:05:37.780
例如“The movie was horrible.

00:05:37.780 --> 00:05:39.830
I do not recommend this at all.”

00:05:39.830 --> 00:05:42.890
点击“Create”将创建这个测试事件

00:05:42.890 --> 00:05:44.765
这个 testEvent 被选中后

00:05:44.765 --> 00:05:49.100
点击“Test” 结果是 0

00:05:49.100 --> 00:05:53.750
表明模型认为我输入的影评是负面的

00:05:53.750 --> 00:05:55.235
到目前为止一切顺利

00:05:55.235 --> 00:05:56.720
Lambda 函数能正常运行

00:05:56.720 --> 00:05:59.390
但是如何让我们的网站使用它？

00:05:59.390 --> 00:06:03.420
我们需要使用 API Gateway 创建我们自己的端点

00:06:03.420 --> 00:06:05.200
下个视频会讲解

