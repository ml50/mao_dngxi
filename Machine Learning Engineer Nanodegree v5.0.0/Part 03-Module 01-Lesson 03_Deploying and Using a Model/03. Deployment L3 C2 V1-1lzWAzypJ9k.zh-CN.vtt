WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.010
在此视频中

00:00:02.010 --> 00:00:05.190
我们将详细了解如何在 SageMaker 中部署模型

00:00:05.190 --> 00:00:11.550
要跟着操作 请打开 Boston Housing - XGBoost (Deploy) - Low Level notebook

00:00:11.550 --> 00:00:15.600
此 notebook 的大部分内容都与

00:00:15.600 --> 00:00:19.725
使用批量转换方法测试模型的低阶 notebook 一样

00:00:19.725 --> 00:00:21.855
下面看看整个流程

00:00:21.855 --> 00:00:25.920
首先加载必要的模块

00:00:25.920 --> 00:00:27.960
然后下载并准备数据

00:00:27.960 --> 00:00:31.710
但是这次我们使用 sklearn 提供的数据 流程很简单

00:00:31.710 --> 00:00:35.340
我们将数据拆分成训练 验证和测试集

00:00:35.340 --> 00:00:39.530
然后将数据保存到本地并上传到 S3

00:00:39.530 --> 00:00:42.380
将训练数据上传到 S3 后

00:00:42.380 --> 00:00:44.750
开始设置训练作业

00:00:44.750 --> 00:00:47.660
我们需要指定参数

00:00:47.660 --> 00:00:49.640
例如要使用什么算法

00:00:49.640 --> 00:00:54.260
该算法特定的超参数以及数据的存储位置

00:00:54.260 --> 00:00:56.720
设定好训练作业后

00:00:56.720 --> 00:00:59.780
请求 SageMaker 创建并运行该训练作业

00:00:59.780 --> 00:01:03.935
等待作业运行完毕

00:01:03.935 --> 00:01:05.630
训练作业运行完毕后

00:01:05.630 --> 00:01:08.975
机器学习算法（即 XGBoost）的输出将保存到 S3 中

00:01:08.975 --> 00:01:14.420
这些文件称为模型工件

00:01:14.420 --> 00:01:16.430
然后 我们可以在 SageMaker 中创建一个模型

00:01:16.430 --> 00:01:19.250
我们将指定要使用哪些模型工件

00:01:19.250 --> 00:01:24.275
并指定包含相应推理代码的 docker 容器

00:01:24.275 --> 00:01:25.895
就像在上个视频中一样

00:01:25.895 --> 00:01:29.780
我们不使用批量转换功能测试模型

00:01:29.780 --> 00:01:33.995
而是部署模型 然后向部署的端点发送测试数据

00:01:33.995 --> 00:01:40.350
在 SageMaker 中部署模型是指创建一个端点

00:01:40.350 --> 00:01:44.630
从用户的角度来看 该端点就是一个 URL 我们可以向其发送数据

00:01:44.630 --> 00:01:47.540
但是在后台要复杂一些

00:01:47.540 --> 00:01:50.750
幸运的是 SageMaker 会帮助我们处理大部分工作

00:01:50.750 --> 00:01:53.600
所以在部署模型时

00:01:53.600 --> 00:01:57.170
我们需要创建一个端点 为了创建端点

00:01:57.170 --> 00:02:00.870
我们需要详细告诉 SageMaker 该端点应该如何运行

00:02:00.870 --> 00:02:04.460
也就是说 我们需要进行端点配置

00:02:04.460 --> 00:02:07.620
就像 SageMaker 中的大部分对象一样

00:02:07.620 --> 00:02:12.270
端点必须有名称 并且是唯一的

00:02:12.270 --> 00:02:15.455
我们将采用和之前一样的技巧

00:02:15.455 --> 00:02:19.310
在所选的名称后面附加时间戳

00:02:19.310 --> 00:02:24.405
设定名称后 我们需要指定一系列的生产变体

00:02:24.405 --> 00:02:30.405
它们是同一模型（或不同模型）的不同版本

00:02:30.405 --> 00:02:36.230
端点就像是一个统一资源 我们可以向其发送数据

00:02:36.230 --> 00:02:41.060
SageMaker 然后会获取我们发送给端点的数据

00:02:41.060 --> 00:02:44.615
如果需要的话 SageMaker 会在不同的模型之间拆分数据

00:02:44.615 --> 00:02:48.530
暂时我们只在端点上部署一个模型

00:02:48.530 --> 00:02:53.720
所以 ProductionVariants 包含一项

00:02:53.720 --> 00:02:58.505
这一项就是我们

00:02:58.505 --> 00:02:59.735
之前创建的模型

00:02:59.735 --> 00:03:03.230
要求 SageMaker 创建端点配置后

00:03:03.230 --> 00:03:05.090
它会新建一个对象

00:03:05.090 --> 00:03:07.730
这个端点配置可以看做一个蓝图

00:03:07.730 --> 00:03:10.160
我们日后可以多次使用该蓝图

00:03:10.160 --> 00:03:15.155
它会告诉 SageMaker 如何创建特定的端点

00:03:15.155 --> 00:03:18.980
例如 回到 SageMaker 控制台

00:03:18.980 --> 00:03:22.295
在左侧点击“Endpoint configurations”

00:03:22.295 --> 00:03:26.905
第一个是我们刚刚创建的端点配置

00:03:26.905 --> 00:03:32.090
它会永远保留在这里 我们可以随时使用

00:03:32.090 --> 00:03:34.400
该蓝图创建一个端点

00:03:34.400 --> 00:03:36.325
回到 notebook

00:03:36.325 --> 00:03:42.260
我们现在可以要求 SageMaker 根据我们刚刚设定的配置创建一个端点

00:03:42.260 --> 00:03:44.010
和之前一样

00:03:44.010 --> 00:03:48.130
我们需要指定一个唯一名称

00:03:48.130 --> 00:03:53.590
现在 SageMaker 正在后台设置端点

00:03:53.590 --> 00:03:56.110
像之前一样 我们可以使用此方法

00:03:56.110 --> 00:04:00.070
直观地查看端点的配置进度

00:04:00.070 --> 00:04:02.500
在 SageMaker 设置端点期间

00:04:02.500 --> 00:04:05.440
我们来看看创建了什么

00:04:05.440 --> 00:04:08.660
切换到 SageMaker 控制台

00:04:08.660 --> 00:04:12.940
这个对象是我们刚刚创建的端点配置

00:04:12.940 --> 00:04:17.470
点击左侧的“Endpoints”

00:04:17.470 --> 00:04:20.380
可以看到我们刚刚要求 SageMaker 创建的端点

00:04:20.380 --> 00:04:24.585
目前它正在创建中

00:04:24.585 --> 00:04:27.905
下面等待 SageMaker 为我们创建好端点

00:04:27.905 --> 00:04:31.175
现在看到端点处于 InService 状态了

00:04:31.175 --> 00:04:33.155
切换到 notebook

00:04:33.155 --> 00:04:37.120
可以看到端点创建流程也结束了

00:04:37.120 --> 00:04:38.385
下面可以测试模型了

00:04:38.385 --> 00:04:43.745
正如之前提到的 我们需要序列化数据并发送给端点

00:04:43.745 --> 00:04:45.080
但是现在

00:04:45.080 --> 00:04:47.050
我们没有 predictor 对象了

00:04:47.050 --> 00:04:50.810
需要手动序列化数据 过程很简单

00:04:50.810 --> 00:04:54.695
我们将矩阵（记录列表）

00:04:54.695 --> 00:04:58.900
转化成按逗号分隔的文件

00:04:58.900 --> 00:05:04.220
然后使用 sagemaker_runtime_client 调用该端点

00:05:04.220 --> 00:05:07.835
指定名称和 csv 格式的数据

00:05:07.835 --> 00:05:12.990
然后包含希望模型处理的数据

00:05:12.990 --> 00:05:15.170
生成的对象是序列化输出

00:05:15.170 --> 00:05:18.500
我们需要转换为字符串

00:05:18.500 --> 00:05:22.010
然后再转换回 numpy 数组

00:05:22.010 --> 00:05:24.290
获得输出后

00:05:24.290 --> 00:05:26.415
我们可以绘制图形 看看运行效果

00:05:26.415 --> 00:05:29.795
与之前一样 使用完端点后 关闭端点

00:05:29.795 --> 00:05:33.410
但是我将介绍一个

00:05:33.410 --> 00:05:37.490
与使用 notebook 方法不一样的关闭方式

00:05:37.490 --> 00:05:40.310
切换到 SageMaker 控制台

00:05:40.310 --> 00:05:42.215
看看我们的端点

00:05:42.215 --> 00:05:45.890
点击此端点可以查看更多信息

00:05:45.890 --> 00:05:48.170
这是实际 URL

00:05:48.170 --> 00:05:52.610
我们可以使用该 URL 向端点发送数据

00:05:52.610 --> 00:05:55.070
并非任何人都能向其发送数据

00:05:55.070 --> 00:05:58.205
稍后我会详细讲解的

00:05:58.205 --> 00:06:02.770
这个页面还有一个实用功能 叫做“Delete”按钮

00:06:02.770 --> 00:06:04.180
点击“Delete”后

00:06:04.180 --> 00:06:06.440
将关闭端点

00:06:06.440 --> 00:06:09.335
所以我们不需要使用 notebook 关闭端点

00:06:09.335 --> 00:06:11.450
也可以使用这个 SageMaker 控制台按钮

00:06:11.450 --> 00:06:13.980
是的 我们想要删除端点

