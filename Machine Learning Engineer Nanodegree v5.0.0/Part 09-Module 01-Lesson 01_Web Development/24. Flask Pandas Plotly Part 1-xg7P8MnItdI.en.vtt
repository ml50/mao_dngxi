WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.120
This is the part where we start putting everything together.

00:00:03.120 --> 00:00:07.110
Bear with me a bit on this video because there is a lot to show.

00:00:07.110 --> 00:00:09.990
Here's a reminder of where we are so far.

00:00:09.990 --> 00:00:14.310
I have this web app with roots and HTML templates,

00:00:14.310 --> 00:00:17.425
but the templates aren't particularly interesting yet.

00:00:17.425 --> 00:00:22.455
There's also a CSV file that's imported and wrangled with pandas.

00:00:22.454 --> 00:00:25.109
This is the file that does all the wrangling.

00:00:25.109 --> 00:00:28.079
The goal is to take this wrangled data,

00:00:28.079 --> 00:00:33.144
setup a plotly visualization and show the visualization on the front-end.

00:00:33.145 --> 00:00:35.620
Let's look at the routes.py file.

00:00:35.619 --> 00:00:42.195
My wrangling data dashboard was actually only one webpage so I only need one route.

00:00:42.195 --> 00:00:45.000
I'm going to erase this second route down here.

00:00:45.000 --> 00:00:49.255
I've got all this data here in this data variable.

00:00:49.255 --> 00:00:53.130
Let's start the web app just so we can see what that data looks like.

00:00:53.130 --> 00:00:55.880
The data is getting printed out in the routes file.

00:00:55.880 --> 00:00:59.975
It's a list of tuples where each tuple contains a country name,

00:00:59.975 --> 00:01:02.590
X values and Y values.

00:01:02.590 --> 00:01:06.525
So how can we convert this into a visualization?

00:01:06.525 --> 00:01:10.370
You need to somehow send this data which is sitting on

00:01:10.370 --> 00:01:14.910
the back-end and get it over to the front-end. How can you do that?

00:01:14.909 --> 00:01:17.054
In the render template method,

00:01:17.055 --> 00:01:20.480
you can actually send variables to the front-end.

00:01:20.480 --> 00:01:25.240
All you have to do is list them after you specify the template name.

00:01:25.239 --> 00:01:29.469
That's what I've done here by saying, ''data_set = data.''

00:01:29.469 --> 00:01:34.150
Now the front-end is going to have access to this data set variable.

00:01:34.150 --> 00:01:37.830
Let's switch over to the index.html front-end code.

00:01:37.829 --> 00:01:41.984
This index.html just has regular HTML in it,

00:01:41.984 --> 00:01:46.039
but Flask actually includes a template engine called Ginger.

00:01:46.040 --> 00:01:51.993
A template engine is a tool that lets you reuse HTML by introducing variables.

00:01:51.993 --> 00:01:54.599
Here's what I mean: the data set

00:01:54.599 --> 00:01:58.474
variable from the back-end is now available to the front-end.

00:01:58.474 --> 00:02:03.599
All you have to do is wrap the variable name in curly braces like this.

00:02:03.599 --> 00:02:05.814
Now let's go to the front end.

00:02:05.814 --> 00:02:10.555
On the index.html page all of the data is just now being printed out,

00:02:10.555 --> 00:02:14.905
so we were able to get the data from the back-end and show it on the front-end.

00:02:14.905 --> 00:02:16.835
In fact with Ginger,

00:02:16.835 --> 00:02:20.599
you can write control flow statements like if and for.

00:02:20.599 --> 00:02:23.625
This can give you more control over the formatting,

00:02:23.625 --> 00:02:27.500
you just have to learn the syntax. Let me show you.

00:02:27.500 --> 00:02:32.360
Going back to index.html I'm going to write a fore loop.

00:02:32.400 --> 00:02:36.390
Let's see what this fore loop looks like on the front-end.

00:02:36.389 --> 00:02:42.014
So it's iterating through all of the data and printing it out line by line.

00:02:42.014 --> 00:02:47.659
You could imagine using this syntax maybe to make a table for the data for example.

00:02:47.659 --> 00:02:50.680
The syntax is that variables are surrounded by

00:02:50.680 --> 00:02:53.335
two squiggly brackets and control statements

00:02:53.335 --> 00:02:56.445
have one squiggly bracket and then percent signs.

00:02:56.444 --> 00:02:59.439
The reason why these variables and control statements

00:02:59.439 --> 00:03:02.379
need to be separated off in some way is so that

00:03:02.379 --> 00:03:05.094
the template engine knows what part is actually

00:03:05.094 --> 00:03:09.490
HTML tags and what part is a variable or a control statement.

00:03:09.490 --> 00:03:12.504
You can imagine why this is called a template engine.

00:03:12.504 --> 00:03:18.719
The HTML can be re-used as a skeleton and the information in the variables might change.

00:03:18.719 --> 00:03:22.564
So the next step is to figure out how to set up a plotly visualization

00:03:22.564 --> 00:03:26.870
in the Python back-end and then send this information to the front-end.

