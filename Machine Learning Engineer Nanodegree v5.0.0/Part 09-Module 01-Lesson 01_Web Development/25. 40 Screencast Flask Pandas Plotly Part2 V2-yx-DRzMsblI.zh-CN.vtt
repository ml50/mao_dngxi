WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.669
现在你知道如何从 Web 应用后端获取信息传送给前端

00:00:02.669 --> 00:00:05.820
现在你知道如何从 Web 应用后端获取信息传送给前端

00:00:05.820 --> 00:00:08.940
但我们真正想要从后端传递到前端的是可视化信息

00:00:08.939 --> 00:00:12.449
但我们真正想要从后端传递到前端的是可视化信息

00:00:12.449 --> 00:00:14.714
我写了一些代码

00:00:14.714 --> 00:00:19.689
在后端设置 Plotly 可视化 并将该信息发送到前端

00:00:19.690 --> 00:00:22.170
然后在前端绘制可视化

00:00:22.170 --> 00:00:25.140
我将引导你浏览这些代码 然后提供

00:00:25.140 --> 00:00:28.940
类似代码作为练习的一部分 方便你熟悉

00:00:28.940 --> 00:00:30.445
那么有哪些变化?

00:00:30.445 --> 00:00:35.564
首先 使用 pip install plotly 将 Plotly 安装到我的 workspace

00:00:35.564 --> 00:00:37.439
如果我现在在终端操作

00:00:37.439 --> 00:00:40.655
什么都不会发生 因为我已经安装好了

00:00:40.655 --> 00:00:44.109
这里看到终端显示说需求已经满足了

00:00:44.109 --> 00:00:47.140
在 routes.py 文件中

00:00:47.140 --> 00:00:50.149
我导入了 plotly 库

00:00:50.149 --> 00:00:54.659
json 库和 plotly 库中的 graph_objs

00:00:54.659 --> 00:00:59.699
然后 我通过调用 data_wrangling 函数来获取整理后的数据

00:00:59.700 --> 00:01:04.534
我打印出第一个元组 可以看到数据的样子

00:01:04.534 --> 00:01:09.409
在这个可视化中 我暂时只绘制第一个元组的数据

00:01:09.409 --> 00:01:11.545
这就是为什么在 country 变量中

00:01:11.545 --> 00:01:15.170
我只取了第一个元组的 country 值

00:01:15.170 --> 00:01:18.810
然后是第一个元组的 x 值和 y 值

00:01:18.810 --> 00:01:21.259
为了让你了解现在数据的样子

00:01:21.259 --> 00:01:24.680
我先运行一次这个新的 Web 应用

00:01:24.680 --> 00:01:28.170
这样你就可以在终端看到结果

00:01:28.909 --> 00:01:31.364
在这里

00:01:31.364 --> 00:01:35.024
美国 1990 年至 2015 年

00:01:35.025 --> 00:01:39.450
y 值是 24.7 和 18.383

00:01:39.450 --> 00:01:42.984
希望接下来的代码你能觉得眼熟

00:01:42.984 --> 00:01:47.480
因为它与绘制 Plotly 的 JavaScript 代码非常非常相似

00:01:47.480 --> 00:01:50.030
在这个 graph_one 变量中

00:01:50.030 --> 00:01:53.045
我准备绘制一个折线图

00:01:53.045 --> 00:01:55.325
使用 x 值 y 值和国家 name

00:01:55.325 --> 00:01:57.980
可视化必须在列表中

00:01:57.980 --> 00:02:03.484
这就是在这个 go.Scatter 语法周围有方括号的原因

00:02:03.484 --> 00:02:05.219
你可能会问

00:02:05.219 --> 00:02:07.760
我该如何找到所有这些语法?

00:02:07.760 --> 00:02:11.605
答案是 通读 Plotly 的 Python 库文档

00:02:11.604 --> 00:02:13.319
接下来到布局部分

00:02:13.319 --> 00:02:14.954
layout 必须在字典中

00:02:14.955 --> 00:02:19.440
语法可能有点令人困惑 这是一个字典组成的字典

00:02:19.439 --> 00:02:22.939
我这次也是通过阅读 Plotly 文档来解决这个问题的

00:02:22.939 --> 00:02:25.759
代码的下一部分是

00:02:25.759 --> 00:02:28.685
当有多个可视化时的设置

00:02:28.685 --> 00:02:31.175
虽然目前只有一个可视化

00:02:31.175 --> 00:02:34.300
稍后我会进行多个可视化的绘制

00:02:34.300 --> 00:02:37.285
ids 变量是一个列表

00:02:37.284 --> 00:02:40.039
包含每个图表的不同 id

00:02:40.039 --> 00:02:41.724
比如 figure-0 figure-1 等等

00:02:41.724 --> 00:02:45.889
然后 figuresJSON 将存有可视化信息的字典

00:02:45.889 --> 00:02:50.889
转换为 Plotly 可以在 JavaScript 前端解释的形式

00:02:50.889 --> 00:02:53.689
接下来 我在 render_template 方法中传入

00:02:53.689 --> 00:02:58.444
ids 列表和 figuresJSON 变量 将其发送到前端

00:02:58.444 --> 00:03:03.594
那么 我们来看一下前端的 index.html 文件

00:03:03.594 --> 00:03:08.460
这里 我在第六行中添加了一个指向 JavaScript Plotly 库的链接

00:03:08.460 --> 00:03:14.254
我还在段落中打印出了 ids 变量和 figuresJSON 变量

00:03:14.254 --> 00:03:16.579
这样你就可以看到它们的值

00:03:16.580 --> 00:03:18.890
这些将在前端打印出来

00:03:18.889 --> 00:03:21.409
还记得之前使用 Plotly 和

00:03:21.409 --> 00:03:24.669
JavaScript 的时候 为每个图表创建了 div 吗?

00:03:24.669 --> 00:03:27.319
这就是我在第 14 行所做的事情

00:03:27.319 --> 00:03:31.014
获取了 ids 列表中的第一个 id 作为 div 的 id

00:03:31.014 --> 00:03:32.784
如果我有更多的图表

00:03:32.784 --> 00:03:35.840
我需要为其他 id 制作更多的 div

00:03:35.840 --> 00:03:40.060
ids[1] ids[2] 等等

00:03:40.060 --> 00:03:43.099
最后 下面的 JavaScript 代码使用

00:03:43.099 --> 00:03:46.639
来自前端的 figuresJSON 变量和 ids

00:03:46.639 --> 00:03:49.984
一次绘制一个可视化

00:03:49.985 --> 00:03:54.035
遍历 ids data 和 layout

00:03:54.034 --> 00:03:57.004
但就目前而言 我只有一个可视化

00:03:57.004 --> 00:04:01.144
这里的 safe 单词是一种 escape 过滤器

00:04:01.145 --> 00:04:05.120
escape 过滤器只是确保如果 figures 或 ids 变量使用

00:04:05.120 --> 00:04:09.689
任何 HTML 特殊字符 如大于号或小于号

00:04:09.689 --> 00:04:11.419
这些字符能够被正确解释

00:04:11.419 --> 00:04:15.574
我将为你提供所有这些代码 因此你无需重写

00:04:15.574 --> 00:04:21.139
你需要做的就是使用正确的 id 为每个可视化创建一个 div

00:04:21.139 --> 00:04:24.274
并将 div 放在要显示可视化的位置

00:04:24.274 --> 00:04:26.000
让我们看看前端的样子

00:04:26.000 --> 00:04:29.355
这是 index.html 页面

00:04:29.355 --> 00:04:32.434
这里是图表 id

00:04:32.434 --> 00:04:38.260
这是 figuresJSON 中的值 然后这是图表

00:04:38.259 --> 00:04:41.329
所以代码成功了

00:04:41.329 --> 00:04:44.569
目前为止 也许前端还组织得不太好

00:04:44.569 --> 00:04:47.555
也许还不清楚如何绘制多个图表

00:04:47.555 --> 00:04:52.730
或者如何在一个图表上绘制多条折线 但这就是我接下来要讲的

