WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.120
这部分课程中 我们开始把所有工作放到一起

00:00:03.120 --> 00:00:07.110
这个视频请稍微坚持一下 因为有很多东西需要展示

00:00:07.110 --> 00:00:09.990
回顾一下目前为止的情况

00:00:09.990 --> 00:00:14.310
我拥有这个带有路由和 HTML 模板的 Web 应用

00:00:14.310 --> 00:00:17.425
但模板还不够有趣

00:00:17.425 --> 00:00:22.455
还有一个用 pandas 导入和整理的 CSV 文件

00:00:22.454 --> 00:00:25.109
这是进行整理工作的文件

00:00:25.109 --> 00:00:28.079
目标是使用这些整理后的数据

00:00:28.079 --> 00:00:33.144
设置 plotly 可视化并在前端显示

00:00:33.145 --> 00:00:35.620
来看一下 routes.py 文件

00:00:35.619 --> 00:00:42.195
我的数据仪表板实际上只有一个网页 所以我只需要一个路由

00:00:42.195 --> 00:00:45.000
我要删除第二个路由

00:00:45.000 --> 00:00:49.255
这个 data 变量中获取了所有数据

00:00:49.255 --> 00:00:53.130
启动 Web 应用 方便我们查看数据的样式

00:00:53.130 --> 00:00:55.880
routes 文件打印出了 data 数据

00:00:55.880 --> 00:00:59.975
这是一个元组列表 其中每个元组都包含一个国家名称、

00:00:59.975 --> 00:01:02.590
x 值和 y 值

00:01:02.590 --> 00:01:06.525
那么如何将其转换为可视化?

00:01:06.525 --> 00:01:10.370
你需要以某种方式将这些数据

00:01:10.370 --> 00:01:14.910
从后端发送到前端 怎样做到呢?

00:01:14.909 --> 00:01:17.054
在 render_template 方法中

00:01:17.055 --> 00:01:20.480
实际上可以将变量发送到前端

00:01:20.480 --> 00:01:25.240
只需在指定模板名称后列出即可

00:01:25.239 --> 00:01:29.469
这就是我在这里所写的 data_set = data

00:01:29.469 --> 00:01:34.150
现在前端可以访问这个 data_set 变量

00:01:34.150 --> 00:01:37.830
切换到 index.html 前端代码

00:01:37.829 --> 00:01:41.984
index.html 中只有常规的 HTML

00:01:41.984 --> 00:01:46.039
但 Flask 实际上包含一个名为 Jinja 的模板引擎

00:01:46.040 --> 00:01:51.993
模板引擎是一种工具 可以通过引入变量 让你复用 HTML

00:01:51.993 --> 00:01:54.599
详细解释一下

00:01:54.599 --> 00:01:58.474
从后端传来的 data_set 变量 现在前端也可以访问了

00:01:58.474 --> 00:02:03.599
你要做的就是将变量名称包装在这样的大括号中

00:02:03.599 --> 00:02:05.814
现在打开前端

00:02:05.814 --> 00:02:10.555
在 index.html 页面上 所有数据现在都打印出来了

00:02:10.555 --> 00:02:14.905
所以我们能够从后端获取数据并在前端显示

00:02:14.905 --> 00:02:16.835
实际上 使用 Jinja

00:02:16.835 --> 00:02:20.599
你可以编写控制流语句 如 if 和 for

00:02:20.599 --> 00:02:23.625
这可以更好地控制格式

00:02:23.625 --> 00:02:27.500
你只需要学习语法 我先来演示一下

00:02:27.500 --> 00:02:32.360
回到 index.html 我要写一个 for 循环

00:02:32.400 --> 00:02:36.390
看看这个 for 循环在前端如何表现

00:02:36.389 --> 00:02:42.014
它会遍历所有数据并逐行打印

00:02:42.014 --> 00:02:47.659
你可以想象 使用这种语法可能能用数据制作一个表格

00:02:47.659 --> 00:02:50.680
语法是 变量用两个大括号括起来

00:02:50.680 --> 00:02:53.335
控制语句是一个大括号和一个百分号

00:02:53.335 --> 00:02:56.445
控制语句是一个大括号和一个百分号

00:02:56.444 --> 00:02:59.439
之所以需要以某种方式将这些变量和控制语句区分开

00:02:59.439 --> 00:03:02.379
之所以需要以某种方式将这些变量和控制语句区分开

00:03:02.379 --> 00:03:05.094
是为了使模板引擎知道哪部分实际上

00:03:05.094 --> 00:03:09.490
是 HTML 标签 哪部分是变量或控制语句

00:03:09.490 --> 00:03:12.504
你可以想象为什么这会被叫做模板引擎

00:03:12.504 --> 00:03:18.719
HTML 可以作为骨架复用 变量中的信息可能会发生变化

00:03:18.719 --> 00:03:22.564
下一步是弄清楚如何在 Python 后端设置 plotly 可视化

00:03:22.564 --> 00:03:26.870
然后将可视化信息发送到前端

