WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.404
目前为止 你一直在教室或本地开发 Web 应用

00:00:03.404 --> 00:00:06.844
目前为止 你一直在教室或本地开发 Web 应用

00:00:06.844 --> 00:00:10.775
但是 你无法与其他人分享该应用

00:00:10.775 --> 00:00:14.940
除非你将所有文件发送到别人的计算机

00:00:14.939 --> 00:00:19.170
然后让他/她的自己本地计算机上设置 Python 环境

00:00:19.170 --> 00:00:21.420
所以 现在应该要将应用部署到

00:00:21.420 --> 00:00:26.140
带网址的外部服务器 让任何人都可以看到你的工作

00:00:26.140 --> 00:00:30.785
有很多公司都有提供 Web 服务器 用于部署 Web 应用

00:00:30.785 --> 00:00:33.679
在这个视频中 我选择使用 Heroku

00:00:33.679 --> 00:00:37.079
其被视为平台即服务 (PaaS)

00:00:37.079 --> 00:00:39.979
个人认为 它是比较容易使用的平台

00:00:39.979 --> 00:00:43.125
并不需要太多配置

00:00:43.125 --> 00:00:46.429
还有一个不会过期的免费套餐

00:00:46.429 --> 00:00:49.429
所以 如果你有一个像这样的小型 Web 应用

00:00:49.429 --> 00:00:51.200
没有数据库

00:00:51.200 --> 00:00:54.109
Heroku 就能满足我们的需求

00:00:54.109 --> 00:00:57.460
我将引导你完成在 Heroku 上部署应用

00:00:57.460 --> 00:00:59.005
这样你就能自己动手操作了

00:00:59.005 --> 00:01:02.209
从教室 Linux workspace 开始

00:01:02.209 --> 00:01:05.295
我会在视频下方提供一个列表

00:01:05.295 --> 00:01:09.299
列出你可以使用的其他服务器

00:01:09.299 --> 00:01:12.795
好的 这就是我们的 Web 应用

00:01:12.795 --> 00:01:17.180
所有文件夹和文件都在左侧的边栏

00:01:17.180 --> 00:01:19.910
第一步是

00:01:19.909 --> 00:01:24.439
创建一个新文件夹 把所有这些文件放入新文件夹中

00:01:24.439 --> 00:01:26.439
我要用终端来完成以上操作

00:01:26.439 --> 00:01:29.299
不过你也可以使用加号

00:01:29.299 --> 00:01:32.894
还可以在此处右键单击这些文件夹和文件

00:01:32.894 --> 00:01:34.819
打开一个新的终端

00:01:34.819 --> 00:01:36.759
需要输入的是

00:01:36.760 --> 00:01:39.829
mkdir 文件夹名称叫做 web_app

00:01:39.829 --> 00:01:45.140
现在把所有这些文件夹和文件移动到新的 web_app 文件夹中

00:01:45.140 --> 00:01:47.605
mv 是 move (移动) 的缩写

00:01:47.605 --> 00:01:53.040
-t 意思是 先指定新目录 然后是

00:01:53.040 --> 00:02:00.460
要移动到 web_app 文件夹的所有文件和文件夹

00:02:00.730 --> 00:02:04.270
看起来拼错了 worldbankapp

00:02:04.269 --> 00:02:06.414
修复一下

00:02:06.415 --> 00:02:10.974
你可以看到 一切都转移到了这个新文件夹中

00:02:10.974 --> 00:02:15.069
要安装这个 Web 应用

00:02:15.069 --> 00:02:19.219
我们必须要指定该应用所需的所有 python 库

00:02:19.219 --> 00:02:20.805
现在 在这个 workspace 中

00:02:20.805 --> 00:02:22.879
或者也可能在你的本地计算机上

00:02:22.879 --> 00:02:24.034
安装了很多

00:02:24.034 --> 00:02:29.439
你的 Web 应用实际上不需要的额外 Python 库

00:02:29.439 --> 00:02:34.444
因此 我们要通过创建虚拟环境来解决这个问题

00:02:34.444 --> 00:02:37.189
在虚拟环境中 只安装这个特定应用所需的 Python 库

00:02:37.189 --> 00:02:40.710
在虚拟环境中 只安装这个特定应用所需的 Python 库

00:02:40.710 --> 00:02:44.159
现在 这个 workspace 安装了 Anaconda

00:02:44.159 --> 00:02:48.299
这是用于 Python 和数据科学的一组工具

00:02:48.300 --> 00:02:51.325
目前关于该 Anaconda 安装和 Python 以及虚拟环境存在一个问题

00:02:51.324 --> 00:02:56.289
目前关于该 Anaconda 安装和 Python 以及虚拟环境存在一个问题

00:02:56.289 --> 00:02:58.509
所以在开始操作之前

00:02:58.509 --> 00:03:02.729
你需要运行 conda update python

00:03:02.729 --> 00:03:04.844
这需要一段时间

00:03:04.844 --> 00:03:09.594
如果你没有在本地计算机上安装 Conda

00:03:09.594 --> 00:03:11.680
不用完成这步操作

00:03:11.680 --> 00:03:14.415
好的 当它显示 Proceed 时 点击 y (代表 yes)

00:03:14.414 --> 00:03:20.014
然后按回车 等待安装完成

00:03:20.014 --> 00:03:23.079
好的 现在 Python 已更新完毕

00:03:23.080 --> 00:03:27.025
现在就可以创建一个虚拟环境 然后启动它了

00:03:27.025 --> 00:03:29.569
要创建一个虚拟环境

00:03:29.569 --> 00:03:32.204
进入终端并输入以下内容

00:03:32.205 --> 00:03:39.630
python3 -n venv 然后是你的虚拟环境的名称

00:03:39.629 --> 00:03:41.019
可以任意命名

00:03:41.020 --> 00:03:43.980
我打算叫做 worldbankenv

00:03:44.740 --> 00:03:48.260
现在 可以看到左侧有一个新文件夹 名为

00:03:48.259 --> 00:03:53.039
worldbankenv 其中实际上是一个 Python 安装

00:03:53.039 --> 00:03:57.099
这与你计算机上的其他 Python 安装是分隔开的

00:03:57.099 --> 00:04:01.090
接下来你需要激活虚拟环境

00:04:01.090 --> 00:04:04.569
输入 source worldbankenv/bin/activate

00:04:08.039 --> 00:04:12.750
可以看到虚拟环境被激活

00:04:12.750 --> 00:04:14.155
因为在终端的这里

00:04:14.155 --> 00:04:16.720
现在出现了虚拟环境的名称

00:04:16.720 --> 00:04:19.220
好的 下一步是

00:04:19.220 --> 00:04:22.970
我们要安装 Flask 应用所需的库

00:04:22.970 --> 00:04:25.550
再次提醒 我们创建这个虚拟环境的原因

00:04:25.550 --> 00:04:29.329
就是要将所有库都安装在该虚拟环境中

00:04:29.329 --> 00:04:31.909
就是要将所有库都安装在该虚拟环境中

00:04:31.910 --> 00:04:36.000
而不是你本地计算机的常规 Python 安装中

00:04:36.000 --> 00:04:38.779
pip install

00:04:38.779 --> 00:04:42.544
然后列出我需要的所有库

00:04:42.545 --> 00:04:46.475
在这个示例中是 flask pandas 和 plotly

00:04:46.475 --> 00:04:50.410
然后实际上还要添加一个其他的库

00:04:50.410 --> 00:04:57.140
gunicorn 用于部署 Web 应用

00:04:57.139 --> 00:04:59.154
好了 现在在终端中

00:04:59.154 --> 00:05:02.500
我要进入 web_app 文件夹

00:05:02.500 --> 00:05:08.240
下一步是安装 Heroku 提供的一组工具

00:05:08.240 --> 00:05:14.375
这样你就可以编写命令 将应用直接从终端上传到 Heroku

00:05:14.375 --> 00:05:17.149
实际上 有一个网页会告诉你

00:05:17.149 --> 00:05:20.049
如何在不同的系统上安装这些工具

00:05:20.050 --> 00:05:22.235
就是这个页面

00:05:22.235 --> 00:05:24.944
我会在视频下方提供其链接

00:05:24.944 --> 00:05:26.735
在这个页面上

00:05:26.735 --> 00:05:31.889
它说如果你在 Linux 或 Ubuntu 系统上(也就是我们当前的系统)

00:05:31.889 --> 00:05:34.629
你要完成以下操作

00:05:34.629 --> 00:05:42.759
进入终端 运行这里的命令

00:05:42.759 --> 00:05:47.449
现在就在安装了 为了检查一切安装成功

00:05:47.449 --> 00:05:51.935
输入 heroku --version

00:05:51.935 --> 00:05:54.845
好的 看起来已经安装完毕了

00:05:54.845 --> 00:05:59.250
你要做的下一件事是注册一个 Heroku 帐户

00:05:59.250 --> 00:06:02.209
就像注册任何其他网站的服务一样

00:06:02.209 --> 00:06:11.669
访问 Heroku 网站并点击右上角的 Sign up (注册)

00:06:11.670 --> 00:06:14.020
只需在其中填写你的信息

00:06:14.019 --> 00:06:16.839
当你创建用户名之后

00:06:16.839 --> 00:06:19.919
也就是你的电子邮件地址 以及密码

00:06:19.920 --> 00:06:23.645
你实际上需要从命令行登录

00:06:23.644 --> 00:06:26.509
现在我们已经安装了 Heroku 工具

00:06:26.509 --> 00:06:32.000
你可以输入 heroku login 终端显示 "输入你的登录凭证"

00:06:32.000 --> 00:06:35.209
电子邮件 然后后面会要求输入密码

00:06:35.209 --> 00:06:39.974
为了隐藏这些个人信息 我要将屏幕向上拉一下

00:06:39.975 --> 00:06:43.480
好的 现在我登录了我的 Heroku 帐户

00:06:43.480 --> 00:06:45.230
这步操作只需输入你的 Heroku 帐户的电子邮件和密码即可

00:06:45.230 --> 00:06:49.825
这步操作只需输入你的 Heroku 帐户的电子邮件和密码即可

00:06:49.824 --> 00:06:53.899
现在 只需要再做一些整理工作

00:06:53.899 --> 00:06:58.444
就可以将所有内容都上传到 Heroku Web 服务器了

00:06:58.444 --> 00:07:02.750
首先 打开 worldbank.py

00:07:02.750 --> 00:07:07.310
删除这个 app.run 代码行 因为我们不再需要它了

00:07:07.310 --> 00:07:10.245
我还需要创建一个 Procfile

00:07:10.245 --> 00:07:15.350
这个文件 告诉 Heroku 在启动你的 Web 应用时要做什么

00:07:15.350 --> 00:07:21.870
你可以通过创建新文件来完成此操作 或者可以在终端中执行此操作

00:07:21.870 --> 00:07:28.939
输入 touch Procfile 你可以看到这个 Procfile 在左侧出现了

00:07:28.939 --> 00:07:32.240
双击打开它

00:07:32.240 --> 00:07:36.835
输入 web gunicorn worldbank:app

00:07:36.834 --> 00:07:41.339
这实际上是指 在启动 Web 应用时

00:07:41.339 --> 00:07:45.289
调用 gunicorn 库

00:07:45.290 --> 00:07:52.444
运行我的 worldbank 应用 其中包含这个 app 变量 我们之前看到过

00:07:52.444 --> 00:07:54.529
接下来我需要做的就是

00:07:54.529 --> 00:07:58.064
指定所有需要的 Python 库

00:07:58.064 --> 00:08:03.219
如果你在终端输入 pip freeze

00:08:03.220 --> 00:08:08.300
它将为你提供所有当前安装的 Python 库列表

00:08:08.300 --> 00:08:10.730
你需要把所有这些信息放入一个名为 requirements.txt 的文件中

00:08:10.730 --> 00:08:14.265
你需要把所有这些信息放入一个名为 requirements.txt 的文件中

00:08:14.264 --> 00:08:22.254
我要输入 pip freeze &gt; requirements.txt

00:08:22.254 --> 00:08:26.944
这会把所有这些信息放入名为 requirements.txt 的文件中

00:08:26.944 --> 00:08:29.569
这个文件需要命名为 requirements.txt

00:08:29.569 --> 00:08:32.559
因为 Heroku 会查找此文件

00:08:32.559 --> 00:08:40.824
你可以看到其中只是列出了这个应用所依赖的所有 Python 库

00:08:40.825 --> 00:08:45.645
下一步是初始化一个 git 存储库

00:08:45.644 --> 00:08:53.319
git init 然后 git add 然后是一个句点

00:08:53.320 --> 00:09:00.690
然后是 git commit -m 后面加 'first commit' 作为消息

00:09:00.690 --> 00:09:03.380
终端上显示 请告诉我你是谁

00:09:03.379 --> 00:09:05.779
你必须配置电子邮件地址和用户名

00:09:05.779 --> 00:09:10.759
其实这里可以是任意地址和名称

00:09:10.759 --> 00:09:19.850
我输入 some@example.com 以及 git config user.name

00:09:19.850 --> 00:09:22.840
如果你愿意 你可以放入你的真实信息 我叫 Andrew

00:09:22.840 --> 00:09:26.080
好的 现在让我们再试一次

00:09:26.080 --> 00:09:29.370
git commit -m 'first commit'

00:09:29.370 --> 00:09:31.435
好的 我们完成了第一次提交

00:09:31.434 --> 00:09:37.369
最后一步是在 Heroku 上创建一个 Web 应用

00:09:37.370 --> 00:09:38.440
要做到这一点

00:09:38.440 --> 00:09:43.825
输入 heroku create 然后是你的 Web 应用名称

00:09:43.825 --> 00:09:46.009
这个名字必须是唯一的

00:09:46.009 --> 00:09:49.485
Heroku 上不能出现重复的名称

00:09:49.485 --> 00:09:51.529
所以 如果你尝试的第一个名字不行

00:09:51.529 --> 00:09:53.459
继续努力 直到找到一个不同的名字

00:09:53.460 --> 00:09:56.370
我打算称之为 dsnd-udacity-webapp

00:09:57.620 --> 00:10:03.889
按回车键 好的 它给了我可以查看该 Web 应用的链接

00:10:03.889 --> 00:10:06.399
它还在 Heroku 上创建了一个 git 存储库

00:10:06.399 --> 00:10:11.610
也就是文件实际上传和存储的地方

00:10:11.610 --> 00:10:13.759
为了再次确认

00:10:13.759 --> 00:10:17.240
我输入 git remote -v

00:10:17.240 --> 00:10:19.955
终端显示出 Heroku 自动

00:10:19.955 --> 00:10:24.055
将这些 git 存储库设置为了远程存储库

00:10:24.054 --> 00:10:26.014
最后一步就是输入

00:10:26.014 --> 00:10:34.514
git push heroku master 这将把我们的应用推送到 Heroku git 存储库

00:10:34.514 --> 00:10:39.600
这里显示所有内容都部署到了这个网址

00:10:39.600 --> 00:10:41.274
我要点击它

00:10:41.274 --> 00:10:43.629
好 看起来 Web 应用已部署完成了

00:10:43.629 --> 00:10:51.779
现在它的正式网址是 dsnd-udacity-webapp.herokuapp.com

00:10:51.779 --> 00:10:57.529
这就是将 Flask 应用部署到 Web 的一种方法

