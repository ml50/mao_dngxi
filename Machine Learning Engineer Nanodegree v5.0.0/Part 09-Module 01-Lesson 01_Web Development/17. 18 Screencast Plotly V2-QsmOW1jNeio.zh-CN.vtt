WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.360
在选择 JavaScript 图表库时 有很多选项

00:00:05.360 --> 00:00:08.220
对于本课程 我选择了 Plotly

00:00:08.220 --> 00:00:12.060
因为它既有 JavaScript 库 也有 Python 版本

00:00:12.060 --> 00:00:15.675
由于此 Web 应用的后端将使用 Python

00:00:15.675 --> 00:00:20.100
你实际上可以在后端使用 Plotly Python 库

00:00:20.100 --> 00:00:21.570
Plotly 如你所知

00:00:21.570 --> 00:00:22.969
实际上是一家公司

00:00:22.969 --> 00:00:25.929
但他们的图表库是开源的

00:00:25.929 --> 00:00:28.164
既然你还没有做到后端

00:00:28.164 --> 00:00:29.504
对于本课程的这一部分

00:00:29.504 --> 00:00:33.439
我将展示 Plotly 库的 JavaScript 版本

00:00:33.439 --> 00:00:40.409
Python 和 JavaScript 版本语法和背后的思想都非常相似

00:00:40.409 --> 00:00:44.034
因此 当你最后在课程中使用 Python Plotly 库时

00:00:44.034 --> 00:00:45.479
不会有太大不同

00:00:45.479 --> 00:00:47.134
要绘制一个图表

00:00:47.134 --> 00:00:51.519
你需要做的就是创建一个具有特定 id 的 div 元素

00:00:51.520 --> 00:00:52.870
这里你可以看到

00:00:52.869 --> 00:00:56.024
我有一个基础的 HTML 文档

00:00:56.024 --> 00:01:02.685
现在完成的就是链接到 Plotly 库的 JavaScript 源文件

00:01:02.685 --> 00:01:07.855
然后 我在这里用 id plot1 创建了一个 div

00:01:07.855 --> 00:01:11.660
另外 链接到一个名为 plot1.js 的脚本

00:01:11.659 --> 00:01:15.754
编写 JavaScript 代码将图表绘制出来

00:01:15.754 --> 00:01:21.549
我会将 plotly 代码放到这个 plot1.js 文件中

00:01:21.549 --> 00:01:25.039
基本上 你需要做的就是使用一些数据

00:01:25.040 --> 00:01:29.430
然后告诉 plotly 你想要绘制什么样的图表

00:01:29.430 --> 00:01:30.860
在当前示例中

00:01:30.859 --> 00:01:34.489
我将一些数据放入两个 JavaScript 列表中

00:01:34.489 --> 00:01:38.099
这只是常规的 JavaScript 代码

00:01:38.099 --> 00:01:41.329
我创建的数据中有一个变量是 year

00:01:41.329 --> 00:01:46.329
arable_land 是另一个变量

00:01:46.329 --> 00:01:50.625
这是我从世界银行网站上获取的真实数据

00:01:50.625 --> 00:01:53.275
好的 现在开始编写 plotly 代码

00:01:53.275 --> 00:01:55.835
我要创建一个变量 叫做 trace1

00:01:55.834 --> 00:01:58.684
trace (痕迹)  实际上也是一种可视化

00:01:58.685 --> 00:02:02.269
或者你可以将其视为可视化的一部分

00:02:02.269 --> 00:02:06.409
就像一条折线 或者一组散点

00:02:06.409 --> 00:02:08.155
你马上就能明白我是什么意思

00:02:08.155 --> 00:02:13.185
将 x 变量指定为 year

00:02:13.185 --> 00:02:16.134
y 变量指定为 arable_land

00:02:16.134 --> 00:02:21.090
然后选择 mode:'lines' 因为我想绘制折线图

00:02:21.090 --> 00:02:26.250
然后指定类型为散点图

00:02:26.250 --> 00:02:29.930
我现在写的实际是一个 JavaScript 字典

00:02:29.930 --> 00:02:34.210
设置可视化的各个部分

00:02:34.210 --> 00:02:39.115
我将创建另一个列表 data 在其中保存 trace1

00:02:39.115 --> 00:02:43.955
最后 只需要写出 Plotly.newPlot()

00:02:43.955 --> 00:02:47.585
也就是调用 Plotly 库 newPlot 方法

00:02:47.585 --> 00:02:52.680
然后传入 plot1 因为那是我们在 HTML 中使用的 id

00:02:52.680 --> 00:02:55.635
传入 data 应该就可以完成了

00:02:55.634 --> 00:02:58.139
好啦 这就是我做的图表

00:02:58.139 --> 00:03:00.489
这个图表并不完美

00:03:00.490 --> 00:03:03.230
比如 缺少标题

00:03:03.229 --> 00:03:07.284
缺少 x 轴和 y 轴的标签 所以我们来添加一下

00:03:07.284 --> 00:03:11.509
我要添加另一个名为 layout 的变量

00:03:11.509 --> 00:03:15.965
这个变量也是一个字典 其中包含我想要输入的信息 比如标题

00:03:15.965 --> 00:03:17.939
在其中加一个 br 标签

00:03:17.939 --> 00:03:21.520
这实际上是 HTML 中的换行

00:03:21.520 --> 00:03:24.915
这样标题就会显示为两行

00:03:24.914 --> 00:03:29.484
现在 我将指定一些关于 x 轴的设置

00:03:29.485 --> 00:03:34.550
这些设置在一个字典中 因为有多种选项

00:03:34.550 --> 00:03:36.700
我要设置 title: 'year'

00:03:36.699 --> 00:03:38.869
然后设置 tick

00:03:38.870 --> 00:03:46.150
我希望 tick 在 1990 年开始 间距为 25

00:03:46.150 --> 00:03:49.159
现在指定 y 轴设置

00:03:49.159 --> 00:03:54.449
比如标题 然后关闭括号

00:03:54.449 --> 00:03:59.669
现在 添加 layout 作为 newPlot 方法的第三个输入值

00:03:59.669 --> 00:04:03.119
好的 所以我们确保 x 轴开始于 1990 年

00:04:03.120 --> 00:04:07.219
只有两个点

00:04:07.219 --> 00:04:10.944
1990 年 然后是 25 年的间隔到 2015 年

00:04:10.944 --> 00:04:14.074
我们将 year 添加为 x 轴标签

00:04:14.074 --> 00:04:17.435
还添加了 y 轴标签和图表标题

00:04:17.435 --> 00:04:19.935
所以 你看到如何使用 Plotly 了

00:04:19.935 --> 00:04:23.790
你可以逐步构建图表 添加越来越多的功能

00:04:23.790 --> 00:04:27.944
让这个可视化变得更复杂一点

00:04:27.944 --> 00:04:29.740
我在这里有巴西的数据

00:04:29.740 --> 00:04:31.250
我想增加德国的数据

00:04:31.250 --> 00:04:33.860
这样巴西和德国同时出现在图表中

00:04:33.860 --> 00:04:38.280
修改此变量 将其命名为 arable_land1

00:04:38.279 --> 00:04:43.549
然后创建一个 country1 变量并将其赋值为 'Brazil'

00:04:43.550 --> 00:04:48.480
好的 现在我希望 arable_land1 作为 y 轴

00:04:48.480 --> 00:04:52.100
在这里添加 name 变量 对应值是 country1

00:04:52.100 --> 00:04:56.545
这会被用于图例中的名称

00:04:56.545 --> 00:05:00.840
现在 添加一些关于德国的信息

00:05:00.839 --> 00:05:04.049
我需要创建另一个 trace

00:05:04.050 --> 00:05:06.439
trace2 为德国绘制一条折线

00:05:06.439 --> 00:05:08.944
使用相同的 year 变量

00:05:08.944 --> 00:05:14.569
arable_land2 指定模式 指定类型

00:05:14.569 --> 00:05:20.159
现在 我们把 trace2 添加到 data 列表中 然后就好了

00:05:20.160 --> 00:05:22.930
提供一些其他的思路

00:05:22.930 --> 00:05:25.055
比如 你可以修改模式

00:05:25.055 --> 00:05:28.314
将其从 lines 修改为 markers

00:05:28.314 --> 00:05:31.975
这会给你显示点 而不是折线 或者你甚至可以设置为

00:05:31.975 --> 00:05:34.570
'lines+markers' 这样就都可以显示出来了

00:05:34.569 --> 00:05:37.675
好的 现在我们添加另一个图表

00:05:37.675 --> 00:05:40.975
我要做的就是添加另一个 div

00:05:40.975 --> 00:05:42.665
命名为其他名称

00:05:42.665 --> 00:05:46.145
我们用 plot2

00:05:46.144 --> 00:05:48.344
只是为了更便于管理

00:05:48.345 --> 00:05:52.580
我把它放到另一个文件中

00:05:52.579 --> 00:05:56.629
所以 创建一个名为 plot2 的新文件

00:05:56.629 --> 00:06:01.430
在 plot2 中 我将绘制一个条形图 做些不一样的操作

00:06:01.430 --> 00:06:06.745
直接将数据放入 data 而不再使用额外的变量

00:06:06.745 --> 00:06:09.095
同样 data 是一个列表

00:06:09.095 --> 00:06:11.270
按顺序列出所有数据点

00:06:11.269 --> 00:06:14.740
这样 x 和 y 匹配

00:06:14.740 --> 00:06:18.680
类型是条形图 因为我想做一些不同的操作

00:06:18.680 --> 00:06:21.740
让我们关闭括号 创建一个布局 layout

00:06:21.740 --> 00:06:30.285
设置为 title: 'Hectares Arable Land Per Person 2015'

00:06:30.285 --> 00:06:32.875
x 轴 设置一个标题

00:06:32.875 --> 00:06:37.759
y 轴 标题设置为 'hectares per person'

00:06:37.759 --> 00:06:43.089
然后 调用 Plotly.newPlot 方法

00:06:43.089 --> 00:06:47.454
确保指定正确的 id 名称 传入 data

00:06:47.454 --> 00:06:51.745
传入 layout 我们在下面得到了第二张图表

00:06:51.745 --> 00:06:56.280
自己决定哪种图表最适用于你的数据

00:06:56.279 --> 00:06:58.814
你可以去 Plotly 网站

00:06:58.814 --> 00:07:01.250
看到他们的所有示例

00:07:01.250 --> 00:07:03.800
这样你就可以绘制出你想要的图表

00:07:03.800 --> 00:07:06.954
他们网站上有很多例子

00:07:06.954 --> 00:07:09.009
同样地 你可以直接将代码拿来使用

00:07:09.009 --> 00:07:11.230
复制他们的示例代码

00:07:11.230 --> 00:07:13.915
然后替换为自己的数据

00:07:13.915 --> 00:07:16.750
按自己的喜好修改设置

00:07:16.750 --> 00:07:21.230
好了 我要展示的最后一件事 就是整合自己的工作

00:07:21.230 --> 00:07:26.725
将这些 Plotly 图表放入用 Bootstrap 库构建的网页中

00:07:26.725 --> 00:07:31.879
这里就是你之前使用 Bootstrap 构建的前端

00:07:31.879 --> 00:07:37.250
我添加了一些额外的东西

00:07:37.250 --> 00:07:40.225
在底部

00:07:40.225 --> 00:07:43.145
我添加了一些额外的 scripts 标签

00:07:43.144 --> 00:07:48.049
一个链接到 Plotly JavaScript 库

00:07:48.050 --> 00:07:53.525
另外两个链接到我之前写的 Plotly 代码

00:07:53.524 --> 00:07:57.404
也就是链接到 plot1.js 和 plot2.js

00:07:57.404 --> 00:08:00.409
现在唯一还要完成的就是

00:08:00.410 --> 00:08:04.870
把拥有正确 id 的 div 放入预期的位置

00:08:04.870 --> 00:08:07.435
滚动到上面

00:08:07.435 --> 00:08:11.274
这一行和这两列

00:08:11.274 --> 00:08:13.879
这就是我希望图表展示的地方

00:08:13.879 --> 00:08:15.250
我要写一个新的 div

00:08:15.250 --> 00:08:18.649
然后设置 id="plot1"

00:08:18.649 --> 00:08:20.694
然后关闭 div

00:08:20.694 --> 00:08:22.909
写另一个 div

00:08:22.910 --> 00:08:28.270
设置 id="plot2" 然后关闭 div

00:08:28.269 --> 00:08:31.074
让我们看看效果

00:08:31.074 --> 00:08:36.215
好的 我们已经将 CSS Bootstrap 前端与

00:08:36.215 --> 00:08:41.639
使用 Plotly 绘制的 JavaScript 可视化结合到一起了

00:08:41.639 --> 00:08:44.449
在前端方面仍然缺少一个部分

00:08:44.450 --> 00:08:49.410
实际上数据的来源应该是

00:08:49.409 --> 00:08:53.429
CSV 文件或从互联网下载

00:08:53.429 --> 00:08:56.120
但是我们会在稍后的课程介绍

00:08:56.120 --> 00:08:59.414
所以 这基本上就是前端的内容了

00:08:59.414 --> 00:09:04.929
还有一个练习要做 然后就进入后端的工作

