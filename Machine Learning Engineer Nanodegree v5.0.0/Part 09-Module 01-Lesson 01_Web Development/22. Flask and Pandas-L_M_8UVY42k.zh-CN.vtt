WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.984
因为 Flask 是一个 Python 库

00:00:02.984 --> 00:00:06.605
你可以在 Flask 应用中使用任何其他的 Python 库

00:00:06.605 --> 00:00:10.440
这使得 Flask 成为数据科学的绝佳选择 因为你可以在

00:00:10.439 --> 00:00:15.050
Flask 应用中使用数据科学工具 如 Pandas 或 NumPy

00:00:15.050 --> 00:00:20.535
举个例子 我去世界银行网站并下载了数据

00:00:20.535 --> 00:00:26.280
数据是关于过去 50 年左右各国的农村人口比例

00:00:26.280 --> 00:00:29.010
将数据下载为 CSV 文件

00:00:29.010 --> 00:00:34.859
点击下面这里 然后将 CSV 文件上传到 workspace

00:00:34.859 --> 00:00:36.789
我创建了这个 data 文件夹

00:00:36.789 --> 00:00:38.969
然后上传到这里

00:00:38.969 --> 00:00:42.350
如果你之前没有向 workspace 上传过文件

00:00:42.350 --> 00:00:46.039
只需点击这个加号 然后就可以创建新文件、

00:00:46.039 --> 00:00:49.504
创建新文件夹或上传文件、上传文件夹

00:00:49.505 --> 00:00:52.715
查看数据 可以看到数据不太干净

00:00:52.715 --> 00:00:56.815
需要进行一些数据整理

00:00:56.814 --> 00:01:01.564
你可以直接在 routes.py 文件中进行这些整理

00:01:01.564 --> 00:01:06.709
只需要导入你要使用的库 如 Pandas

00:01:06.709 --> 00:01:08.464
这正是我要做的

00:01:08.465 --> 00:01:13.340
然后 复制粘贴我编写的一些整理数据集的代码

00:01:13.340 --> 00:01:17.555
并将数据转换为 Plotly 能够使用的形式

00:01:17.555 --> 00:01:22.615
我会将此代码粘贴到视频下方 方便你能更详细地研究

00:01:22.614 --> 00:01:27.199
不过实际上 代码所做的只是筛选一些特定的国家

00:01:27.200 --> 00:01:32.750
获得 1990 年和 2015 年的数据

00:01:32.750 --> 00:01:34.549
启动应用

00:01:34.549 --> 00:01:37.355
你会发现一切仍然正常

00:01:37.355 --> 00:01:41.015
实际上 我在代码中添加了几个打印语句

00:01:41.015 --> 00:01:45.210
方便你看到我的数据整理结果

00:01:45.209 --> 00:01:49.869
但是现在我的 routes.py 文件看起来有点乱

00:01:49.870 --> 00:01:53.990
我要重构代码 使其更加整洁

00:01:53.989 --> 00:01:57.424
创建一个新文件夹 称其为 wrangling_scripts

00:01:57.424 --> 00:02:01.459
然后在这个文件夹中

00:02:01.459 --> 00:02:08.229
我要创建一个新文件并将其命名为 wrangling.py

00:02:08.229 --> 00:02:10.424
现在就是填充 wrangling.py

00:02:10.425 --> 00:02:11.660
我只需要拿走所有的数据整理代码

00:02:11.659 --> 00:02:18.645
将其从 routes 中剪切并放入 wrangling.py 中

00:02:18.645 --> 00:02:24.620
现在 我需要导入 Pandas 然后把所有这些都放入一个函数中

00:02:24.620 --> 00:02:31.235
该函数的返回值就是这个 data 变量

00:02:31.235 --> 00:02:37.595
好的 现在返回 routes.py 查看 workspace 文件夹

00:02:37.594 --> 00:02:45.615
编写 from wrangling_scripts.wrangling

00:02:45.615 --> 00:02:50.260
导入这个 data_wrangling 函数

00:02:50.259 --> 00:02:53.629
然后 调用此函数并保存结果到 data 变量

00:02:53.629 --> 00:02:57.484
然后打印出结果以便观察

00:02:57.485 --> 00:02:59.715
现在 我要启动应用

00:02:59.715 --> 00:03:03.655
好的 你可以看到一切仍然有效

00:03:03.655 --> 00:03:08.414
只是现在的 routes.py 文件更整洁 更容易理解了

00:03:08.414 --> 00:03:11.659
当然 你可能想要在

00:03:11.659 --> 00:03:16.789
Web 应用之外做好数据整理的工作 然后上传更干净的 CSV 文件

00:03:16.789 --> 00:03:21.564
但是你仍然需要一种方法来加载 CSV 文件 Pandas 就可以完成

00:03:21.564 --> 00:03:23.359
在本课程的下一部分

00:03:23.360 --> 00:03:25.775
我们将添加 Plotly

00:03:25.775 --> 00:03:29.670
将此数据真正呈现为数据可视化

