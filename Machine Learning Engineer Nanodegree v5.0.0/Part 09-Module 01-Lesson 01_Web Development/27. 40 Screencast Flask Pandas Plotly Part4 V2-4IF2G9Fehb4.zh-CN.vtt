WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.754
最后这部分课程

00:00:02.754 --> 00:00:09.214
我们将从这里完成这个仪表板

00:00:09.214 --> 00:00:13.570
如何从这里到这里呢?

00:00:13.570 --> 00:00:19.050
主要区别在于我在这里绘制了多个图表

00:00:19.050 --> 00:00:22.164
所以这些就是 div ids[0]、

00:00:22.164 --> 00:00:26.244
div ids[1]、div ids[2]、div ids[3]

00:00:26.245 --> 00:00:32.700
我只是将它们放入了之前制作的 Bootstrap 前端

00:00:32.700 --> 00:00:35.310
看起来有点吓人

00:00:35.310 --> 00:00:40.125
但实际上只是将已经练习过的所有内容放在一起

00:00:40.125 --> 00:00:42.710
这里是

00:00:42.710 --> 00:00:47.545
我的最终代码 我将带你逐步了解 看看我都做了什么

00:00:47.545 --> 00:00:52.079
index.html 拥有 Bootstrap 的所有前端代码

00:00:52.079 --> 00:00:54.710
所以这可能会觉得有点熟悉

00:00:54.710 --> 00:00:59.134
因为我们已经学过这些内容 并且你使用 Bootstrap 进行了练习

00:00:59.134 --> 00:01:02.059
这里是导入

00:01:02.060 --> 00:01:09.650
所有的 Bootstrap 文件 也为 Plotly 导入了脚本

00:01:09.650 --> 00:01:12.605
plotly 库 然后滚动到下方

00:01:12.605 --> 00:01:15.650
这就是你之前写过的所有 Bootstrap 前端

00:01:15.650 --> 00:01:19.469
比如这里的导航栏

00:01:19.469 --> 00:01:21.719
所有这些代码都是导航栏

00:01:21.719 --> 00:01:26.239
然后这里就是将所有内容划分为行和列

00:01:26.239 --> 00:01:28.158
有 Linkedin 的 Logo

00:01:28.159 --> 00:01:35.930
有 GitHub 的 Logo 滚动向下 这里就是图表开始的地方

00:01:35.930 --> 00:01:37.260
这里没什么新东西

00:01:37.260 --> 00:01:38.765
这是 h2 标签

00:01:38.765 --> 00:01:42.275
这是 h4 标签 继续向下

00:01:42.275 --> 00:01:45.620
这个确实是我们从未在 Bootstrap 中看过的唯一新事物

00:01:45.620 --> 00:01:49.244
这个确实是我们从未在 Bootstrap 中看过的唯一新事物

00:01:49.444 --> 00:01:53.239
我只是在这里放置了一个 id 为第一幅图表的 div

00:01:53.239 --> 00:01:57.519
然后在这里 我放置了 id 为第二幅图表的 div

00:01:57.519 --> 00:02:01.155
id 为第三幅图表的 div

00:02:01.155 --> 00:02:04.474
以及这里 id 为第四幅图表的 div

00:02:04.474 --> 00:02:06.140
然后向下滚动

00:02:06.140 --> 00:02:11.449
这只是我们之前写过的 JavaScript 代码

00:02:11.449 --> 00:02:14.179
遍历这些变量

00:02:14.180 --> 00:02:17.090
把所有东西从后端传到前端

00:02:17.090 --> 00:02:22.250
所以这里唯一的新东西就是添加了这些 div

00:02:22.250 --> 00:02:24.979
和其中的可视化 id

00:02:24.979 --> 00:02:28.655
这就是与本课程前面所作的前端工作的所有不同之处

00:02:28.655 --> 00:02:31.490
这样的改动带来这些结果 很酷吧?

00:02:31.490 --> 00:02:34.280
所以 接下来要讨论的就是

00:02:34.280 --> 00:02:39.185
这些可视化本身 以及我如何在后端编写代码

00:02:39.185 --> 00:02:43.759
我们回到 routes.py

00:02:43.759 --> 00:02:48.949
我重构了很多代码 使 routes.py 变得更加简单

00:02:48.949 --> 00:02:54.019
我所做的都在这个 return_figures 方法中

00:02:54.020 --> 00:02:59.530
该方法来自 wrangling_scripts.wrangle_data 文件

00:02:59.729 --> 00:03:03.829
我实际上做的就是回到那个文件

00:03:03.830 --> 00:03:08.180
将所有数据整理好 以及将所有的 plotly 图表准备好

00:03:08.180 --> 00:03:11.090
所以这些都没有出现在 routes.py 文件中

00:03:11.090 --> 00:03:13.800
这段代码与以前完全相同

00:03:13.800 --> 00:03:18.960
只是遍历这个 figures 列表并创建 ids 变量

00:03:19.159 --> 00:03:24.159
然后将 figures 转换为 JSON 然后将变量传递给前端

00:03:24.159 --> 00:03:28.835
让我花了很长时间的可能令人恐惧的部分

00:03:28.835 --> 00:03:33.925
是数据整理 无论好坏

00:03:33.925 --> 00:03:39.125
数据科学家通常不得不做很多数据整理

00:03:39.125 --> 00:03:43.310
那么我都做了什么呢? 我写了一个函数

00:03:43.310 --> 00:03:46.580
以通用的方式清理 CSV 文件

00:03:46.580 --> 00:03:50.060
因为所有 CSV 文件具有相同的格式 都来自世界银行

00:03:50.060 --> 00:03:54.900
所以我写了这个函数 清理好所有数据

00:03:54.900 --> 00:03:57.439
同样 我将为你提供这些代码 你可以仔细阅读

00:03:57.439 --> 00:04:01.569
可以作为后续练习的示例

00:04:01.569 --> 00:04:07.969
现在到了 return_figures 函数 它的功能就是

00:04:07.969 --> 00:04:09.349
为全部四个可视化设置代码

00:04:09.349 --> 00:04:14.180
其中有很多代码 但如果你一点一点地看

00:04:14.180 --> 00:04:17.540
我认为这是比较好懂的

00:04:17.540 --> 00:04:21.569
类似于上一部分录屏视频中演示的内容

00:04:21.769 --> 00:04:28.094
这里我们有 graph_one 存储所有 graph_one 的信息

00:04:28.095 --> 00:04:30.115
首先清洗数据

00:04:30.115 --> 00:04:32.170
我修改了列名

00:04:32.170 --> 00:04:35.420
做了一些排序 使所有东西在可视化中按需求有序显示

00:04:35.420 --> 00:04:39.329
做了一些排序 使所有东西在可视化中按需求有序显示

00:04:39.529 --> 00:04:41.989
然后这部分展示的与我之前所做的非常相似

00:04:41.990 --> 00:04:44.689
迭代每个国家

00:04:44.689 --> 00:04:50.464
然后将信息追加到 graph_one 可视化中

00:04:50.464 --> 00:04:53.404
这就是所有的代码

00:04:53.404 --> 00:05:00.114
下面是布局 只是针对左侧的这个可视化

00:05:00.115 --> 00:05:03.970
然后对于图 2

00:05:03.970 --> 00:05:10.120
再次清理数据 这次我只想要 2015 年的数据

00:05:10.120 --> 00:05:12.720
所以数据整理稍有不同

00:05:12.720 --> 00:05:14.250
我想绘制一个条形图

00:05:14.449 --> 00:05:21.310
所以在这里我在 x 轴上放置了 country

00:05:21.310 --> 00:05:28.610
然后在 y 轴上放置了对应的值 我使用了 Pandas 和 Python 来完成这些操作

00:05:28.610 --> 00:05:31.230
这是第二个布局

00:05:31.230 --> 00:05:35.814
再次对照 这是右上角的条形图

00:05:35.814 --> 00:05:41.689
向下移动 我们得到了图表 3 的代码

00:05:41.689 --> 00:05:45.425
遍历国家来创建这些内容

00:05:45.425 --> 00:05:50.564
在这个可视化中放置多条折线

00:05:50.564 --> 00:05:55.884
然后是布局 接着是第四个图表 也就是右下角这个

00:05:55.884 --> 00:06:01.795
再次清理数据

00:06:01.795 --> 00:06:07.069
我得将两个数据集合并在一起 也就是第 128 行代码的操作

00:06:07.069 --> 00:06:13.444
然后遍历各个国家并设置可视化

00:06:13.444 --> 00:06:19.610
这个图表的数据整理会多一点 因为涉及多个 CSV 文件

00:06:19.610 --> 00:06:28.389
还需要注意一件事 你可以在每个图表的代码中看到

00:06:28.389 --> 00:06:30.750
都有写 name = country

00:06:30.750 --> 00:06:34.939
这个 country 变量

00:06:34.939 --> 00:06:39.410
一定要使各个国家按照相同的顺序排列

00:06:39.410 --> 00:06:42.574
这样它们就会一直使用相同的颜色

00:06:42.774 --> 00:06:47.810
我每次都使用相同顺序的国家列表

00:06:47.810 --> 00:06:53.439
所以 Plotly 会在所有可视化中自动使用相同的颜色

00:06:53.439 --> 00:06:57.435
继续向下滚动

00:06:57.435 --> 00:07:00.069
好的 准备好这一切之后

00:07:00.069 --> 00:07:04.985
我将每个可视化追加到这个 figures 列表 然后返回

00:07:04.985 --> 00:07:12.240
回到 routes 文件 也就是实际调用 return_figures 函数的地方

00:07:12.240 --> 00:07:15.814
该函数返回了所有图表 准备好了

00:07:15.814 --> 00:07:21.454
这就是我做的工作 确实花了很多时间来做整理并重构代码

00:07:21.454 --> 00:07:28.050
这就是数据科学家工作的一部分

00:07:28.050 --> 00:07:30.449
提醒一下

00:07:30.649 --> 00:07:33.019
课程最后的练习

00:07:33.019 --> 00:07:35.689
制作自己的数据仪表板

00:07:35.689 --> 00:07:38.649
你可以复用我的很多代码

00:07:38.649 --> 00:07:43.159
你真正需要做的就是修改

00:07:43.160 --> 00:07:47.819
index.html 链接到自己的 GitHub 存储库或

00:07:48.019 --> 00:07:52.504
自己的 GitHub 帐户、自己的 Linkedin 帐户

00:07:52.504 --> 00:07:57.750
然后你可能想要添加或删除可视化 这样的话

00:07:57.750 --> 00:08:00.620
你需要向下浏览 确保

00:08:00.620 --> 00:08:05.480
为绘制的每个可视化提供足够的 div

00:08:05.480 --> 00:08:09.920
你需要完成的大部分工作都在 wrangling 文件中

00:08:09.920 --> 00:08:14.189
你得弄清楚如何清理数据使其成为正确的格式

00:08:14.389 --> 00:08:19.389
确保其可用于 Plotly 就是这样啦!

