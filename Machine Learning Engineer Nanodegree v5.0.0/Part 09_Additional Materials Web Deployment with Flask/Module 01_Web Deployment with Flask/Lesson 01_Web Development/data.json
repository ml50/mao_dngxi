{
  "data": {
    "lesson": {
      "id": 598833,
      "key": "3737ebcb-984e-4959-bf2a-95fe13de4916",
      "title": "Web Development",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Develop a data dashboard using Flask, Bootstrap, Plotly and Pandas. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/3737ebcb-984e-4959-bf2a-95fe13de4916/598833/1544197696458/Web+Development+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/3737ebcb-984e-4959-bf2a-95fe13de4916/598833/1544197692003/Web+Development+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 616911,
          "key": "67c82395-fc17-4324-b54c-945ec6c538d9",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "67c82395-fc17-4324-b54c-945ec6c538d9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616915,
              "key": "48204c47-ad1b-4540-a0f2-c4120b1dd7c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction to Web Development",
              "instructor_notes": ""
            },
            {
              "id": 713610,
              "key": "ab81275c-f4cd-45b4-ad76-9bafa81c097b",
              "title": "L4 Intro V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-PGMIIXFCgg",
                "china_cdn_id": "-PGMIIXFCgg.mp4"
              }
            },
            {
              "id": 671844,
              "key": "b84e8a3c-dd0a-46f1-ac59-0a0713fffa1c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why should a data scientist learn web development?\n\nIn this course, you are going to use Flask to build a data dashboard. You might be thinking that you already have good tools for visualizing data such as matplotlib, seaborn, or Tableau.\n\nHowever, the web development skills you'll learn in this lesson will prepare you for building other types of data science applications. Data scientists are increasingly being asked to deploy their work as an application in the cloud.\n\nFor example, consider a project where you build a model that classifies disaster relief messages into categories. With your web development skills, you could turn that model into a web app where you would input a message and display the resulting message category.\n\nAs another example, consider a system that recommends movies based on a user's preferences. Part of the recommendation engine could include a web application that displays recommended products based on a userid. What you learn in this course will set you up for building the web app portion of the recommendation engine.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 616916,
          "key": "9c4c2cda-a65d-40c9-a08e-a78fbae38493",
          "title": "Lesson Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c4c2cda-a65d-40c9-a08e-a78fbae38493",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616917,
              "key": "7d19157e-3261-44e1-97cc-b33fb9eb82b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Overview",
              "instructor_notes": ""
            },
            {
              "id": 713612,
              "key": "bba96698-ada4-41e2-8e26-e508c3ad01b0",
              "title": "L4 Lesson Overview V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9WQF-CCNdJ8",
                "china_cdn_id": "9WQF-CCNdJ8.mp4"
              }
            },
            {
              "id": 671030,
              "key": "54d3fa33-cc81-4d6d-a658-f8b9b0864e61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How to Think about This Lesson\n\nThe lesson first gives an overview of the three base languages for web development: html, css, and JavaScript. You could take an entire course just on each of these languages. The goal is for you to get comfortable writing at least some code in each language so that you understand the web template files at the end of the lesson. This lesson goes through a lot of information to get you up to speed.\n\nTo work with the web template and make a data dashboard, you will only need to write Python code. If you want to customize the dashboard, you can do so with just a few changes to the html code. But the underlying technologies of data dashboard will be css, html, JavaScript, and Python.",
              "instructor_notes": ""
            },
            {
              "id": 619685,
              "key": "756ad6a1-9457-4ca7-8188-d0b96ce445e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Outline\n* Basics of a web app\n * html\n * css\n * javascript \n* Front-end libraries\n * boostrap\n * plotly\n* Back-end libraries\n * flask\n* Deploy a web app to the cloud",
              "instructor_notes": ""
            },
            {
              "id": 668286,
              "key": "acde776d-532b-4ae4-8ac2-55dfd308ee99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Files\n\nAll of the lesson's exercises are contained in classroom workspaces. You'll even deploy a web app from the classroom workspace; however, if you prefer to work locally, you can find the lesson files in this [data scientist nanodegree GitHub repo](https://github.com/udacity/DSND_Term2/tree/master/lessons/WebDevelopment).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 631304,
          "key": "fc2647e0-1470-4c6c-b0c9-1b223835ea1e",
          "title": "The Web",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fc2647e0-1470-4c6c-b0c9-1b223835ea1e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631305,
              "key": "17533c69-3e15-417f-8f9b-8129971ff8a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The World Wide Web",
              "instructor_notes": ""
            },
            {
              "id": 664274,
              "key": "d9fbb00e-db58-41c4-b6d6-a4943b0d0faa",
              "title": "The World Wide Web",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Rxn-zCyg_iA",
                "china_cdn_id": "Rxn-zCyg_iA.mp4"
              }
            }
          ]
        },
        {
          "id": 616919,
          "key": "179d3c90-2497-45f4-a167-e5981708ed6c",
          "title": "Components of a Web App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "179d3c90-2497-45f4-a167-e5981708ed6c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616920,
              "key": "9af3ce20-3538-4419-9360-5e1521d9be08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Components of a Web App",
              "instructor_notes": ""
            },
            {
              "id": 713609,
              "key": "c4e140ff-a93d-4aca-8838-344ed9a0a325",
              "title": "L4 Components Of A Web App V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2aJf5sO2ox4",
                "china_cdn_id": "2aJf5sO2ox4.mp4"
              }
            },
            {
              "id": 616923,
              "key": "7c9327a9-47dc-41bc-b945-94d1340eb7e2",
              "title": "Components of a Web App",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7c9327a9-47dc-41bc-b945-94d1340eb7e2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Front-end or back-end? Match which components belong to the front-end and which components belong to the back-end."
                },
                "concepts_label": "Front-end / Back-end",
                "answers_label": "Component",
                "concepts": [
                  {
                    "text": "content text",
                    "correct_answer": {
                      "id": "a1524698760369",
                      "text": "front-end"
                    }
                  },
                  {
                    "text": "html",
                    "correct_answer": {
                      "id": "a1524698802239",
                      "text": "front-end"
                    }
                  },
                  {
                    "text": "color",
                    "correct_answer": {
                      "id": "a1524698823790",
                      "text": "front-end"
                    }
                  },
                  {
                    "text": "server",
                    "correct_answer": {
                      "id": "a1524698850406",
                      "text": "back-end"
                    }
                  },
                  {
                    "text": "database",
                    "correct_answer": {
                      "id": "a1524698855430",
                      "text": "back-end"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1524698850406",
                    "text": "back-end"
                  },
                  {
                    "id": "a1524698802239",
                    "text": "front-end"
                  },
                  {
                    "id": "a1524698855430",
                    "text": "back-end"
                  },
                  {
                    "id": "a1524698760369",
                    "text": "front-end"
                  },
                  {
                    "id": "a1524698823790",
                    "text": "front-end"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 619687,
          "key": "f7b07f7d-a74e-408e-acf2-80947ce16cbc",
          "title": "The Front-End",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f7b07f7d-a74e-408e-acf2-80947ce16cbc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 619689,
              "key": "eb894e87-21f6-41e3-9111-9382adf8c85f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Front End",
              "instructor_notes": ""
            },
            {
              "id": 693934,
              "key": "0c12001b-23dd-4cbd-ab65-b42655f46d76",
              "title": "The Front End",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CspuxLGFM4U",
                "china_cdn_id": "CspuxLGFM4U.mp4"
              }
            }
          ]
        },
        {
          "id": 619691,
          "key": "fc968cd4-d5a9-4183-b16b-20d10aaf4d94",
          "title": "HTML",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fc968cd4-d5a9-4183-b16b-20d10aaf4d94",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 619692,
              "key": "47224912-6c9b-48ab-a526-b86894d9d755",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction to HTML",
              "instructor_notes": ""
            },
            {
              "id": 713617,
              "key": "f027836d-cbc8-458b-a5b5-70c6be82a5b5",
              "title": "6 Screencast HTML Code V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "G7fBus1JSc0",
                "china_cdn_id": "G7fBus1JSc0.mp4"
              }
            },
            {
              "id": 628650,
              "key": "ec035308-c001-44e5-a4ab-fae220853b68",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# HTML Document Example\n\nHere is an example of HTML code\n\n```\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\t<title>Page Title</title>\n</head>\n\n<body>\n\t<h1>A Photo of a Beautiful Landscape</h1>\n\t<a href=\"https://www.w3schools.com/tags\">HTML tags</a>\n\t<p>Here is the photo</p>\n\t<img src=\"photo.jpg\" alt=\"Country Landscape\">\n</body>\n\n</html>\n```\n\n### Explanation of the HTML document\n As you progress through the lesson, you'll find that the `<head>` tag is mostly for housekeeping like specifying the page title and adding meta tags. Meta tags are in essence information about the page that web crawlers see but users do not. The head tag also contains links to javascript and css files, which you'll see later in the lesson.\n\nThe website content goes in the `<body>` tag.  The body tag can contain headers, paragraphs, images, links, forms, lists, and a handful of other tags. Of particular note in this example are the link tag `<a>` and the image tag `<img>`.\n \nBoth of these tags link to external information outside of the html doc. In the html code above, the link `<a>` tag links to an external website called w3schools. The href is called an attribute, and in this case href specifies the link.\n\nThe image `<img>` tag displays an image called \"photo.jpg\". In this case, the jpg file and the html document are in the same directory, but the documents do not have to be.  The src attribute specifies the path to the image file relative to the html document. The alt tag contains text that gets displaced in case the image cannot be found.",
              "instructor_notes": ""
            },
            {
              "id": 628653,
              "key": "54de9504-0ab1-488d-a229-2f86d4cdb79f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Full List of Tags and How to Use Them\n\nThis is a link to one of the best references for html. Use this website to look up html tags and how to use them. \n [W3Schools HTML Tags](https://www.w3schools.com/tags/default.asp)\n\nIn fact, the [W3Schools website](https://www.w3schools.com) has a lot of free information about web development syntax.\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 630544,
              "key": "4b5daf72-afd6-4462-ba7e-aa7d8a2c96b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Checking your HTML\n\nIt's a good idea to check the validity of your HTML. Here is a website that checks your HTML for syntax errors: [W3C Validator](https://validator.w3.org/#validate_by_input). Try pasting your HTML code here and running the validator. You can read through the error messages and fix your HTML.",
              "instructor_notes": ""
            },
            {
              "id": 653985,
              "key": "526a7bbf-d440-4848-a4a1-06e3f7150964",
              "title": "Tag matching",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "526a7bbf-d440-4848-a4a1-06e3f7150964",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the HTML tag with its purpose."
                },
                "concepts_label": "HTML Tag",
                "answers_label": "Purpose",
                "concepts": [
                  {
                    "text": "`<a>`",
                    "correct_answer": {
                      "id": "a1529448417095",
                      "text": "link"
                    }
                  },
                  {
                    "text": "`<p>`",
                    "correct_answer": {
                      "id": "a1529448472844",
                      "text": "paragraph"
                    }
                  },
                  {
                    "text": "`<ul>`",
                    "correct_answer": {
                      "id": "a1529448478541",
                      "text": "unordered list"
                    }
                  },
                  {
                    "text": "`<img>`",
                    "correct_answer": {
                      "id": "a1529448491141",
                      "text": "images"
                    }
                  },
                  {
                    "text": "`<ol>`",
                    "correct_answer": {
                      "id": "a1529448496683",
                      "text": "ordered list"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1529448545952",
                    "text": "alphabetized list"
                  },
                  {
                    "id": "a1529448491141",
                    "text": "images"
                  },
                  {
                    "id": "a1529448417095",
                    "text": "link"
                  },
                  {
                    "id": "a1529448472844",
                    "text": "paragraph"
                  },
                  {
                    "id": "a1529448478541",
                    "text": "unordered list"
                  },
                  {
                    "id": "a1529448496683",
                    "text": "ordered list"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 619713,
          "key": "9f05965e-5032-4eda-823d-e7460494ffc5",
          "title": "Exercise: HTML",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f05965e-5032-4eda-823d-e7460494ffc5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 619714,
              "key": "4654591a-9ef1-4455-a907-5df7056eae9c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "c7ecf2f2-f1a9-4674-a235-956d23b3b94a",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/1_exercise_html/instructions.md",
                      "/home/workspace/1_exercise_html/index.html"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/1_exercise_html/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 619706,
          "key": "af3f5b9c-fcc9-4c7a-9856-e92c43115742",
          "title": "Div and Span",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "af3f5b9c-fcc9-4c7a-9856-e92c43115742",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 629415,
              "key": "97ecca96-3f56-4545-8d05-6ae06c1a05b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Div and Span",
              "instructor_notes": ""
            },
            {
              "id": 664151,
              "key": "7753642b-f990-4c76-ba5b-5153240d0e56",
              "title": "Div and Span",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cbKA_dvthcY",
                "china_cdn_id": "cbKA_dvthcY.mp4"
              }
            },
            {
              "id": 653986,
              "key": "ca6379c3-fe50-4caa-8080-6ec7d4e59b43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary of Div and Span Elements\n\nYou can use div elements to split off large chunks of html into sections. Span elements, on the other hand, are for small chunks of html. You generally use span elements in the middle of a piece of text in order to apply a specific style to that text. You'll see how this works a bit later in the CSS portion of the lesson.",
              "instructor_notes": ""
            },
            {
              "id": 653987,
              "key": "22904661-613f-4a5e-9357-a0221554f718",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```html\n<div>\n   <p>This is an example of when to use a div elements versus a span element. A span element goes around <span>a small chunk of html</span></p>\n</div>\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 629447,
          "key": "48fd2c46-f923-4a15-b55a-9ccbcd4d5fe9",
          "title": "IDs and Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48fd2c46-f923-4a15-b55a-9ccbcd4d5fe9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 653988,
              "key": "14529e01-43b0-43f8-ba0a-76a5c1a107fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# IDs and Classes",
              "instructor_notes": ""
            },
            {
              "id": 664172,
              "key": "4af69d2a-344c-46bc-802b-74fd6e83d832",
              "title": "IDs and Classes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jnfDqdxDbO4",
                "china_cdn_id": "jnfDqdxDbO4.mp4"
              }
            },
            {
              "id": 653992,
              "key": "def94a56-9d43-4852-a470-e1aa2d79fc0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Example HTML\n```html\n<div id=\"top\">\n    <p class=\"first_paragraph\">First paragraph of the section</p>\n    <p class=\"second_paragraph\">Second paragraph of the section</p>\n</div>\n\n<div id=\"bottom\">\n    <p class=\"first_paragraph\">First paragraph of the section</p>\n    <p class=\"second_paragraph\">Second paragraph of the section</p>\n</div>\n```",
              "instructor_notes": ""
            },
            {
              "id": 653991,
              "key": "5de1e838-84cf-466a-a5d0-237e60ff4300",
              "title": "IDs vs Classes",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5de1e838-84cf-466a-a5d0-237e60ff4300",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Mark all the statements that are true",
                "answers": [
                  {
                    "id": "a1529449658453",
                    "text": "IDs are for marking a specific piece of content",
                    "is_correct": true
                  },
                  {
                    "id": "a1529449756391",
                    "text": "A class should only be used once per page of html",
                    "is_correct": false
                  },
                  {
                    "id": "a1529449756874",
                    "text": "Classes help group multiple pieces of content together in order to add the same styling.",
                    "is_correct": true
                  },
                  {
                    "id": "a1529449757467",
                    "text": "Classes and IDs are the same thing.",
                    "is_correct": false
                  },
                  {
                    "id": "a1529449770379",
                    "text": "You should only use an ID name one time per html page",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 629448,
          "key": "270dd1f5-4210-4542-ae24-0e82b23e0d16",
          "title": "Exercise: HTML Div, Span, IDs, Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "270dd1f5-4210-4542-ae24-0e82b23e0d16",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 629449,
              "key": "27a4228f-986a-4f16-8d72-8355e4ed763f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "6ace9a67-21bc-4303-ade1-392608b50492",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/2_exercise_html/instructions.md",
                      "/home/workspace/2_exercise_html/index.html"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/2_exercise_html/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 629450,
          "key": "64a61e18-bbb9-4bfb-b0e2-ff8e9b378af0",
          "title": "CSS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "64a61e18-bbb9-4bfb-b0e2-ff8e9b378af0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 633367,
              "key": "4834e1df-50d8-4aa5-8e1a-070c70d920b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# CSS",
              "instructor_notes": ""
            },
            {
              "id": 664220,
              "key": "616c5443-8f5c-4a4c-b35b-0c9592db9f38",
              "title": "CSS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s_sdzHR9cs0",
                "china_cdn_id": "s_sdzHR9cs0.mp4"
              }
            },
            {
              "id": 633369,
              "key": "a3c62203-bf15-4129-96d1-865c252c52a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# CSS and this Lesson\n\nTo build the data dashboard at the end of this lesson, you won't need to actually write any CSS. Instead, you'll use libraries that take care of the CSS for you. In this that, that would be the [Bootstrap library](https://getbootstrap.com/).\n\nBut if you are interested in understanding what Bootstrap is doing under the hood, then you need to understand how to style a website with CSS. This page has a summary of some important aspects of CSS programming.",
              "instructor_notes": ""
            },
            {
              "id": 633365,
              "key": "98bedd89-4c4a-4217-afd0-1baaa14418ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is the Purpose of CSS?\n\nIn most professional websites, css is kept in a separate stylesheet. This makes it easier to separate content (html) from style (css). Code becomes easier to read and maintain. \n\nIf you're interested in the history of css and how it came about, here is an interesting link: [history of css](https://www.w3.org/Style/CSS20/history.html).\n\nCSS stands for cascading style sheets. The \"cascading\" refers to how rules trickle down to the various layers of an html tree. For example, you might specify that all paragraphs have the same font type. But then you want to override one of the paragraphs to have a different font type. How does a browser decide which rules apply when there is a conflict? That's based on the cascade over. You can read more about that [here](https://www.lifewire.com/what-does-cascade-mean-3466872).",
              "instructor_notes": ""
            },
            {
              "id": 629515,
              "key": "da60d0b3-822e-4216-b5ec-b4ed0a06cebb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Different ways to write CSS\n\nAs discussed in the video, there are essentially two ways to write CSS: **inline** or with a **stylesheet**.\n\nInline means that you specify the CSS directly inside of an html tag like so:\n``` html\n<p style=\"font-size:20px;\">This is a paragraph</p>\n``` \n\nAlternatively, you can put the CSS in a stylesheet. The stylesheet can go underneath an html head tag like so:\n```html\n...\n<head>\n   <style>\n       p {font-size: 20px;}\n   </style>\n</head>\n```\n\nOr the css can go into its own separate css file (extension .css). Then you can link to the css file within the html head tag like so:\n```html\n<head>\n    <link rel=\"stylesheet\" type\"text/css\" href=\"style.css\">\n</head>\n```\n\nwhere `style.css` is the path to the style.css file. Inside the style.css file would be the style rules such as\n```css\np {\n  color:red;\n}\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 633370,
              "key": "bd46e39d-5060-4ae0-8bf5-405ecd233d79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# CSS Rules and Syntax\n\nCSS is essentially a set of rules that you can use to stylize html. The [W3 Schools CSS Website](https://www.w3schools.com/css/default.asp) is a good place to find all the different rules you can use. These including styling text, links, margins, padding, image, icons and background colors among other options.\n\nThe general syntax is that you:\n1. select the html element, id, and/or class of interest\n2. specify what you want to change about the element\n3. specify a value, followed by a semi-colon\n\nFor example\n```css\na {\n  text-decoration:none;\n}\n```\n\nwhere a is the element of interest, text-decoration is what you want to change, and none is the value. You can write multiple rules within one set of brackets like:\n```css\na {\n  text-decoration:none;\n  color:blue;\n  font-weight:bold;\n}\n```\n\nYou can also select elements by their class or id. \n\nTo select by class name, you use a dot like so:\n```css\n.class_name {\n   color: red;\n}\n```\n\nTo select by id name, you use the pound sign:\n```css\n#id_name {\n  color: red;\n}\n```\n\nYou can make more complex selections as well like \"select paragraphs inside the div with id \"div_top\" . If your html looks like this, \n```html\n<div id=\"div_top\">\n   <p>This is a paragraph</p>\n</div>\n```\n\nthen the CSS would be like this:\n```css\ndiv#div_top p {\n  color: red;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 633371,
              "key": "554cf0c4-82be-4017-98bb-a8e307fc0e00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Margins and Padding\n\nThe difference between margin and padding is a bit tricky. Margin rules specify a spatial buffer on the outside of an element. Padding specifies an internal spatial buffer. \n\nThese examples below show how this works. They use a div element with a border. Here is the div without any margin or padding:\n\n```html\n<div style=\"border:solid red 1px;\">\n    Box\n</div>\n```\n<div style=\"border:solid red 1px;\">\n    Box\n</div>\n\n\n\n#### Margin\n\nIn this case, the div has a margin of 40 pixels. This creates a spatial buffer on the outside of the div element.\n\n```html\n<div style=\"border:solid red 1px;margin:40px;\">\n    Box\n</div>\n```\n<div style=\"border:solid red 1px;margin:40px;\">\n    Box\n</div>\n\n#### Padding\n\nThis next case has a padding of 40px. In the case of padding, the spatial buffer is internal.\n\n```html\n<div style=\"border:solid red 1px;padding:40px;\">\n    Box\n</div>\n```\n<div style=\"border:solid red 1px;padding:40px;\">\n    Box\n</div>\n\n\n#### Margin and Padding\n\nIn this case, the div element has both a margin of 40 pixels and a padding of 40 pixels.\n```html\n<div style=\"border:solid red 1px;margin:40px;padding:40px;\">\n    Box\n</div>\n```\n<div style=\"border:solid red 1px;margin:40px;padding:40px;\">\n    Box\n</div>\n",
              "instructor_notes": ""
            },
            {
              "id": 629568,
              "key": "b92dc916-fa54-41e4-babe-b6a275a44c21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Specifying Size: Pixels versus Percent versus EM Units\n\nIn CSS there are various ways to define sizes, widths, and heights. The three main ones are pixels, percentages, and em units.\n\nWhen you use px, you're defining  the exact number of pixels an element should use in terms of size. So\n```html\n<p style=\"font-size: 12px;\">\n```\nmeans the font-size will be exactly 12 pixels.\n\nThe percent and em units have a similar function. They dynamically change sizing based on a browser's default values. For example\n```html\n<p style=\"font-size: 100%\"> \n```\n\nmeans to use the default browser font size. 150% would be 1.5 times the default font size. 50% would be half. Similarly, 1em unit would be 1 x default_font. So 2em would be 2 x default font, etc. The advantage of using percents and em is that your web pages become dynamic. The document adapts to the default settings of whatever device someone is using be that a desktop, laptop or mobile phone.\n\nAs an aside, percentages and em units are actually calculating sizes relative to parent elements in the html tree. For example, if you specify a font size in a body tag , then the percentages will be relative to the body element:\n```html\n<body style=\"font-size: 20px\">\n    <p style=\"font-size:80%\">This is a paragraph</p>\n...\n</body>\n\n```\n\nBecause different browsers might render html and CSS differently, there isn't necessarily a right or wrong way to specify sizes. This will depend on who will use your website and on what type of devices. You can read more [here](https://www.w3schools.com/html/html_responsive.asp). You won't need to worry about all of this because in the web app, you're going to use a CSS framework that takes care of all of this for you.",
              "instructor_notes": ""
            },
            {
              "id": 629846,
              "key": "455b1de5-fcb5-4484-98e2-79697d1218c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice Writing CSS\n\nIn the next exercise, you'll practice writing CSS.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 629452,
          "key": "8e211a9e-027d-4791-b585-9a6d5945ac47",
          "title": "Exercise: CSS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8e211a9e-027d-4791-b585-9a6d5945ac47",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 629486,
              "key": "37fcf052-904a-4c00-a827-7493d7b133db",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "397c6ab6-2efd-4f1c-9a0d-084c59e290c0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/3_exercise_css/instructions.md",
                      "/home/workspace/3_exercise_css/index.html",
                      "/home/workspace/3_exercise_css/style.css"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/3_exercise_css/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 630042,
          "key": "5d12df30-833b-4c36-9945-b3fd9a39d274",
          "title": "Bootstrap Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5d12df30-833b-4c36-9945-b3fd9a39d274",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 630043,
              "key": "3a868b0a-6808-4124-b753-21e5a545ea7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Bootstrap Library",
              "instructor_notes": ""
            },
            {
              "id": 664256,
              "key": "12d285c7-7e54-420b-81c8-217362677601",
              "title": "Bootstrap Library",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KsrqjguHWUI",
                "china_cdn_id": "KsrqjguHWUI.mp4"
              }
            },
            {
              "id": 633776,
              "key": "36e0a811-0aaa-438f-8ae4-0d094d1654e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Documentation References\n\nHere are some key parts of the Bootstrap documentation for your reference:\n* [Starter Template](https://getbootstrap.com/docs/4.0/getting-started/introduction/#starter-template)\n* [Column Grid Explanation](https://getbootstrap.com/docs/4.0/layout/grid/)\n* [Containers and Responsive Layout](https://getbootstrap.com/docs/4.0/layout/overview/)\n* [Images](https://getbootstrap.com/docs/4.0/content/images/)\n* [Navigation Bars](https://getbootstrap.com/docs/4.0/components/navbar/)\n* [Font Colors](https://getbootstrap.com/docs/4.0/utilities/colors/)",
              "instructor_notes": ""
            },
            {
              "id": 676466,
              "key": "407e32f5-7209-4e53-b1cd-6a548d3a28a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why Bootstrap?\n\nBootstrap is one of the easier front-end frameworks to work with. Bootstrap eliminates the need to write CSS or JavaScript. Instead, you can style your websites with HTML. You'll be able to design sleek, modern looking websites more quickly than if you were coding the CSS and JavaScript directly.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 630115,
          "key": "3be58ff1-04cc-42a1-89e4-d215a8467755",
          "title": "Exercise: Bootstrap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3be58ff1-04cc-42a1-89e4-d215a8467755",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 630148,
              "key": "113fea7b-7fd8-4337-8337-b9db36fe386c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "2c339e85-0df1-4d1d-aeed-5b7b0cde8779",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/5_exercise_bootstrap/instructions.md",
                      "/home/workspace/5_exercise_bootstrap/index.html"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/5_exercise_bootstrap/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 629770,
          "key": "9e6356aa-3dc9-4c58-8819-a51d042feeaa",
          "title": "JavaScript",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e6356aa-3dc9-4c58-8819-a51d042feeaa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 629838,
              "key": "fc3f541d-ce13-4806-b159-bcee9320a367",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Javascript",
              "instructor_notes": ""
            },
            {
              "id": 713619,
              "key": "2014c9fb-9b7d-4bbc-894a-5631ec863d58",
              "title": "14 Screencast JavaScript V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vgXUKgsT_48",
                "china_cdn_id": "vgXUKgsT_48.mp4"
              }
            },
            {
              "id": 629998,
              "key": "9ca59e90-1e27-43bf-b3ed-dad1593b411a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# JavaScript and this Lesson\n\nTo build the data dashboard at the end of this lesson, you won't need to write any JavaScript at all. That's because you'll use libraries ([Bootstrap](https://getbootstrap.com) and [Plotly](https://plot.ly/)) that take care of the JavaScript for you. \n\nYou won't need to get into the details of JavaScript syntax, but it's good to have at least an idea of what is happening under the hood. \n",
              "instructor_notes": ""
            },
            {
              "id": 629840,
              "key": "74baea6e-86b3-4462-bee1-60e4bba91a78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is JavaScript?\n\n- JavaScript is a high level language like Python, PHP, Ruby, and C++. It was specifically developed to make the front-end of a web application more dynamic; however, you can also use javascript to program the back-end of a website with the JavaScript runtime environment [node](https://nodejs.org/en/).\n- Java and javaScript are two completely different languages that happen to have similar names. \n- JavaScript syntax, especially for front-end web development, is a bit tricky. It's much easier to write front-end JavaScript code using a framework such as [jQuery](http://api.jquery.com/).",
              "instructor_notes": ""
            },
            {
              "id": 630008,
              "key": "4463a03f-d22c-4eaf-897a-a90fc2335167",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Basic JavaScript Syntax\n\nHere are a few rules to keep in mind when writing JavaScript:\n- a line of code ends with a semi-colon ;\n- () parenthesis are used when calling a function much like in Python\n- {} curly braces surround large chunks of code or are used when initializing dictionaries\n- [] square brackets are used for accessing values from arrays or dictionaries much like in Python\n\nHere is an example of a JavaScript function that sums the elements of an array.\n\n```javascript\nfunction addValues(x) {\n  var sum_array = 0;\n  for (var i=0; i < x.length; i++) {   \n    sum_array += x[i];\n  }\n  return sum_array;\n}\n\naddValues([3,4,5,6]);\n```",
              "instructor_notes": ""
            },
            {
              "id": 629993,
              "key": "1a3a47bc-cde6-43c3-97be-34c29f85206d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is jQuery?\n\nJquery is a JavaScript library that makes developing the front-end easier. JavaScript specifically helps with manipulating html elements. The reason we are showing you Jquery is because the Bootstrap library you'll be using depends on Jquery. But you won't need to write any Jquery yourself.\n\nHere is a link to the documentation of the core functions in jquery: [jQuery API documentation](https://api.jquery.com/)\n\nJquery came out in 2006. There are newer JavaScript tools out there like [React](https://reactjs.org/) and [Angular](https://angularjs.org/). \n\nAs a data scientist, you probably won't need to use any of these tools. But if you work in a startup environment, you'll most likely hear front-end engineers talking about these tools.",
              "instructor_notes": ""
            },
            {
              "id": 630015,
              "key": "c677bb3b-d5f8-4bd9-ba3f-d4924f60462f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# jQuery Syntax\n\nThe jQuery library simplifies JavaScript quite a bit. Compare the syntax. Compare these two examples from the video for changing the h1 title element when clicking on the image.\n\nThis is pure JavaScript code for changing the words in the h1 title element. \n\n```javascript\n        function headFunction() {\n            document.getElementsByTagName(\"h1\")[0].innerHTML = \n                  \"A Photo of a Breathtaking View\";\n        }\n```\n\nThis code searches the html document for all h1 tags, grabs the first h1 tag in the array of h1 tags, and then changes the html. Note that the above code is only the function. You'd also have to add an onClick action in the image html tag like so:\n\n```html\n<img src=\"image.jpg\" onclick=\"headFunction()\">\n```\n\nThe jQuery code is more intuitive. Once the document has loaded, the following code adds an onclick event to the image. Once the image is clicked, the h1 tag's text is changed. \n\n```javascript\n         $(document).ready(function(){\n            $(\"img\").click(function(){\n                $(\"h1\").text(\"A Photo of a Breathtaking View\");\n            });\n        });\n```\n\nThe dollar sign $ is jQuery syntax that says \"grab this element, class or id\". That part of the syntax should remind you somewhat of CSS. For example $(\"p#first\") means find the paragraph with id=\"first\".  Or $(\"#first\") would work as well.",
              "instructor_notes": ""
            },
            {
              "id": 633446,
              "key": "e9fc241f-bfef-4166-88a6-fe63c80dcbdf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Javascript has something called callback function, which can make learning javascript a bit tricky. Callback functions are essentially functions that can be inputs into other functions. In the above code, there is the ready() function that waits for the html document to load. Then there is another function being passed into the ready function. This section function adds an on-click event to an image tag. Then there's another function passed into the click() function, which changes the h1 text. ",
              "instructor_notes": ""
            },
            {
              "id": 630019,
              "key": "2622018e-057a-4f90-9098-8a11ac531975",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Exercise\n\nIn the next exercise, you'll write a bit of jQuery just so that you can see how it works and what it does. This is the only time in the lesson you'll actually write any JavaScript.",
              "instructor_notes": ""
            },
            {
              "id": 630023,
              "key": "e69f6e5c-0da4-4426-b018-21394a844ecf",
              "title": "JavaScript Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e69f6e5c-0da4-4426-b018-21394a844ecf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the boxes for all statements that are true.",
                "answers": [
                  {
                    "id": "a1527100383476",
                    "text": "JavaScript has many uses including front-end and back-end web development.",
                    "is_correct": true
                  },
                  {
                    "id": "a1527100384040",
                    "text": "Programming in JavaScript is a fundamental skill for a data scientist.",
                    "is_correct": false
                  },
                  {
                    "id": "a1527100384704",
                    "text": "JavaScript is a library built on top of the Java programming language.",
                    "is_correct": false
                  },
                  {
                    "id": "a1527100385222",
                    "text": "There are many JavaScript libraries that make web development easier including jQuery, Bootstrap, React, and Node.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 630024,
          "key": "7b455052-2715-4b28-a9da-d9796abdd663",
          "title": "Exercise: JavaScript",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7b455052-2715-4b28-a9da-d9796abdd663",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 630025,
              "key": "b7395815-2bc8-4edd-b859-1eb0d985e945",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "2baa14ec-9e97-4f31-a4c6-aec8af3ab548",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/4_exercise_jquery/instructions.md",
                      "/home/workspace/4_exercise_jquery/index.html",
                      "/home/workspace/4_exercise_jquery/textchange.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/4_exercise_jquery/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 630592,
          "key": "8a8998d3-d9eb-4d60-a448-7fd3a28e5aa0",
          "title": "Plotly",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a8998d3-d9eb-4d60-a448-7fd3a28e5aa0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 664260,
              "key": "b29a389d-e2db-4ea9-9508-0e33aaee9a84",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Plotly",
              "instructor_notes": ""
            },
            {
              "id": 713620,
              "key": "865135dd-04da-43c7-acf4-802ca94f49f0",
              "title": "18 Screencast Plotly V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QsmOW1jNeio",
                "china_cdn_id": "QsmOW1jNeio.mp4"
              }
            },
            {
              "id": 630596,
              "key": "0b126226-2a51-4ce2-b8e2-2e87b6df5664",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Chart Libraries\n\nThere are many web chart libraries out there for all types of use cases. When choosing a library, you should consider checking whether or not the library is still being actively developed.\n\n[d3.js](https://d3js.org/) is one of the most popular (and complex!) javascript data visualization libraries. This library is still actively being developed, which you can tell because the latest commit to the [d3 GitHub repository](https://github.com/d3/d3) is fairly recent.\n\nOther options include [chart.js](ww.chartjs.org/), [Google Charts](https://developers.google.com/chart/), and [nvd3.js](http://nvd3.org/), which is built on top of d3.js",
              "instructor_notes": ""
            },
            {
              "id": 630600,
              "key": "0fe92c84-afaf-4087-b663-6f4d268c6055",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why Plotly\nFor this lesson, we've chosen [plotly](https://plot.ly/) for a specific reason: Plotly, although a private company, provides open source libraries for both JavaScript and Python. \n\nBecause the web app you're developing will have a Python back-end, you can use the Python library to create your charts. Rather than having you learn more JavaScript syntax, you can use the Python syntax that you already know. However, you haven't built a back-end yet, so for now, you'll see the basics of how Plotly works using the JavaScript library. The syntax between the Python and Javascript versions is similar.\n\nLater in the lesson, you'll switch to the Python version of the Plotly library so that you can prepare visualizations on the back-end of your web app. Yet you could write all the visualization code in JavaScript if you wanted to. Watch the screencast below to learn the basics of how Plotly works, and then continue on to the Plotly exercise.\n\nHere are a few links to some helpful parts of the plotly documentation:\n* [javascript examples](https://plot.ly/javascript/)\n* [getting started](https://plot.ly/javascript/getting-started/)\n* [linking to the plotly library](https://plot.ly/javascript/getting-started/#plotlyjs-cdn)",
              "instructor_notes": ""
            },
            {
              "id": 630601,
              "key": "e2df3ed2-4916-4ef6-aa03-d199804c9466",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction to Plotly\n\nScreencast goes here",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 630626,
          "key": "7e93e6ec-9733-487d-8b3e-86942382b670",
          "title": "Exercise: Plotly",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e93e6ec-9733-487d-8b3e-86942382b670",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 630637,
              "key": "706769a4-b993-4807-ab0b-da386b303c91",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7ecf2f2",
              "pool_id": "webterminal",
              "view_id": "fd3b48f4-a1a5-4932-8f1f-5fd5d512cb84",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/6_exercise_plotly/instructions.md",
                      "/home/workspace/6_exercise_plotly/index.html",
                      "/home/workspace/6_exercise_plotly/javascript_files/plot1.js",
                      "/home/workspace/6_exercise_plotly/javascript_files/plot2.js"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": true,
                    "previewFile": "/home/workspace/6_exercise_plotly/index.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 631247,
          "key": "97750e8d-605f-442c-9bc2-b85049ab8c61",
          "title": "The Backend",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "97750e8d-605f-442c-9bc2-b85049ab8c61",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631251,
              "key": "135e3499-2c89-4654-a40b-91480ba2f82e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Backend",
              "instructor_notes": ""
            },
            {
              "id": 713614,
              "key": "91b182d8-d9ce-4980-a712-851ddcf38781",
              "title": "L4 The Back End V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Esl0NL63S2c",
                "china_cdn_id": "Esl0NL63S2c.mp4"
              }
            },
            {
              "id": 631272,
              "key": "5fc1c0b3-7466-41aa-b624-009cb502858b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this next part of the lesson, you'll build a backend using Flask. Because Flask is written in Python, you can use any Python library in your backend including pandas and scikit-learn.\n\nIn this part of the lesson, you'll practice \n* setting up the backend\n* linking the backend and the frontend together\n* deploying the app to a server so that the app is available from a web address",
              "instructor_notes": ""
            },
            {
              "id": 631277,
              "key": "9cbad65d-84e4-4c70-8490-f49571532dc1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is Flask?\n\n[Flask](http://flask.pocoo.org/). A web framework takes care of all the routing needed to organize a web page so that you don't have to write the code yourself! \n\nWhen you type \"http://www.udacity.com\" into a browser, your computer sends out a request to another computer (ie the server) where the Udacity website is stored. Then the Udacity server sends you the files needed to render the website in your browser. The Udacity computer is called a server because it \"serves\" you the files that you requested.\n\nThe HTTP part of the web address stands for Hypter-text Transfer Protocol. HTTP defines a standard way of sending and receiving messages over the internet.\n\nWhen you hit enter in your browser, your computer says \"get me the files for the web page at www.udacity.com\": except that message is sent to the server with the syntax governed by HTTP. Then the server sends out the files via the protocol as well.\n\nThere needs to be some software on the server that can interpret these HTTP requests and send out the correct files. That's where a web framework like Flask comes into play. A framework abstracts the code for receiving requests as well as interpreting the requests and sending out the correct files.",
              "instructor_notes": ""
            },
            {
              "id": 631278,
              "key": "63b1a675-3356-476f-aab4-0acea09c8bc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Why Flask? \n\n* First and foremost, you'll be working with Flask because it is written in Python. You won't need to learn a new programming language. \n* Flask is also a relatively simple framework, so it's good for making a small web app. \n* Because Flask is written in Python, you can use Flask with any other Python library including pandas, numpy and scikit-learn. In this lesson, you'll be deploying a data dashboard and pandas will help get the data ready.\n\nContinue on to start building the backend.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 631292,
          "key": "a69ea6db-3002-4d89-914f-003781c7bffc",
          "title": "Flask",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a69ea6db-3002-4d89-914f-003781c7bffc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631294,
              "key": "fa071fd2-815c-439e-a6a6-d7a98d8447ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting Started with Flask",
              "instructor_notes": ""
            },
            {
              "id": 713621,
              "key": "74462c7d-c5fe-4f31-bd8e-2a1e3225d8e0",
              "title": "22 Screencast Flask V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "i_U3O-7cymk",
                "china_cdn_id": "i_U3O-7cymk.mp4"
              }
            },
            {
              "id": 632914,
              "key": "56993b61-ec5c-4b5d-bded-5f695cabe7f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using Flask in the Classroom Workspace\n\nIn the next part of the lesson, you'll see a classroom workspace. The classroom workspace already has Flask set up for you. So for now, all you need to do to run the Flask app is to open a Terminal and type. \n```\npython worldbank.py\n``` \n\nThat assumes you are in the default workspace directory within Terminal. That will get the server running.",
              "instructor_notes": ""
            },
            {
              "id": 633970,
              "key": "faa28522-1734-4913-9049-63ec3ed51131",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Seeing your App in the Workspace\n\nOnce the server is running, open a new terminal window and type\n```\nenv | grep WORK\n```\n\nThis command will return the Linux environmental variables that contain information about your classroom workspace. The `env` command will list all the environmental variables. The `|` symbol is a pipe for sending output from one command to another. The `grep` command searches text, so `grep WORK` will search for any text containing the word WORK.\n\nThe command should return two variables:\n```\nWORKSPACEDOMAIN=udacity-student-workspaces.com\nWORKSPACEID=viewc7f3319f2\n```\n\nYour WORKSPACEID variable will be different but the WORKSPACEDOMAIN should be the same. Now, open a new web browser window, and type the following in the address bar:\n```\nhttp://WORKSPACEID-3001.WORKSPACEDOMAIN\n```\n\nIn this example, that would be:\nhttps://viewc7f3319f2-3001.udacity-student-workspaces.com/\n\nDON'T FORGET TO INCLUDE `-3001`. You should be able to see the web app. The number 3001 represents the port for accessing your web app.",
              "instructor_notes": ""
            },
            {
              "id": 634690,
              "key": "19371db4-56ad-4d6b-9636-64e191cb521d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating New Pages\n\nTo create a new web page, you first need to specify the route in the routes.py as well as the name of the html template.\n\n```python\n@app.route('/new-route')\ndef render_the_route():\n    return render_template('new_route.html')\n```\n\nThe route name, function name, and template name do not have to match; however, it's good practice to make them similar so that the code is easier to follow.\n\nThe new_route.html file must go in the templates folder. Flask automatically looks for html files in the templates folder.",
              "instructor_notes": ""
            },
            {
              "id": 671597,
              "key": "c0c356d6-9400-4457-8381-369b0c41f46c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is @app.route?\n\nTo use Flask, you don't necessarily need to know what @app.route is doing. You only have to remember that the path you place inside of @app.route() will be the web address. And then the function you write below @app.route is used to render the correct html template file for the web address.\n\nIn Python, the @ symbol is used for decorators. Decorators are a shorthand way to input a function into another function.  Take a look at this code. Python allows you to use a function as an input to another function:\n```python\ndef decorator(input_function):\n    \n    return input_function\n    \ndef input_function():\n    print(\"I am an input function\")\n    \ndecorator_example = decorator(input_function)\ndecorator_example()\n```\n\nRunning this code will print the string:\n\n*I am an input function*\n\nDecorators provide a short-hand way of getting the same behavior:\n```python\ndef decorator(input_function):\n    print(\"Decorator function\")\n    return input_function\n\n@decorator\ndef input_function():\n    print(\"I am an input function\")\n    \ninput_function()\n```\nThis code will print out:\n\n*Decorator function*<br>\n*I am an input function*\n\nInstead of using a decorator function, you could get the same behavior with the following code:\n```python\ninput_function = decorator(input_function)\ninput_function()\n```\n\nBecause ` @app.route()` has the `.` symbol, there's an implication that app is a class (or an instance of a class) and route is a method of that class. Hence a function written underneath ` @app.route()` is going to get passed into the route method. The purpose of ` @app.route()` is to make sure the correct web address gets associated with the correct html template. This code\n```\n@app.route('/homepage')\ndef some_function()\n  return render_template('index.html')\n```\n\nis ensuring that the web address 'www.website.com/homepage` is associated with the index.html template.\n\nIf you'd like to know more details about decorators and how @app.route() works, check out these tutorials:\n* [how @app.route works](https://ains.co/blog/things-which-arent-magic-flask-part-1.html)\n* [general decorators tutorial](https://realpython.com/primer-on-python-decorators/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 631295,
          "key": "89093161-87f5-455e-b05d-a3824588e30f",
          "title": "Exercise: Flask",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "89093161-87f5-455e-b05d-a3824588e30f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 631301,
              "key": "fc59e83b-c417-4260-8009-8896e2cc2395",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7f399f2",
              "pool_id": "webterminal",
              "view_id": "c7f399f2-ef30-4628-a89a-98a77555396a",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": "3000",
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instruction_files/1_flask_exercise_instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634697,
          "key": "71dbf089-2a5b-4c32-a23d-97c19fc8cfaf",
          "title": "Flask + Pandas",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71dbf089-2a5b-4c32-a23d-97c19fc8cfaf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634698,
              "key": "2d80ec70-9651-4f8e-a7c5-0ecbee517a94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Flask + Pandas",
              "instructor_notes": ""
            },
            {
              "id": 664279,
              "key": "bac0c822-2694-4f0a-b8c3-9460a576972b",
              "title": "Flask and Pandas",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "L_M_8UVY42k",
                "china_cdn_id": "L_M_8UVY42k.mp4"
              }
            },
            {
              "id": 634814,
              "key": "5c6f3043-8094-4da6-9d03-5d7aebf389f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Code from the Screencast\n\nHere is the code from the routes.py file before refactoring.\n\nThe data set comes from this link at the World Bank's data repository: [link to dataset](https://data.worldbank.org/indicator/SP.RUR.TOTL.ZS?view=chart)\n\n```python\nfrom worldbankapp import app\nfrom flask import render_template\nimport pandas as pd\n\ndf = pd.read_csv('data/API_SP.RUR.TOTL.ZS_DS2_en_csv_v2_9948275.csv', skiprows=4)\n\n# Filter for 1990 and 2015, top 10 economies\ndf = df[['Country Name','1990', '2015']]\ncountrylist = ['United States', 'China', 'Japan', 'Germany', 'United Kingdom', 'India', 'France', 'Brazil', 'Italy', 'Canada']\ndf = df[df['Country Name'].isin(countrylist)]\n\n# melt year columns  and convert year to date time\ndf_melt = df.melt(id_vars='Country Name', value_vars = ['1990', '2015'])\ndf_melt.columns = ['country','year', 'variable']\ndf_melt['year'] = df_melt['year'].astype('datetime64[ns]').dt.year\n\n# add column names\ndf_melt.columns = ['country', 'year', 'percentrural']\n\n# prepare data into x, y lists for plotting\ndf_melt.sort_values('percentrural', ascending=False, inplace=True)\n\ndata = []\nfor country in countrylist:\n    x_val = df_melt[df_melt['country'] == country].year.tolist()\n    y_val =  df_melt[df_melt['country'] == country].percentrural.tolist()\n    data.append((country, x_val, y_val))\n    print(country, x_val, y_val)\n    \n@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html')\n    \n@app.route('/project-one')\ndef project_one():\n    return render_template('project_one.html')\n```",
              "instructor_notes": ""
            },
            {
              "id": 634815,
              "key": "24d28441-077b-409b-af3d-c35ddaf26300",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Exercise\n\nThe next exercise will be after the section on using Plotly, Pandas, and Flask together. For now, the next part of the lesson has the refactored code shown in this screencast so that you can explore it in more detail. You'll find it in the 2_flask+pandas_example folder.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634816,
          "key": "15c62712-0bb4-4e49-8d5e-35a9eb18a1a6",
          "title": "Example: Flask + Pandas",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "15c62712-0bb4-4e49-8d5e-35a9eb18a1a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634817,
              "key": "3f5043be-356d-42c6-b7ad-7dd58f8e62b1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7f399f2",
              "pool_id": "webterminal",
              "view_id": "ea03e74c-dfe5-40b9-8f9b-def199bc089b",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": "3000",
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instruction_files/2_flask+pandas_example_instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634818,
          "key": "f794bbe9-3f0f-4cd4-b853-f89344b70835",
          "title": "Flask+Plotly+Pandas Part 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f794bbe9-3f0f-4cd4-b853-f89344b70835",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634819,
              "key": "cd1ecad7-47ce-41d4-b440-ced75a1232f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Flask with Plotly and Pandas Part 1",
              "instructor_notes": ""
            },
            {
              "id": 671532,
              "key": "63a1ffc2-4784-462b-9197-b518721f2f57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this next video, you'll see an example of how to pass data from the back end to the front end of the web app. In the next four parts of this lesson, you'll get a sense for how data and Plotly code can be taken from the back end and, sent to the front end, and then used to render plots on the front end. The goal of these next few videos is to show you how the web template works, which you'll be using later in the final exercise.",
              "instructor_notes": ""
            },
            {
              "id": 664310,
              "key": "3ae9a7f0-fc99-48e4-8a77-ef5372f03d1b",
              "title": "Flask Pandas Plotly Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xg7P8MnItdI",
                "china_cdn_id": "xg7P8MnItdI.mp4"
              }
            },
            {
              "id": 671526,
              "key": "2abf4868-cb60-498f-95fb-a80b242918eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary Part 1\n\nThe purpose of this section is to give you an idea of how the final web app works in terms of passing information back and forth between the back end and front end.  The web template you'll be using at the end of the lesson will already provide the code for sharing information between the back and front ends. Your task will be to wrangle data and set up the plotly visualizations using Python. But it's important to get a sense for how the web app works.\n",
              "instructor_notes": ""
            },
            {
              "id": 664282,
              "key": "0d13ff6e-03e4-4ca4-96bc-5b0548f0e350",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video above, the data set was sent from the back end to the front end. This was accomplished by including a variable in the render_template() function like so:\n```python\n\ndata = data_wrangling()\n\n@app.route('/')\n@app.route('/index')\ndef index():\n   return render_template('index.html', data_set = data)\n```\n\nWhat this code does is to first load the data using the data_wrangling function from wrangling.py. This data gets stored in a variable called data.\n\nIn render_template, that data is sent to the front end via a variable called data_set. Now the data is available to the front_end in the data_set variable.\n\nIn the index.html file, you can access the data_set variable using the following syntax:\n```html\n{{ data_set }}\n```\n\nYou can do this because Flask comes with a template engine called [Jinja](http://jinja.pocoo.org/). Jinja also allows you to put control flow statements in your html using the following syntax:\n```html\n{% for tuple in data_set %}\n  <p>{{tuple}}</p>\n{% end_for %}\n```\n\nThe logic is:\n1. Wrangle data in a file (aka Python module). In this case, the file is called wrangling.py. The wrangling.py has a function that returns the clean data.\n2. Execute this function in routes.py to get the data in routes.py\n3. Pass the data to the front-end (index.html file) using the render_template method.\n4. Inside of index.html, you can access the data variable with the squiggly bracket syntax {{ }}",
              "instructor_notes": ""
            },
            {
              "id": 671535,
              "key": "93a6d110-1756-4638-92f2-96d4157bdfec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Next\n\nIn the next part, you'll see how to create a Plotly visualization on the back end and then send the visualization code to the front end for rendering.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671444,
          "key": "af5562f6-8b1d-43a8-8970-40f3558abc13",
          "title": "Flask+Plotly+Pandas Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "af5562f6-8b1d-43a8-8970-40f3558abc13",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 671447,
              "key": "bbd01f1c-72dd-4e79-991e-34f3638a1616",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Flask with Plotly and Pandas Part 2\n\nIn this section, you'll see how to create a Plotly visualization on the back end and then send the information to the front end for rendering.",
              "instructor_notes": ""
            },
            {
              "id": 713622,
              "key": "cd9b32c8-08f9-46b9-86e6-7b81d7c3350e",
              "title": "40 Screencast Flask Pandas Plotly Part2 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yx-DRzMsblI",
                "china_cdn_id": "yx-DRzMsblI.mp4"
              }
            },
            {
              "id": 671449,
              "key": "a4d214d4-da15-48e7-9f2b-eae85b0d0c95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary Part 2\n\nIn the second part, a Plotly visualization was set up on the back-end inside the routes.py file using Plotly's Python library. The Python plotly code is a dictionary of dictionaries. The Python dictionary is then converted to a JSON format and sent to the front-end via the render_templates method.\n\nSimultaneously a list of ids are created for the plots. This information is also sent to the front-end using the render_template() method. \n\n On the front-end, the ids and visualization code (JSON code) is then used with the Plotly javascript library to render the plots.\n\nIn summary:\n1. Python is used to set up a Plotly visualization\n2. An id is created associated with each visualization\n3. The Python Plotly code is converted to JSON\n4. The ids and JSON are sent to the front end (index.html). \n5. The front end then uses the ids, JSON, and JavaScript Plotly library to render the plots.",
              "instructor_notes": ""
            },
            {
              "id": 671530,
              "key": "6bef4b5c-aecc-4eb5-a55a-7e1a2e26413c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# JavaScript or Python\n\nYou could actually do all of this with only JavaScript. You would read the data, wrangle the data, and then create the plots all using JavaScript; however, to do all of this in JavaScript, you'd need to learn more about JavaScript programming. Instead, you can use the pandas and Python skills you already have to wrangle data on the back-end.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671445,
          "key": "c4ecbd71-b844-4edb-8a26-f69d770db4f4",
          "title": "Flask+Plotly+Pandas Part 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c4ecbd71-b844-4edb-8a26-f69d770db4f4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 671450,
              "key": "a9a3358a-bd85-4eac-91dd-936ad4aa190a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Flask with Plotly and Pandas Part 3\n\nHere, the screencast video shows how to make more complex visualizations in Plotly. This example shows a line chart containing a unique line for each country in the data set.",
              "instructor_notes": ""
            },
            {
              "id": 671451,
              "key": "05191dba-30d3-4a5c-af9f-a0ca0119fe5c",
              "title": "Flask Pandas Plotly Part3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "e8owK5zk-g8",
                "china_cdn_id": "e8owK5zk-g8.mp4"
              }
            },
            {
              "id": 671454,
              "key": "6582eb48-100d-4848-bd34-a0570a3fd506",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary Part 3\n\nIn part 3, the code iterated through the data set to create a visualization with multiple lines: one for each country.\n\nThe original code for a line chart with a single line was:\n```\ngraph_one = [go.Scatter(\n  x = data[0][1],\n  y = data[0][2],\n  mode = 'lines',\n  name = country\n)]\n```\n\nTo make a visualization with multiple lines, graph_one will be a list of line charts. This was accomplished with the following code:\n```\ngraph_one = []\nfor data_tuple in data:\n   graph_one.append(go.Scatter(\n   x = data_tuple[1],\n   y = data_tuple[2],\n   mode = 'lines',\n   name = data_tuple[0]\n))\n```",
              "instructor_notes": ""
            },
            {
              "id": 671542,
              "key": "33ce9f6b-3cc4-40a4-9f37-5080da6f86fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Next\n\nIn the last section of flask, plotly, and pandas, you'll see how to add more visualizations to the data dashboard. Then, you'll see some example code and finally you will practice using flask, plotly, and pandas together.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671446,
          "key": "780f9be7-2d9c-4d45-bcaf-deadf51ec535",
          "title": "Flask+Plotly+Pandas Part 4",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "780f9be7-2d9c-4d45-bcaf-deadf51ec535",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 671455,
              "key": "b8fc637d-49be-479e-8d04-7017b39ca3f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Flask with Plotly and Pandas Part 4\n\nIn this next section, you'll see how to add more visualizations in the back end code and then render those visualizations on the front end.",
              "instructor_notes": ""
            },
            {
              "id": 713623,
              "key": "014200a7-ccac-4400-bf6f-9e60dac406da",
              "title": "40 Screencast Flask Pandas Plotly Part4 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4IF2G9Fehb4",
                "china_cdn_id": "4IF2G9Fehb4.mp4"
              }
            },
            {
              "id": 671457,
              "key": "167776a0-6a9e-4d3d-bec2-4d71734b93db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary Part 4\n\nIn the last part, three more visualizations were added to the wrangling Python module. The wrangling included reading in the data, cleaning the data, and preparing the Plotly code. Each visualization's code was appended to a list called `figures`. These visualizations were then imported into the routes.py file. This figures list was sent from the back end to the front end via the render_template method. A list of ids were also sent from the back end to the front end.\n\nThen on the front end (index.html), a div was created for each visualization's id. And with help from the JavaScript Plotly library, each visualization was rendered inside appropriate div.",
              "instructor_notes": ""
            },
            {
              "id": 671458,
              "key": "d9834302-9e30-4b68-95dd-6dfa37d22324",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Beyond a CSV file\n\nBesides storing data in a local csv file (or text, json, etc.), you could also store the data in a database such as a SQL database.\n\nThe database could be local to your website meaning that the database file is stored on the same server as your website; alternatively, the database could be stored somewhere else like on a separate database server or with a cloud service like Amazon AWS.\n\nUsing a database with your web app goes beyond the scope of this introduction to web development, here are a few resources for using databases with Flask apps:\n* [Tutorial - Using Databases with Flask](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database)\n* [SQL Alchemy](http://docs.sqlalchemy.org/en/latest/)- a Python toolkit for working with SQL\n* [Flask SQLAlchemy](http://flask-sqlalchemy.pocoo.org/2.3/) - a Flask library for using SQLAlchemy with Flask",
              "instructor_notes": ""
            },
            {
              "id": 671459,
              "key": "c208b4f1-2d07-4031-b2da-0282cb6be4c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Next Steps\n\nIn the next part of the lesson, you can look at the code and try running the web app from the classroom. Then in the next exercise, you'll practice adding another visualization to the web app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 637678,
          "key": "e5d61468-0284-4501-bf17-ebb3be654328",
          "title": "Example: Flask + Plotly + Pandas",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e5d61468-0284-4501-bf17-ebb3be654328",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 637679,
              "key": "d7c243a9-70e9-4256-8787-4c74fbf23915",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7f399f2",
              "pool_id": "webterminal",
              "view_id": "c18b6d5e-c4d3-455e-8707-57a380962a37",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": "3000",
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instruction_files/3_flask+plotly+pandas_example_instructions.md"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634821,
          "key": "1df92698-1d49-4799-85ae-fe2819bb1b9a",
          "title": "Exercise: Flask + Plotly + Pandas",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1df92698-1d49-4799-85ae-fe2819bb1b9a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634824,
              "key": "98f0c518-2dd5-4a73-b127-f6e5c3462fef",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7f399f2",
              "pool_id": "webterminal",
              "view_id": "786400dc-9bec-4120-af84-ce751859a68d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": "3000",
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instruction_files/4_flask+plotly+pandas_exercise_instructions.md",
                      "/home/workspace/4_flask+plotly+pandas_exercise/wrangling_scripts/wrangle_data.py",
                      "/home/workspace/4_flask+plotly+pandas_exercise/worldbankapp/templates/index.html"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634172,
          "key": "94d181ca-4e7c-46c5-971c-fbc9d4a59f2b",
          "title": "Deployment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "94d181ca-4e7c-46c5-971c-fbc9d4a59f2b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 640804,
              "key": "a3edc930-cd01-4e39-9e71-8d8119de2990",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Deployment",
              "instructor_notes": ""
            },
            {
              "id": 664333,
              "key": "6d0804a7-5307-4e21-b268-27c09b7253e4",
              "title": "Deployment",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YPfNzpnm_Rk",
                "china_cdn_id": "YPfNzpnm_Rk.mp4"
              }
            },
            {
              "id": 640806,
              "key": "0311a4b5-b505-4198-8f97-bef0d58998cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Other Services Besides Heroku\n\nHeroku is just one option of many for deploying a web app, and Heroku is actually owned by [Salesforce.com](https://www.salesforce.com/).\n\nThe big internet companies offer similar services like [Amazon's Lightsail](https://aws.amazon.com/lightsail/), [Microsoft's Azure](https://azure.microsoft.com/en-us/resources/samples/python-docs-hello-world/), [Google Cloud](https://cloud.google.com/appengine/docs/standard/python/getting-started/python-standard-env), and [IBM Cloud (formerly IBM Bluemix)](https://www.ibm.com/blogs/bluemix/2015/03/simple-hello-world-python-app-using-flask/). However, these services tend to require more configuration. Most of these also come with either a free tier or a limited free tier that expires after a certain amount of time.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 640805,
              "key": "64f5c811-3a6e-43fe-9a53-93a7334d6110",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Instructions Deploying from the Classroom\n\nHere is the code used in the screencast to get the web app running:\n\nFirst, a new folder was created for the web app and all of the web app folders and files were moved into the folder:\n```\nmkdir web_app\nmv -t web_app data worldbankapp wrangling_scripts worldbank.py\n```\n\nThe next step was to create a virtual environment and then activate the environment: \n```\nconda update python\npython3 -m venv worldbankvenv\nsource worldbankenv/bin/activate\n```\n\nThen, pip install the Python libraries needed for the web app\n```\npip install flask pandas plotly gunicorn\n```\n\nThe next step was to install the heroku command line tools:\n```\ncurl https://cli-assets.heroku.com/install-ubuntu.sh | sh\nhttps://devcenter.heroku.com/articles/heroku-cli#standalone-installation\nheroku —-version\n```\n\nAnd then log into heroku with the following command\n```\nheroku login\n```\n\nHeroku asks for your account email address and password, which you type into the terminal and press enter.\n\n\nThe next steps involved some housekeeping:\n- remove `app.run()` from worldbank.py\n- type `cd web_app` into the Terminal so that you are inside the folder with your web app code.\n\nThen create a proc file, which tells Heroku what to do when starting your web app:\n```\ntouch Procfile\n```\nThen open the Procfile and type:\n```\nweb gunicorn worldbank:app\n```\n\nNext, create a requirements file, which lists all of the Python library that your app depends on:\n```\npip freeze > requirements.txt\n```\n\nAnd initialize a git repository and make a commit:\n```\ngit init\ngit add .\ngit commit -m ‘first commit’\n```\n\nNow, create a heroku app:\n```\nheroku create my-app-name\n```\nwhere my-app-name is a unique name that nobody else on Heroku has already used.\n\nThe `heroku create` command should create a git repository on Heroku and a web address for accessing your web app. You can check that a remote repository was added to your git repository with the following terminal command:\n\n```\ngit remote -v\n```\n\nNext, you need to push your git repository to the remote heroku repository with this command:\n```\ngit push heroku master\n```\n\nNow, you can type your web app's address in the browser to see the results.",
              "instructor_notes": ""
            },
            {
              "id": 634182,
              "key": "183193c4-e8c7-4d38-ae73-4eda05013919",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Virtual Environments vs. Anaconda\n\nVirtual environments and Anaconda serve a very similar purpose. Anaconda is a distribution of Python (and the analytics language R) specifically for data science. Anaconda comes installed with a package and environment manager called conda. You can create [separate environments using conda](https://conda.io/docs/user-guide/tasks/manage-environments.html). However, these environments automatically come with Python packages meant for data science.\n\nVirtual environments, on the other hand, come with the Python language but do not pre-install  other packages. \n\nThe classroom workspace has many other Python libraries pre-installed including an installation of [Anaconda](https://www.anaconda.com/distribution/).\n\nWhen installing a web app to a server, you should only include the packages that are necessary for running your web app. Otherwise you'd be installing Python packages that you don't need. \n\nTo ensure that your app only installs necessary packages, you should create a **virtual Python environment**. A virtual Python environment is a separate Python installation on your computer that you can easily remove and won't interfere with your main Python installation.\n\nThere is more than one Python package that can set up virtual environments. In the past, you had to install these packages yourself. With Python 3.6, there is a virtual environment package that comes with the Python installation. The packaged is called [venv](https://docs.python.org/3/library/venv.html#module-venv)\n\nHowever, there is a bug with anaconda's 3.6 Python installation on a Linux system. So in order to use venv in the workspace classroom, you first need to update the Python installation as shown in the instructions above.",
              "instructor_notes": ""
            },
            {
              "id": 634197,
              "key": "f874f49d-210e-4bf5-9ebf-646f659f96b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating a Virtual Environment in the Classroom\n\nOpen a terminal window in a workspace and type:\n```\nconda update python\n```\nWhen asked for confirmation, type y and hit enter. Your Python installation should update.\n\nNext, make sure you are in the folder where you want to build your web app. In the classroom, the workspace folder is fine. But on your personal computer, you'll want to make a new folder. For example:\n```\nmkdir myapp\n```\n\nwill create a new folder called myapp and `cd myapp` will change your current directory so that you are inside the myapp folder.\n\nThen to create a virtual environment type:\n```\npython3 -m venv name\n```\n\nwhere name can be anything you want. You'll see a new folder appear in the workspace with your environment name.\n\nFinally, to activate the virtual environment. Type:\n```\nsource name/bin/activate\n```\n\nYou can tell that your environment is activated because the name will show up in parenthesis on the left side of the terminal.",
              "instructor_notes": ""
            },
            {
              "id": 634198,
              "key": "39fb62ae-72ff-49ad-a47d-0599acd4f937",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Creating a Virtual Environment Locally on Your Computer\n\nYou can develop your app using the classroom workspace. If you decide to develop your app locally on your computer, you should set up a virtual environment there as well. Different versions of Python have different ways of setting up virtual environments. Assuming you are using Python 3.6 and are on a linux or macOS system, then you should be able to set up a virtual environment on your local machine just by typing:\n```\npython3 -m venv name\n```\n\nand then to activate:\n```\nsource name/bin/activate\n```\n\nOn Windows, the command is;\n```\nc:\\>c:\\Python35\\python -m venv c:\\path\\to\\myenv\n```\n\nand to activate:\n```\nC:\\> <venv>\\Scripts\\activate.bat\n```\n\nFor more information, read through this [link](https://docs.python.org/3/tutorial/venv.html).",
              "instructor_notes": ""
            },
            {
              "id": 729053,
              "key": "e79cb7c1-67ec-41ff-a0d6-d8e95e9c11a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Databases for Your App\n\nThe web app in this lesson does not need a database. All of the data is stored in CSV files; however, it is possible to include a database as part of a Flask app. One common use case would be to store user login information such as username and password. \n\nFlask is database agnostic meaning Flask can work with a number of different database types. If you are interested in learning about how to include a database as part of a Flask app, here are some resources:\n* [Flask Mega Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database)\n* [Heroku - Provision a Database](https://devcenter.heroku.com/articles/getting-started-with-python#provision-a-database)",
              "instructor_notes": ""
            },
            {
              "id": 653962,
              "key": "8c62196d-d3b9-44a4-ac3c-57e03ee853b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Deployment\n\nIn the next part of the lesson, you'll find a workspace where you can practice deploying the world bank web app. Set up an account on [Heroku](www.heroku.com) and then follow the instructions shown in this part of the lesson. \n\nYou'll need to use a different name for the web app since the one used in this lesson is already taken.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 653963,
          "key": "4965d1ce-fbfb-4c44-8515-de4c5cf55ab2",
          "title": "Exercise: Deployment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4965d1ce-fbfb-4c44-8515-de4c5cf55ab2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 662692,
              "key": "b3870385-383b-477e-90aa-6345f54f765a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc7f399f2",
              "pool_id": "webterminal",
              "view_id": "8cea1253-7d66-4186-9e4e-a8013a90e5dc",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": "3000",
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/instruction_files/5_deploy_instructions"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 653964,
          "key": "3d4796fa-270c-420d-bfbc-c0708a7c3ba6",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d4796fa-270c-420d-bfbc-c0708a7c3ba6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 693939,
              "key": "811891b6-29e4-494c-88df-8f0790ca248f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 713613,
              "key": "b8014bc8-c5c9-4379-b52c-7914a21499ad",
              "title": "L4 Outro V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8MyuJx5yu38",
                "china_cdn_id": "8MyuJx5yu38.mp4"
              }
            },
            {
              "id": 653965,
              "key": "fe9b8f34-7601-42b1-9cda-b58f06554b55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Portfolio Exercise\n\nIn the next section of the classroom, you'll find a portfolio exercise based on this web development lesson. Continue to the next section to get started.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}