{
  "data": {
    "lesson": {
      "id": 598836,
      "key": "0ab3fb81-bc3a-49d9-9b6e-143230fba213",
      "title": "Portfolio Exercise: Deploy a Data Dashboard",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Customize the data dashboard from the previous lesson to make it your own. Upload the dashboard to the web.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/0ab3fb81-bc3a-49d9-9b6e-143230fba213/598836/1544196737136/Portfolio+Exercise%3A+Deploy+a+Data+Dashboard+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/0ab3fb81-bc3a-49d9-9b6e-143230fba213/598836/1544196734684/Portfolio+Exercise%3A+Deploy+a+Data+Dashboard+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 631255,
          "key": "54371ab9-01c8-475a-8b3d-f72737a0bdb2",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54371ab9-01c8-475a-8b3d-f72737a0bdb2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 653730,
              "key": "59be23dd-7c22-4db5-9dab-81e5ed3fe1dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Portfolio Exercise: Deploy a Data Dashboard\n\nPersonal portfolios are an excellent way to demonstrate your knowledge and creativity. In fact, they are little by little becoming a must-have for people working in the tech industry. In this portfolio building exercise, you will create a data dashboard using Bootstrap, Plotly, Flask and Heroku. \n\n**Note that a portfolio exercise like this is not reviewed. So you will not submit your work on this, and you do not need to complete this assignment in order to graduate.**\n\nYour main job will be to write Python code that reads in data, cleans the data, and then uses the data to make Plotly visualizations. This is your opportunity to show off your Python coding ability and visualization encoding skills.\n\nIn the next part of the lesson, you'll find a workspace where you can develop the web app. Note that there is also an optional advanced version of the project where you're encouraged to pull data from an API. You'll see in this lesson that there are a few sections with \"[advanced version]\" in the title. If you'd like to do the advanced version, then you'll want to go through this entire lesson before starting to develop your app.",
              "instructor_notes": ""
            },
            {
              "id": 653795,
              "key": "96416aa5-c97c-4842-aa37-d2be2cf40dbf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# General Instructions\n\nDevelop and deploy a data dashboard. The Web Development lesson has all of the information you need. If you are new to web development, you might have to go back to the concepts and rewatch some of the videos. The \"deployment\" parts of the lesson should be especially helpful. The video in that part of the lesson shows how to deploy a web app to Heroku. And the associated exercise has a complete, functioning web app with visualizations.\n\n Most of the work will involve:\n1. Wrangling your chosen data set to get the data in the format you want\n2. Writing Python code to read in the data set and set up Plotly plots\n3. Tweaking HTML so that the website has the design and information that you want.\n\nWe are providing a template that uses the [Bootstrap library](https://getbootstrap.com/) and [Flask framework](http://flask.pocoo.org/). The template is the same one used to build the app in the course except the name of the app has been changed. In the template, everything has the generic name \"myapp\" instead of \"worldbankapp\". The template is set up so that you can use pandas for loading the data and Python to create the dictionaries needed for plotly.\n\nYou'll only need to modify the following files:\n* wrangle_data.py\n* index.html\n\nAlthough the front-end is already set up for you, you should change the links and titles in index.html. If you want to add more visualizations or remove visualizations, you'll need to adjust the front-end code in index.html accordingly. That will involve adding or removing rows and columns in the HTML file.\n\nFor deployment, you can use a back-end service like [Heroku](https://heroku.com). ",
              "instructor_notes": ""
            },
            {
              "id": 676462,
              "key": "24e59527-5cfe-4440-bebe-3aaa392d8d74",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How to Build the App\n\nYou'll find a workspace in the next part of the lesson. The workspace already contains the template code with a working web app. The web app has a back-end and front-end. Recall that you can run the web app from the workspace:\n\nTo run the app from the workspace, open a terminal and type `env | grep WORK`. Note the WORKSPACEDOMAIN and WORKSPACEID. To start the web app, type `python myapp.py`.\n\nYou can open a new browser window and go to the address:\n`http://WORKSPACESPACEID-3001.WORKSPACEDOMAIN` replacing WORKSPACEID and WORKSPACEDOMAIN with your values.\n\nHowever, there is no data for the visualizations. You'll need to write a Python script that reads in the data files of your choosing and sets up the plots for Plotly. The process will be exactly the same as the one presented in the web development course.\n\n** If you need to upload any files to the workspace, you can do so by clicking on the plus (+) sign and choosing \"add file\" or \"add folder\".**\n\nThe template code is also available on GitHub as part of the [data scientist nanodegree term 2 repo](https://github.com/udacity/DSND_Term2/tree/master/lessons/WebDevelopment).\n\nTest your app in the workspace to make sure that everything is working. You'll see that if you start the app without modifying any of the code, the app currently works.\n\nYou should also save your work to a [GitHub](https://github.com/) or [GitLab](https://about.gitlab.com/) repository so that you can use your code as part of your professional portfolio.\n\nOnce you're ready to deploy the app, don't forget to remove the `app.run()` line of code in the myapp.py file (In the web development lesson, myapp.py was called worldbank.py). You'll need to add a Procfile and requirements.txt file as well. Follow the instructions in the web development lesson to learn how to deploy the app from the classroom. And always comment your code :-)!\n\nAlso, at the end of this page you're reading, you'll find information about a more advanced version of the data dashboard that you can build.",
              "instructor_notes": ""
            },
            {
              "id": 662874,
              "key": "61441cd5-723e-4003-b2da-f802eae4ad2c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Steps\nHere is a reminder of the steps you'll need to do:\n- find a data set or a few data sets that you're interested in\n- explore and clean the data set\n- put the data into a csv file or files - you can use pandas or spreadsheet software to do this\n- upload your data sets to the correct folder\n- write a Python script to read in the data set and set up the Plotly visualizations\n- set up a virtual environment and install the necessary libraries to run your app\n- run your web app locally to make sure that everything works\n- deploy the app to Heroku or some other back-end service",
              "instructor_notes": ""
            },
            {
              "id": 653895,
              "key": "a0f3fe87-56e8-447a-bf24-899c475e77d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Where to Build the Web App\n\nWe are providing a workspace containing a web app template. You can use this template to build and deploy your web app within the classroom. \n\nThe classroom has an Ubuntu Linux environment. Developing the app locally on macOS should be very similar. On a Windows machine, the commands are slightly different and you'll need to use the command prompt. This link contains a [comparison of MS-DOS vs Linux commands](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Step_by_Step_Guide/ap-doslinux.html).  \n\nTo install the Heroku command line interface on a Windows machine, follow the instructions [here](https://devcenter.heroku.com/articles/heroku-cli) on the Heroku website.",
              "instructor_notes": ""
            },
            {
              "id": 653896,
              "key": "4bbeeea3-0da9-4824-bd77-f333441c8ae5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Advanced Version of the Exercise\n\nIf you'd like an extra challenge, consider using an API to obtain your data. API stands for *Application Programming Interface*. An API provides a convenient way for two applications to communicate with each other. To be more concrete you can pull data directly from the World Bank API, clean the data in the back-end using pandas, and then display the results on your front-end. This would be instead of using a csv file for your data. \n\nThe benefit is that if the data ever changes, your web app will automatically have the correct data. Many companies provide APIs for accessing their data including Facebook, Twitter, Google among others. As an example, here is an API for pulling data about [DVDs, movies, books, and games](http://developer.rovicorp.com/docs).\n\nAfter the workspace, you'll find a set of concepts that explain how to use the World Bank API. Go through that material if you'd like an extra challenge for building your web app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 653910,
          "key": "98528a28-0e40-4c61-818e-2381f7caa4a0",
          "title": "Workspace Portfolio Exercise",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "98528a28-0e40-4c61-818e-2381f7caa4a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 653917,
              "key": "2dda915b-1ee5-4f49-b80c-b27b619ca3f9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb16f56dd",
              "pool_id": "webterminal",
              "view_id": "b16f56dd-e366-4f2b-9f06-206e1070fdfc",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [
                      3001
                    ],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 676463,
          "key": "1872a57f-10a2-4434-aa0c-4feb025c076a",
          "title": "Troubleshooting Possible Errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1872a57f-10a2-4434-aa0c-4feb025c076a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676464,
              "key": "09fe8248-58ae-4252-a36f-a78544e701c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Here are a few issues that students have run into:\n* remember to remove the  the line `app.run(host='0.0.0.0', port=3001, debug=True)` in the myapp.py file before deploying to Heroku; however, to run the web app from within the Udacity workspace, you do need that line of code\n* In the web development lesson, the Flask application file was called worldbank.py. In the template code, the same file is called myapp.py. So the Procfile should contain the line `web gunicorn myapp:app`.\n* The template files can be deployed to Heroku. In other words, the template files already contain a working, deployable web app. If you're having trouble deploying your app to Heroku, try deploying the template files first. That should help with debugging because then you will know if an issue relates to how you are interacting with Heroku, or if there's a bug in your code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 662876,
          "key": "a3049fb2-4376-46dd-9523-9f3d27013450",
          "title": "Congratulations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a3049fb2-4376-46dd-9523-9f3d27013450",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 713521,
              "key": "75ae6ad3-9a6c-4ec0-a35b-699c4ca59835",
              "title": "L5 Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rW1YP1aSb08",
                "china_cdn_id": "rW1YP1aSb08.mp4"
              }
            },
            {
              "id": 662877,
              "key": "5d76d3d5-16d1-46be-847d-d5f422e58447",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Congratulations\n\nCongratulations on finishing the course on software development for data scientists. You'll see that there are still a few concepts left in this Portfolio Exercise marked as [advanced version]. Those concepts are for a more advanced version of the web application that includes a form and gets data from the World Bank API. The information contained there is completely optional.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 662878,
          "key": "3ea11704-662c-4ed2-912f-d2cddf2d0942",
          "title": "APIs [advanced version]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3ea11704-662c-4ed2-912f-d2cddf2d0942",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 665151,
              "key": "e73b301f-644a-4009-bd74-13f83e8a4710",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is an API?\n\nInstead of downloading World Bank data via a csv file, you're going to download the data using the World Bank API.\n\nAPI is an acronym that stands for application programming interface. API’s provide a standardized way for two applications to talk to each other. For this project, the applications communicating with each other are the server application where World Bank stores data and your web application.\n\nIf you wanted to pull data directly from the World Bank’s server, you’d have to know what database system the World Bank was using. You’d also need permission to log in directly to the server, which would be a security risk for the World Bank. And if the World Bank ever migrated its data to a new system, you would have to rewrite all of your code again.\n\nThe API sits between your web app and the World Bank server. And the API allows you to execute code on the World Bank server without getting direct access.\n\nAll sorts of companies have public facing APIs including Facebook, Twitter, Google and Pinterest. You can pull data from these companies to create your own applications.\n\nIn the next section, you’ll get practice using Python to pull data from the World Bank API. This will set you up for creating the web app with data from the API instead of using data from a csv file.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 662975,
              "key": "3e59dc88-ecfd-4c53-a067-118129c54527",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# APIs Besides the World Bank\n\nAll types of companies have APIs. Some of these APIs are only for internal company use while other APIs help the public consume data. A few examples of public APIs include the [Twitter API](https://developer.twitter.com/en/docs.html), the [Google Maps API](https://cloud.google.com/maps-platform/), the [Facebook Graph API](https://developers.facebook.com/docs/graph-api), and the [US Government Data APIs](https://www.data.gov/developers/apis).\n\nIn addition, oftentimes you can find open source libraries or development kits for connecting to an API. For example, here is an open source Python development kit for the [Facebook Graph API](https://github.com/mobolic/facebook-sdk).\n\nSome APIs might be used for pulling data from a database. But other APIs are for adding data to a database. For example, you might make an application that automatically tweets the current weather. In that case, you would use the Twitter API to post a tweet, which in reality inserts a tweet into Twitter's database.",
              "instructor_notes": ""
            },
            {
              "id": 662976,
              "key": "a53607bc-93c6-4047-89d6-5e9bbd9bb75c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using an API\n\nIn the next few parts of the lesson, you'll see how to use the World Bank API. This API is relatively straightforward to use. Each API, however, will have a different set up and only allow you to take certain actions. In general, you send a request via a web url that specifies the information you want. You receive data back typically in [XML](https://www.w3schools.com/xml/xml_whatis.asp) or [JSON](https://www.w3schools.com/js/js_json_intro.asp). \n\nThe XML standard was developed in the 1970s and 1980s and soon became a common way to transfer data over the web. JSON was developed in the mid 1990s. Over time, [JSON has increased in popularity relative to XML](https://www.programmableweb.com/news/jsons-eight-year-convergence-xml/2013/12/26) perhaps because JSON is easier to parse.\n\nSome APIs require authentication; essentially the company with the API gives you 'credentials' so that they can track how you are using the API and ensure you have the proper permissions.\n\nSome APIs might let you extract data from a database. Other APIs might even let you insert data into a database depending on the use case. Most APIs include extensive documentation so that you can figure out how to use APIs.\n\nIf you ever can’t figure out how to use an API, search online for examples. You can search for something like, “Examples for using the World Bank API” or “Examples for using the Facebook API”.\n\nMove on to the next section to see how to use the World Bank API and incorporate it into a web app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663003,
          "key": "9ae2bf5c-3869-4691-a8a2-6fbb0960e4e6",
          "title": "World Bank API [advanced version]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ae2bf5c-3869-4691-a8a2-6fbb0960e4e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 665173,
              "key": "bb2f81f7-5393-4a13-9300-65a2bd31c20c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The World Bank API",
              "instructor_notes": ""
            },
            {
              "id": 713624,
              "key": "ba86affc-ebfb-41bf-b742-cb71abab952f",
              "title": "44   Accessing The API Through Web Address  SC 44  V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nygWkgUQNfo",
                "china_cdn_id": "nygWkgUQNfo.mp4"
              }
            },
            {
              "id": 665174,
              "key": "e6e744eb-2590-4351-ac34-fd53a5b669e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# REST Architecture\n\nREST is a software architecture for the web. You don't need to understand how REST works in order to use an API. but you will see the term used quite frequently when working with APIs. Modern web APIs are often called RESTFul to indicate that they conform to a REST Architecture. \n\n* [REST API Tutorial](https://restfulapi.net/)\n* [Wikipedia Article on REST](https://en.wikipedia.org/wiki/Representational_state_transfer)",
              "instructor_notes": ""
            },
            {
              "id": 665175,
              "key": "33c27fac-ccec-4fcd-80e6-f726674c117c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# World Bank API\n\nHere is the website where the csv files were downloaded for the World Bank web app: [World Bank Indicator Data](https://data.worldbank.org/indicator?tab=featured)\n\nAnd here is the link to the World Bank API documenation: [World Bank API Documentation](https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-api-documentation)\n\nOne tricky aspect of working with the World Bank API is that it only gives back 50 results at a time. There is an option called per_page that allows you to return up to 1000 results. However, some queries might have more than 1000 results. That's where the `page` option comes into play. You'll notice that at the very beginning of the data, there is a variable called `page` and another one called `pages`. If page=1 and pages=4, then you'd need to write 4 queries with the option page=1, page=2, page=3 and page=4.\n\nNext, you'll practice pulling data from the API using Python code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 665176,
          "key": "9d5a60ac-41ad-4418-9471-cad6cb4bc8ac",
          "title": "Python and APIs [advanced version]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9d5a60ac-41ad-4418-9471-cad6cb4bc8ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 665177,
              "key": "1150ac74-80eb-4779-94f0-c55d1b43b0af",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewc61eb76c",
              "pool_id": "jupyter",
              "view_id": "c61eb76c-d0b6-46db-a7b3-aad615f88430",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/world_bank_api.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 665292,
          "key": "17fd04c4-0d3a-45a8-b68b-f81ca7dd8bde",
          "title": "World Bank Data Dashboard [advanced version]",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17fd04c4-0d3a-45a8-b68b-f81ca7dd8bde",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 667019,
              "key": "aaaeefce-7594-4e50-b7ea-b3180c89edc9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Code Walk-Through",
              "instructor_notes": ""
            },
            {
              "id": 668280,
              "key": "7618a37d-5412-4787-b13a-753bb7646bbc",
              "title": "Advanced API Code Walk-through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AkqO534YooE",
                "china_cdn_id": "AkqO534YooE.mp4"
              }
            },
            {
              "id": 708662,
              "key": "a01a47df-52b2-49b0-8f1d-4b0ba0d7f2d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Link to the Code\n\nYou can find code for this data dashboard here on [GitHub](https://github.com/udacity/DSND_Term2/tree/master/lessons/WebDevelopment/AdvancedDataDashboardCode/world_bank_api_dashboard).",
              "instructor_notes": ""
            },
            {
              "id": 667596,
              "key": "d2c0be65-7ac5-4d36-bceb-cd6bbae892ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How the Filter Works\n\nThis version of the web app has a filter made with a form. When you check the boxes on the form and click submit, the form gets submitted to the index.html page. It's essentially a circle where the index.html loads, the form gets submitted to index.html itself, and then index.html loads again. With a web form, you could also submit the form to a different web page.\n\nOn the back-end, routes.py can access the information that was submitted with the web form; the front-end receives information about which boxes were checked. ",
              "instructor_notes": ""
            },
            {
              "id": 671813,
              "key": "c4a0b4dc-9a79-47e6-ac42-ac777c885745",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Code your Project\n\nStart working on your project! Go back to the \"Workspace Portfolio Exercise\" with the template code. You'll find it earlier in this Portfolio Exercise lesson. Here are a few APIs that you might find interesting to work with:\n* [World Bank API](https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview)\n* [API for Entertainment Industry Data](http://developer.rovicorp.com/docs)\n* [City of Berlin Open Data API](https://daten.berlin.de/datensaetze/deutsche-digitale-bibliothek-ddb-api)\n\nMany government and city agencies have APIs where you can access city data.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}