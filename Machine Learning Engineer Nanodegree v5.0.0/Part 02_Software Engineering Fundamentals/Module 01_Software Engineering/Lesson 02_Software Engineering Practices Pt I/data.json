{
  "data": {
    "lesson": {
      "id": 598832,
      "key": "ac47b924-72d3-4bf9-971c-bfccfa368b02",
      "title": "Software Engineering Practices Pt I",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn software engineering practices and how they apply in data science. Part one covers clean and modular code, code efficiency, refactoring, documentation, and version control.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ac47b924-72d3-4bf9-971c-bfccfa368b02/598832/1544197974453/Software+Engineering+Practices+Pt+I+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ac47b924-72d3-4bf9-971c-bfccfa368b02/598832/1544197970079/Software+Engineering+Practices+Pt+I+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 634056,
          "key": "1a213ee1-43e8-4613-b3eb-ac73daa38ab2",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a213ee1-43e8-4613-b3eb-ac73daa38ab2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682636,
              "key": "e929e09b-cb32-4a2f-9872-155d946672e9",
              "title": "L2 01 Intro V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "z7v7oa--W48",
                "china_cdn_id": "z7v7oa--W48.mp4"
              }
            },
            {
              "id": 644835,
              "key": "f6fe27fb-ed9a-410d-82f4-e93dd7bb1404",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome to Software Engineering Practices Part I\nIn this lesson, you'll learn about the following practices of software engineering and how they apply in data science.\n- Writing clean and modular code\n- Writing efficient code\n- Code refactoring\n- Adding meaningful documentation\n- Using version control\n\nIn the lesson following this one (Part II) you'll also learn these software engineering practices:\n- Testing\n- Logging\n- Code reviews",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 645320,
          "key": "ca9168f7-0405-41f8-b392-db1e77201880",
          "title": "Clean and Modular Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ca9168f7-0405-41f8-b392-db1e77201880",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703588,
              "key": "2decebeb-3a42-414b-819d-7d8266289343",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Clean and Modular Code",
              "instructor_notes": ""
            },
            {
              "id": 682637,
              "key": "498d2b83-bfbd-444c-ace1-8504af62398a",
              "title": "L2 02 Clean   Mod Code Vid 1 V1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RjHV8kRpVbA",
                "china_cdn_id": "RjHV8kRpVbA.mp4"
              }
            },
            {
              "id": 673435,
              "key": "b2a0d2b5-c347-49c5-b911-4560e9ef9db2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "- **PRODUCTION CODE:** software running on production servers to handle live users and data of the intended audience. Note this is different from *production quality code*, which describes code that meets expectations in reliability, efficiency, etc., for production. Ideally, all code in production meets these expectations, but this is not always the case.\n- **CLEAN:** readable, simple, and concise. A characteristic of production quality code that is crucial for collaboration and maintainability in software development.\n- **MODULAR:** logically broken up into functions and modules. Also an important characteristic of production quality code that makes your code more organized, efficient, and reusable.\n- **MODULE:** a file. Modules allow code to be reused by encapsulating them into files that can be imported into other files.",
              "instructor_notes": ""
            },
            {
              "id": 645323,
              "key": "5cce9748-a85c-42f2-b18e-0f428d67aa43",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5cce9748-a85c-42f2-b18e-0f428d67aa43",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following describes code that is CLEAN?",
                "answers": [
                  {
                    "id": "a1528759869203",
                    "text": "Repetitive",
                    "is_correct": false
                  },
                  {
                    "id": "a1528759906182",
                    "text": "Simple",
                    "is_correct": true
                  },
                  {
                    "id": "a1528759907086",
                    "text": "Readable",
                    "is_correct": true
                  },
                  {
                    "id": "a1528760080125",
                    "text": "Vague",
                    "is_correct": false
                  },
                  {
                    "id": "a1528760121731",
                    "text": "Concise",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 663131,
              "key": "bae07c09-84f3-4933-8bd5-b17009c01d31",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bae07c09-84f3-4933-8bd5-b17009c01d31",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Making your code MODULAR makes it easier to",
                "answers": [
                  {
                    "id": "a1529580391843",
                    "text": "Reuse your code",
                    "is_correct": true
                  },
                  {
                    "id": "a1529580410645",
                    "text": "Write less code",
                    "is_correct": true
                  },
                  {
                    "id": "a1529580414240",
                    "text": "Read your code",
                    "is_correct": true
                  },
                  {
                    "id": "a1529580455758",
                    "text": "Collaborate on code",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 634062,
          "key": "f4d21e7d-48fe-4170-8e03-8ee3a26a899e",
          "title": "Refactoring Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f4d21e7d-48fe-4170-8e03-8ee3a26a899e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682638,
              "key": "a2215b99-dc90-4d59-beaf-75be138486fd",
              "title": "L2 03 Clean   Mod Code Vid 2 V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9bxtHpPvXE0",
                "china_cdn_id": "9bxtHpPvXE0.mp4"
              }
            },
            {
              "id": 634119,
              "key": "a1fb75b1-40ac-4b4d-af70-5107856ef67e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Refactoring Code\n\n- **REFACTORING:** restructuring your code to improve its internal structure, without changing its external functionality. This gives you a chance to clean and modularize your program after you've got it working.\n- Since it isn't easy to write your best code while you're still trying to just get it working, allocating time to do this is essential to producing high quality code. Despite the initial time and effort required, this really pays off by speeding up your development time in the long run.\n- You become a much stronger programmer when you're constantly looking to improve your code. The more you refactor, the easier it will be to structure and write good code the first time.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634063,
          "key": "6a50f0f7-42ed-4c42-8b75-1f6a0693a4fb",
          "title": "Writing Clean Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a50f0f7-42ed-4c42-8b75-1f6a0693a4fb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714409,
              "key": "5a86b698-ca7f-4701-8eb5-6fee20c10b4b",
              "title": "01 Writing Clean Code V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wNaiahWCwkQ",
                "china_cdn_id": "wNaiahWCwkQ.mp4"
              }
            },
            {
              "id": 663190,
              "key": "f6fdc65c-72fd-44b5-80e5-64b23b673cba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Writing Clean Code: Meaningful Names\n\n> #### Tip: Use meaningful names\n- **Be descriptive and imply type** - E.g. for booleans, you can prefix with `is_` or `has_` to make it clear it is a condition. You can also use part of speech to imply types, like verbs for functions and nouns for variables.\n- **Be consistent but clearly differentiate** - E.g. `age_list` and `age` is easier to differentiate than `ages` and `age`. \n- **Avoid abbreviations and especially single letters** - (Exception: counters and common math variables) Choosing when these exceptions can be made can be determined based on the audience for your code.  If you work with other data scientists, certain variables may be common knowledge.  While if you work with full stack engineers, it might be necessary to provide more descriptive names in these cases as well. \n- **Long names != descriptive names** - You should be descriptive, but only with relevant information. E.g. good functions names describe what they do well without including details about implementation or highly specific uses.\n\nTry testing how effective your names are by asking a fellow programmer to guess the purpose of a function or variable based on its name, without looking at your code. Coming up with meaningful names often requires effort to get right.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 665149,
              "key": "7204c503-1597-477e-8ab0-7a15e30666cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Writing Clean Code: Nice Whitespace\n\n> #### Tip: Use whitespace properly\n- Organize your code with consistent indentation - the standard is to use 4 spaces for each indent. You can make this a default in your text editor.\n- Separate sections with blank lines to keep your code well organized and readable.\n- Try to limit your lines to around 79 characters, which is the guideline given in the PEP 8 style guide. In many good text editors, there is a setting to display a subtle line that indicates where the 79 character limit is. \n\nFor more guidelines, check out the code layout section of PEP 8 in the notes below.",
              "instructor_notes": ""
            },
            {
              "id": 665147,
              "key": "0c734232-0678-4e5d-8ef4-387e84ebd4c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Writing Clean Code: Nice Whitespace\n[PEP 8 guidelines for code layout](https://www.python.org/dev/peps/pep-0008/?#code-lay-out)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634065,
          "key": "0a93a0e1-bf4e-4e85-a1c9-bd23f0d5bb4c",
          "title": "Quiz: Clean Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a93a0e1-bf4e-4e85-a1c9-bd23f0d5bb4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634127,
              "key": "20023f6f-1358-4eb0-a953-b5fa15fa79e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Categorizing Tasks",
              "instructor_notes": ""
            },
            {
              "id": 663169,
              "key": "fc35c849-12df-4623-ac28-08b933302fc0",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fc35c849-12df-4623-ac28-08b933302fc0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Imagine you are writing a program that executes a number of tasks and categorizes each task based on its execution time. Below is a small snippet of this program. Which of the following naming changes could make this code cleaner?\n```python\nt = end_time - start  # compute execution time\nc = category(t)  # get category of task\nprint('Task Duration: {} seconds, Category: {}'.format(t, c)\n```",
                "answers": [
                  {
                    "id": "a1529582589455",
                    "text": "None",
                    "is_correct": false
                  },
                  {
                    "id": "a1529582688082",
                    "text": "Rename the variable `start` to `start_time` to make it consistent with `end_time`",
                    "is_correct": true
                  },
                  {
                    "id": "a1529582688884",
                    "text": "Rename the variable `t` to `execution_time` to make it more descriptive",
                    "is_correct": true
                  },
                  {
                    "id": "a1529582813359",
                    "text": "Rename the function `category` to `categorize_task` to match the part of speech",
                    "is_correct": true
                  },
                  {
                    "id": "a1529582824749",
                    "text": "Rename the variable `c` to `category` to make it more descriptive",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 663199,
              "key": "cfb2ee0a-cc8d-4532-8171-28069e970308",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Buying Stocks\nImagine you analyzed several stocks and calculated the ideal price, or _limit price_, you'd want to buy each stock at. You write a program to iterate through your stocks and buy it if the current price is below or equal to the limit price you computed. Otherwise, you put it on a watchlist. Below are three ways of writing this code. Which of the following is the most clean?\n```python\n# Choice A\nstock_limit_prices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}\nfor stock_ticker, stock_limit_price in buy_prices.items():\n    if stock_limit_price <= get_current_stock_price(ticker):\n        buy_stock(ticker)\n    else:\n        watchlist_stock(ticker)\n```\n```python\n# Choice B\nprices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}\nfor ticker, price in prices.items():\n    if price <= current_price(ticker):\n        buy(ticker)\n    else:\n        watchlist(ticker)\n```\n```python\n# Choice C\nlimit_prices = {'LUX': 62.48, 'AAPL': 127.67, 'NVDA': 161.24}\nfor ticker, limit in limit_prices.items():\n    if limit <= get_current_price(ticker):\n        buy(ticker)\n    else:\n        watchlist(ticker)\n```",
              "instructor_notes": ""
            },
            {
              "id": 663206,
              "key": "d5a95cc0-814f-499f-bbc5-21aa09601856",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5a95cc0-814f-499f-bbc5-21aa09601856",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which code is most clean?",
                "answers": [
                  {
                    "id": "a1529594977700",
                    "text": "Choice A",
                    "is_correct": false
                  },
                  {
                    "id": "a1529594981952",
                    "text": "Choice B",
                    "is_correct": false
                  },
                  {
                    "id": "a1529594984623",
                    "text": "Choice C",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 634064,
          "key": "35f408f1-27db-419e-b406-ef31d8a1baa4",
          "title": "Writing Modular Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35f408f1-27db-419e-b406-ef31d8a1baa4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714410,
              "key": "b92a3cc2-e4e6-4477-a799-a159ba7eec13",
              "title": "02 Writing Modular Code V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qN6EOyNlSnk",
                "china_cdn_id": "qN6EOyNlSnk.mp4"
              }
            },
            {
              "id": 634123,
              "key": "78a54e5a-f8c3-4215-913b-fa430f337d43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Writing Modular Code\n\n> #### Tip: DRY (Don't Repeat Yourself)\nDon't repeat yourself! Modularization allows you to reuse parts of your code. Generalize and consolidate repeated code in functions or loops.\n\n> #### Tip: Abstract out logic to improve readability\nAbstracting out code into a function not only makes it less repetitive, but also improves readability with descriptive function names. Although your code can become more readable when you abstract out logic into functions, it is possible to over-engineer this and have way too many modules, so use your judgement. \n\n> #### Tip: Minimize the number of entities (functions, classes, modules, etc.)\nThere are tradeoffs to having function calls instead of inline logic. If you have broken up your code into an unnecessary amount of functions and modules, you'll have to jump around everywhere if you want to view the implementation details for something that may be too small to be worth it. Creating more modules doesn't necessarily result in effective modularization. \n\n> #### Tip: Functions should do one thing\nEach function you write should be focused on doing one thing. If a function is doing multiple things, it becomes more difficult to generalize and reuse. Generally, if there's an \"and\" in your function name, consider refactoring.\n\n> #### Tip: Arbitrary variable names can be more effective in certain functions\nArbitrary variable names in general functions can actually make the code more readable. \n\n> #### Tip: Try to use fewer than three arguments per function\nTry to use no more than three arguments when possible. This is not a hard rule and there are times it is more appropriate to use many parameters. But in many cases, it's more effective to use fewer arguments. Remember we are modularizing to simplify our code and make it more efficient to work with. If your function has a lot of parameters, you may want to rethink how you are splitting this up.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 664474,
          "key": "137be110-8f87-4160-af72-47d1692bb4a7",
          "title": "Quiz: Refactoring - Wine Quality",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "137be110-8f87-4160-af72-47d1692bb4a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 667517,
              "key": "b10995ee-7f15-44e8-8e31-6a8bc4cd88e4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "c23dcf1d-4d67-464d-85b0-4d5550e8da0e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/wine_quality/refactor_wine_quality.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 704611,
          "key": "9bc1720c-854c-4d85-a3f9-6c872bb55f22",
          "title": "Solution: Refactoring - Wine Quality",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9bc1720c-854c-4d85-a3f9-6c872bb55f22",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 704612,
              "key": "e395cb47-39a3-4e57-a0aa-d34273d03a17",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "jupyter-scaqo1dwsg",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/wine_quality/refactor_wine_quality_solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634066,
          "key": "e1aa1dde-23bc-422c-bd67-2e6bc01c80bb",
          "title": "Efficient Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e1aa1dde-23bc-422c-bd67-2e6bc01c80bb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 713513,
              "key": "3fcc75a7-8912-4297-9cab-56067308fc20",
              "title": "L2 06 Efficient Code V1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LbtxY7xetBw",
                "china_cdn_id": "LbtxY7xetBw.mp4"
              }
            },
            {
              "id": 634129,
              "key": "d2a4fa28-cd72-47ab-891e-4d058bcb0c4e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Efficient Code\n\nKnowing how to write code that runs efficiently is another essential skill in software development. Optimizing code to be more efficient can mean making it:\n- Execute faster\n- Take up less space in memory/storage\n\nThe project you're working on would determine which of these is more important to optimize for your company or product. When we are performing lots of different transformations on large amounts of data, this can make orders of magnitudes of difference in performance.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634067,
          "key": "5586cef4-ff2c-4095-9763-cdceaff030d1",
          "title": "Optimizing - Common Books",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5586cef4-ff2c-4095-9763-cdceaff030d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714411,
              "key": "772ef525-01f7-40ec-b628-05848b3c2d5d",
              "title": "03 Optimizing Common Books V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WF9n_19V08g",
                "china_cdn_id": "WF9n_19V08g.mp4"
              }
            },
            {
              "id": 708593,
              "key": "2c9d10fc-1dde-45a1-9b8d-c563c72139cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources:\n- [What makes sets faster than lists](https://stackoverflow.com/questions/8929284/what-makes-sets-faster-than-lists-in-python/8929445)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 708594,
          "key": "38e84539-1295-4871-80ea-c9e2d2d3ecd6",
          "title": "Quiz: Optimizing - Common Books",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "38e84539-1295-4871-80ea-c9e2d2d3ecd6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708595,
              "key": "46a87ecc-502e-417c-bc5a-c7f683a635ed",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "jupyter-62yrel5kpkd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/common_books/optimizing_code_common_books.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 708596,
          "key": "5bf4a302-7bc7-48c9-80e3-e287466f09f6",
          "title": "Solution: Optimizing - Common Books",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5bf4a302-7bc7-48c9-80e3-e287466f09f6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708597,
              "key": "9bc40969-05e7-4ddf-842d-5c47af8edc69",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "jupyter-efoy7dic8oj",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/common_books/optimizing_code_common_books_solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 708598,
          "key": "e81884e5-367c-4875-8ba1-26d8e11320e3",
          "title": "Quiz: Optimizing - Holiday Gifts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e81884e5-367c-4875-8ba1-26d8e11320e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708599,
              "key": "3249ad5c-81ba-4ef4-988a-943cf433d420",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "jupyter-1bgjs4noegn",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/holiday_gifts/optimizing_code_holiday_gifts.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634069,
          "key": "7beb45f2-367d-4b3e-88a1-da36a686e980",
          "title": "Solution: Optimizing - Holiday Gifts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7beb45f2-367d-4b3e-88a1-da36a686e980",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663217,
              "key": "d4689ddc-9e0a-45db-b8bf-2dff36dbbc9d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73c512e5",
              "pool_id": "jupyter",
              "view_id": "73c512e5-ead5-45b1-8f01-fc3937e5e904",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/holiday_gifts/optimizing_code_holiday_gifts_solution.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 634070,
          "key": "e9681888-7a8b-45da-82cc-8ea7ec0bc044",
          "title": "Documentation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e9681888-7a8b-45da-82cc-8ea7ec0bc044",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682640,
              "key": "70376a0c-2dec-430b-8e7f-199c4cfcd105",
              "title": "L2 10 Documentation V1 V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "M45B2VbPgjo",
                "china_cdn_id": "M45B2VbPgjo.mp4"
              }
            },
            {
              "id": 634132,
              "key": "a6f47534-0ff1-4f70-b90a-5facd874ad10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Documentation\n- **DOCUMENTATION:** additional text or illustrated information that comes with or is embedded in the code of software.\n- Helpful for clarifying complex parts of code, making your code easier to navigate, and quickly conveying how and why different components of your program are used.\n- Several types of documentation can be added at different levels of your program:\n  - **In-line Comments** - line level\n  - **Docstrings** - module and function level\n  - **Project Documentation** - project level\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634071,
          "key": "ef124d01-12f8-4a67-84b0-95b8b147bba6",
          "title": "In-line Comments",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef124d01-12f8-4a67-84b0-95b8b147bba6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714412,
              "key": "58017b73-a8ed-46ef-87e8-3f60c342672c",
              "title": "04 Inline Comments V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-G6yg3Xhl8I",
                "china_cdn_id": "-G6yg3Xhl8I.mp4"
              }
            },
            {
              "id": 634133,
              "key": "1cb4c4b6-22aa-45bc-bf91-994ce870aa42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# In-line Comments\n\n- In-line comments are text following hash symbols throughout your code. They are used to explain parts of your code, and really help future contributors understand your work.\n- One way comments are used is to document the major steps of complex code to help readers follow. Then, you may not have to understand the code to follow what it does. However, others would argue that this is using comments to justify bad code, and that if code requires comments to follow, it is a sign refactoring is needed.\n- Comments are valuable for explaining where code cannot. For example, the history behind why a certain method was implemented a specific way. Sometimes an unconventional or seemingly arbitrary approach may be applied because of some obscure external variable causing side effects. These things are difficult to explain with code.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634079,
          "key": "ac6096b4-5d3b-4a59-9665-ac0a59587fa3",
          "title": "Docstrings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ac6096b4-5d3b-4a59-9665-ac0a59587fa3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714413,
              "key": "918e63b4-20af-4ec9-ad2d-73a6e23384f8",
              "title": "05 Docstrings V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_gapemxsRJY",
                "china_cdn_id": "_gapemxsRJY.mp4"
              }
            },
            {
              "id": 634134,
              "key": "f0a70195-d477-4154-ac32-1adbd9033d16",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Docstrings\n\nDocstring, or documentation strings, are valuable pieces of documentation that explain the functionality of any function or module in your code. Ideally, each of your functions should always have a docstring. \n\nDocstrings are surrounded by triple quotes. The first line of the docstring is a brief explanation of the function's purpose. \n\n### One line docstring\n\n```python\ndef population_density(population, land_area):\n    \"\"\"Calculate the population density of an area.\"\"\"\n    return population / land_area\n```\n\nIf you think that the function is complicated enough to warrant a longer description, you can add a more thorough paragraph after the one line summary.\n\n### Multi line docstring\n```python\ndef population_density(population, land_area):\n    \"\"\"Calculate the population density of an area.\n\n    Args:\n    population: int. The population of the area\n    land_area: int or float. This function is unit-agnostic, if you pass in values in terms of square km or square miles the function will return a density in those units.\n\n    Returns:\n    population_density: population/land_area. The population density of a \n    particular area.\n    \"\"\"\n    return population / land_area\n```\n\nThe next element of a docstring is an explanation of the function's arguments. Here you list the arguments, state their purpose, and state what types the arguments should be. Finally it is common to provide some description of the output of the function. Every piece of the docstring is optional; however, doc strings are a part of good coding practice. \n\n### Resources:\n- [PEP 257 - Docstring Conventions](https://www.python.org/dev/peps/pep-0257/)  \n- [NumPy Docstring Guide](https://numpydoc.readthedocs.io/en/latest/format.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634082,
          "key": "79ad7ca4-e648-4697-bc70-95c93f5d34fa",
          "title": "Project Documentation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79ad7ca4-e648-4697-bc70-95c93f5d34fa",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634135,
              "key": "7a5c19c8-ff7b-4436-a58b-5d1710fad1b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Documentation\n\nProject documentation is essential for getting others to understand why and how your code is relevant to them, whether they are potentials users of your project or developers who may contribute to your code. A great first step in project documentation is your README file. It will often be the first interaction most users will have with your project. \n\nWhether it's an application or a package, your project should absolutely come with a README file. At a minimum, this should explain what it does, list its dependencies, and provide sufficiently detailed instructions on how to use it. You want to make it as simple as possible for others to understand the purpose of your project, and quickly get something working.\n\nTranslating all your ideas and thoughts formally on paper can be a little difficult, but you'll get better over time and makes a significant difference in helping others realize the value of your project. Writing this documentation can also help you improve the design of your code, as you're forced to think through your design decisions more thoroughly. This also allows future contributors to know how to follow your original intentions.\n\nA full Udacity course on this topic can be found [here](https://classroom.udacity.com/courses/ud777).\n\nHere are a few READMEs from some popular projects:\n* [Bootstrap](https://github.com/twbs/bootstrap)\n* [Scikit-learn](https://github.com/scikit-learn/scikit-learn)\n* [Stack Overflow Blog](https://github.com/jjrunner/stackoverflow)\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634083,
          "key": "b83599a8-90ec-4fa3-b4d4-803274cc7463",
          "title": "Documentation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b83599a8-90ec-4fa3-b4d4-803274cc7463",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708588,
              "key": "a824c914-e5f2-42bb-a77e-a1c9884c5af1",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a824c914-e5f2-42bb-a77e-a1c9884c5af1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about in-line comments are true?",
                "answers": [
                  {
                    "id": "a1536225384245",
                    "text": "Comments are useful for clarifying complex code",
                    "is_correct": true
                  },
                  {
                    "id": "a1536225398479",
                    "text": "You never have too many comments",
                    "is_correct": false
                  },
                  {
                    "id": "a1536225398996",
                    "text": "Comments are only for unreadable parts of code",
                    "is_correct": false
                  },
                  {
                    "id": "a1536225399526",
                    "text": "Readable code is preferable over having comments to make your code readable",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 708589,
              "key": "f075c250-9c62-4eba-9353-f8e710e12dfa",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f075c250-9c62-4eba-9353-f8e710e12dfa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about docstrings are true?",
                "answers": [
                  {
                    "id": "a1536225460669",
                    "text": "Multiline docstrings are better than single line docstrings",
                    "is_correct": false
                  },
                  {
                    "id": "a1536225475813",
                    "text": "Docstrings explain the purpose of a function or module",
                    "is_correct": true
                  },
                  {
                    "id": "a1536225476341",
                    "text": "Docstrings and comments are interchangeable",
                    "is_correct": false
                  },
                  {
                    "id": "a1536225476827",
                    "text": "You can add whatever details you want in a docstring",
                    "is_correct": true
                  },
                  {
                    "id": "a1536225495670",
                    "text": "Not including a docstring will cause an error",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 634084,
          "key": "7f87f93a-2073-4396-9ee1-0b0d7ef23a28",
          "title": "Version Control in Data Science",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f87f93a-2073-4396-9ee1-0b0d7ef23a28",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682641,
              "key": "c9cd7f1d-c75f-4713-beeb-8c0a88cb553e",
              "title": "L2 17 Version Control In Data Science V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EQzrLC88Bzk",
                "china_cdn_id": "EQzrLC88Bzk.mp4"
              }
            },
            {
              "id": 634136,
              "key": "3cbe7384-7875-429c-bbcf-75c5087beace",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Version Control in Data Science\nIf you need a refresher on using git for version control, check out the course linked in the extracurriculars. If you're ready, let's see how git is used in real data science scenarios!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634085,
          "key": "cb30be73-359e-4777-a6ac-bdd10429ba76",
          "title": "Scenario #1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb30be73-359e-4777-a6ac-bdd10429ba76",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682642,
              "key": "8edb767a-1e57-444b-9214-e5154c54bcdd",
              "title": "L2 18 Version Control Git Branches V1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "C92YcuwjZOs",
                "china_cdn_id": "C92YcuwjZOs.mp4"
              }
            },
            {
              "id": 634139,
              "key": "bb72356b-f321-4fb2-afc8-964e54679765",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Scenario #1\nLet's walk through the git commands that go along with each step in the scenario you just observed in the video above.\n\n#### STEP 1: You have a local version of this repository on your laptop, and to get the latest stable version, you pull from the develop branch.\n\n> ##### Switch to the develop branch  \n```git checkout develop```\n\n> ##### Pull latest changes in the develop branch  \n```git pull```\n\n#### STEP 2: When you start working on this demographic feature, you create a new branch for this called demographic, and start working on your code in this branch.\n\n> ##### Create and switch to new branch called demographic from develop branch  \n```git checkout -b demographic```\n\n> ##### Work on this new feature and commit as you go  \n```git commit -m 'added gender recommendations'```  \n```git commit -m 'added location specific recommendations'```  \n```...```\n\n#### STEP 3: However, in the middle of your work, you need to work on another feature. So you commit your changes on this demographic branch, and switch back to the develop branch.\n\n> ##### Commit changes before switching  \n```git commit -m 'refactored demographic gender and location recommendations '```  \n\n> ##### Switch to the develop branch  \n```git checkout develop```\n\n#### STEP 4: From this stable develop branch, you create another branch for a new feature called friend_groups. \n\n> ##### Create and switch to new branch called friend_groups from develop branch  \n```git checkout -b friend_groups```\n\n#### STEP 5: After you finish your work on the friend_groups branch, you commit your changes, switch back to the development branch, merge it back to the develop branch, and push this to the remote repository’s develop branch.\n\n> ##### Commit changes before switching  \n```git commit -m 'finalized friend_groups recommendations '```  \n\n> ##### Switch to the develop branch  \n```git checkout develop```\n\n> ##### Merge friend_groups branch to develop  \n```git merge --no-ff friends_groups```\n\n> ##### Push to remote repository  \n```git push origin develop```\n\n#### STEP 6: Now, you can switch back to the demographic branch to continue your progress on that feature.\n\n> ##### Switch to the demographic branch  \n```git checkout demographic```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 667520,
          "key": "33b48c85-4df1-48d2-b4ec-397df640d865",
          "title": "Scenario #2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33b48c85-4df1-48d2-b4ec-397df640d865",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682643,
              "key": "9a2d27fd-cfce-4361-8d9d-a673026b34e0",
              "title": "L2 18 Version Control Git Commit Messages V1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w1iHWpwOkMg",
                "china_cdn_id": "w1iHWpwOkMg.mp4"
              }
            },
            {
              "id": 667526,
              "key": "49fc0971-238d-4dec-b8ef-40f46c4f58ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Scenario #2\nLet's walk through the git commands that go along with each step in the scenario you just observed in the video above.\n\n#### Step 1: You check your commit history, seeing messages of the changes you made and how well it performed. \n> ##### View log history\n```git log```\n\n#### Step 2: The model at this commit seemed to score the highest, so you decide to take a look.\n> ##### Checkout a commit\n```git checkout bc90f2cbc9dc4e802b46e7a153aa106dc9a88560```\n\nAfter inspecting your code, you realize what modifications made this perform well, and use those for your model.\n\n#### Step 3: Now, you’re pretty confident merging this back into the development branch, and pushing the updated recommendation engine.\n> ##### Switch to develop branch\n```git checkout develop```\n\n> ##### Merge friend_groups branch to develop\n```git merge --no-ff friend_groups```\n\n> ##### Push changes to remote repository\n```git push origin develop```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 667521,
          "key": "80c5a059-3170-4181-8224-f182dfe26c0a",
          "title": "Scenario #3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "80c5a059-3170-4181-8224-f182dfe26c0a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682644,
              "key": "2e442661-bf5d-4788-af2e-566e61b594be",
              "title": "L2 18 Version Control Merging Branches On A Team V1 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "36DOnNzvT4A",
                "china_cdn_id": "36DOnNzvT4A.mp4"
              }
            },
            {
              "id": 667524,
              "key": "b4bcbd35-b668-411a-84d8-15c10ef79081",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Scenario #3\n Let's walk through the git commands that go along with each step in the scenario you just observed in the video above.\n\n#### Step 1: Andrew commits his changes to the documentation branch, switches to the development branch, and pulls down the latest changes from the cloud on this development branch, including the change I merged previously for the friends group feature.\n\n> ##### Commit changes on documentation branch\n``` git commit -m \"standardized all docstrings in process.py\"```\n\n> ##### Switch to develop branch\n``` git checkout develop```\n\n> ##### Pull latest changes on develop down\n``` git pull```\n\n#### Step 2: Then, Andrew merges his documentation branch on the develop branch on his local repository, and then pushes his changes up to update the develop branch on the remote repository.\n\n> ##### Merge documentation branch to develop\n``` git merge --no-ff documentation```\n\n> ##### Push changes up to remote repository\n``` git push origin develop```\n\n#### Step 3: After the team reviewed both of your work, they merge the updates from the development branch to the master branch. Now they push the changes to the master branch on the remote repository. These changes are now in production.\n\n> ##### Merge develop to master\n``` git merge --no-ff develop```\n\n> ##### Push changes up to remote repository\n``` git push origin master```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 667522,
              "key": "a69dbc60-6799-45b7-a408-8551b45dd7a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources\nThere's a great article on a successful git branching strategy that you should really read [here](http://nvie.com/posts/a-successful-git-branching-model/).\n\n### Note on Merge Conflicts\nFor the most part, git makes merging changes between branches really simple. However, there are some cases where git will be confused on how to combine two changes, and asks you for help. This is called a merge conflict. \n\nMostly commonly, this happens when two branches modify the same file.\n\nFor example, in this situation, let’s say I deleted a line that Andrew modified on his branch. Git wouldn’t know whether to delete the line or modify it. Here, you need to tell git which change to take, and some tools even allow you to edit the change manually. If it isn’t straightforward, you may have to consult with the developer of the other branch to handle a merge conflict.\n\nYou can learn more about merge conflicts and methods to handle them [here](https://help.github.com/articles/about-merge-conflicts/).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634088,
          "key": "a2a9059e-325d-4258-9cb6-5399d5d12a32",
          "title": "Model Versioning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a2a9059e-325d-4258-9cb6-5399d5d12a32",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 634148,
              "key": "3eaadb2f-09cc-417b-801a-5234dc243e09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Model Versioning\nIn the previous example, you may have noticed that each commit was documented with a score for that model. This is one simple way to help you keep track of model versions. Version control in data science can be tricky, because there are many pieces involved that can be hard to track, such as large amounts of data, model versions, seeds, hyperparameters, etc.\n\nHere are some resources for useful ways and tools for managing versions of models and large data. These are here for you to explore, but are not necessary to know now as you start your journey as a data scientist. On the job, you’ll always be learning new skills, and many of them will be specific to the processes set in your company.\n\n- [How to Version Control Your Production Machine Learning Models](https://blog.algorithmia.com/how-to-version-control-your-production-machine-learning-models/)\n- [Versioning Data Science](https://shuaiw.github.io/2017/07/30/versioning-data-science.html)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 634089,
          "key": "0ea0ed14-f1ab-4119-bc5a-3ab2de6bc418",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ea0ed14-f1ab-4119-bc5a-3ab2de6bc418",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 682653,
              "key": "5f7aba3f-2b26-4e0c-aa4b-f0168adf2a46",
              "title": "L2 21 Conclusion V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "anPnokWZOZQ",
                "china_cdn_id": "anPnokWZOZQ.mp4"
              }
            },
            {
              "id": 634149,
              "key": "149a17a9-2f5a-414a-895c-26fbb76da694",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Conclusion",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}