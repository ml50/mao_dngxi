WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.190
在这节课 我们将使用

00:00:02.190 --> 00:00:04.965
SageMaker 的超参数优化功能

00:00:04.965 --> 00:00:08.115
SageMaker 可以帮助我们

00:00:08.115 --> 00:00:11.970
训练一批不同的模型 然后选择最佳模型

00:00:11.970 --> 00:00:17.160
当然 我们需要告诉 SageMaker 一批是多少

00:00:17.160 --> 00:00:20.670
以及最佳模型的标准是什么

00:00:20.670 --> 00:00:25.755
首先回忆下 SageMaker 如何训练模型

00:00:25.755 --> 00:00:31.070
打开 XGBoost (Batch Transform) - High Level notebook

00:00:31.070 --> 00:00:35.300
我已经打开它并运行了前几个单元格

00:00:35.300 --> 00:00:40.760
重要的是第 4 步 训练 XGBoost 模型

00:00:40.760 --> 00:00:45.080
我们首先创建了一个 estimator 对象

00:00:45.080 --> 00:00:49.355
充当构建模型时将使用的参数的封装器

00:00:49.355 --> 00:00:52.790
然后指定模型的参数

00:00:52.790 --> 00:00:56.390
我们选择使用 XGBoost

00:00:56.390 --> 00:01:01.220
所以将超参数设为这些值

00:01:01.220 --> 00:01:03.875
然后调用 fit() 方法

00:01:03.875 --> 00:01:07.760
SageMaker 将创建并执行训练作业

00:01:07.760 --> 00:01:11.210
如何知道这些超参数

00:01:11.210 --> 00:01:14.920
是模型的最佳超参数？

00:01:14.920 --> 00:01:17.420
答案是反复试验

00:01:17.420 --> 00:01:24.095
可以将这个改为 6 这个改为 0.3 或 0.5

00:01:24.095 --> 00:01:25.730
修改下这些值

00:01:25.730 --> 00:01:28.330
再训练一次模型

00:01:28.330 --> 00:01:32.240
然后看看当我们更改这些超参数时

00:01:32.240 --> 00:01:38.270
我们设定的指标（我们使用的是 RMSE）是否降低了

00:01:38.270 --> 00:01:42.560
这是一个不断迭代更新的过程 我们只是代入新的数字

00:01:42.560 --> 00:01:44.300
然后重新训练模型

00:01:44.300 --> 00:01:46.760
看看输出结果 因为这个过程很流程化

00:01:46.760 --> 00:01:50.450
所以我们希望有个自动化过程 的确有

00:01:50.450 --> 00:01:53.125
这就是 SageMaker 超参数优化的职责

00:01:53.125 --> 00:02:00.080
与其将 gamma 参数设为 4

00:02:00.080 --> 00:02:04.400
我们将提供一个值范围 SageMaker 会尝试该范围内的不同值

00:02:04.400 --> 00:02:09.065
然后 默认情况下使用贝叶斯优化方法

00:02:09.065 --> 00:02:15.695
寻找 gamma 的最优值

00:02:15.695 --> 00:02:18.530
最优值取决于

00:02:18.530 --> 00:02:24.034
我们比较不同训练模型时用到的训练指标

00:02:24.034 --> 00:02:25.940
在学习如何优化之前

00:02:25.940 --> 00:02:30.745
我先讲讲这段输出内容

00:02:30.745 --> 00:02:36.710
当训练作业成功执行完毕后 这里显示的部分内容是

00:02:36.710 --> 00:02:38.870
XGBoost 算法运行所在的 Docker 容器

00:02:38.870 --> 00:02:43.145
输出的标准输出结果

00:02:43.145 --> 00:02:45.849
有时候 当你遇到错误时

00:02:45.849 --> 00:02:50.165
Notebook 中不会出现这个输出结果

00:02:50.165 --> 00:02:51.860
这段输出依然存在

00:02:51.860 --> 00:02:53.420
但是要查看它

00:02:53.420 --> 00:02:55.955
需要使用 CloudWatch

00:02:55.955 --> 00:02:57.680
稍后我会讲解 CloudWatch 的

00:02:57.680 --> 00:02:59.200
为了使用 CloudWatch

00:02:59.200 --> 00:03:03.935
我们需要查看特定训练作业生成的日志

00:03:03.935 --> 00:03:07.340
一直滚动到顶部

00:03:07.340 --> 00:03:11.005
可以在这里看到训练作业的名称

00:03:11.005 --> 00:03:14.870
打开 SageMaker 控制台

00:03:14.870 --> 00:03:20.750
点击“Training jobs” 在右侧顶部可以看到刚刚创建的训练作业

00:03:20.750 --> 00:03:24.005
选择这个作业 向下滚动

00:03:24.005 --> 00:03:27.170
可以看到有个部分叫“Monitor”

00:03:27.170 --> 00:03:30.650
这里有个“View logs”链接

00:03:30.650 --> 00:03:33.860
点击它将在 CloudWatch 中

00:03:33.860 --> 00:03:37.370
打开此训练作业的日志

00:03:37.370 --> 00:03:39.235
选择该日志

00:03:39.235 --> 00:03:41.810
就可以看到

00:03:41.810 --> 00:03:45.370
在此训练过程中生成的所有输出列表

00:03:45.370 --> 00:03:47.015
正如我之前提到的

00:03:47.015 --> 00:03:52.325
通过这些日志可以很好地诊断在训练模型中可能会出现的问题

00:03:52.325 --> 00:03:57.065
此外 如果部署的模型行为变得奇怪时

00:03:57.065 --> 00:03:59.710
错误可能会出现在 CloudWatch 日志中

00:03:59.710 --> 00:04:01.995
此外 在处理项目时

00:04:01.995 --> 00:04:04.760
可以添加自定义代码

00:04:04.760 --> 00:04:06.980
还可以使用自定义代码输出结果

00:04:06.980 --> 00:04:10.600
输出会出现在此日志中

