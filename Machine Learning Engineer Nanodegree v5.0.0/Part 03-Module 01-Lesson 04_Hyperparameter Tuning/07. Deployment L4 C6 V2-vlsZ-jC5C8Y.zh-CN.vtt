WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.185
你已经尝试了 SageMaker 的超参数优化功能

00:00:04.185 --> 00:00:08.070
下面详细看看所发生的情况

00:00:08.070 --> 00:00:10.410
要跟着操作 请打开 Tutorials 文件夹

00:00:10.410 --> 00:00:13.140
我们将使用 Boston Housing

00:00:13.140 --> 00:00:16.470
XGBoost (Hyperparameter Tuning) - low-level notebook

00:00:16.470 --> 00:00:19.800
当然 该 notebook 的开头

00:00:19.800 --> 00:00:25.170
与其他低阶 notebook 一样 我们首先导入所需的模块

00:00:25.170 --> 00:00:28.200
下载数据 拆分数据

00:00:28.200 --> 00:00:32.100
将数据上传到 S3

00:00:32.100 --> 00:00:34.560
然后训练并构建 XGBoost 模型

00:00:34.560 --> 00:00:35.805
但是

00:00:35.805 --> 00:00:37.560
这次我们将使用

00:00:37.560 --> 00:00:42.780
SageMaker 的超参数优化 API 训练一批不同的模型

00:00:42.780 --> 00:00:49.915
它看起来与低阶批量转换 notebook 很像

00:00:49.915 --> 00:00:52.150
首先

00:00:52.150 --> 00:00:56.005
构建这个训练参数字典

00:00:56.005 --> 00:00:58.930
该字典里有很多信息

00:00:58.930 --> 00:01:04.870
例如训练容器的运行角色

00:01:04.870 --> 00:01:07.300
使用哪个训练算法

00:01:07.300 --> 00:01:09.910
我们将使用 XGBoost

00:01:09.910 --> 00:01:12.220
要将数据保存到哪

00:01:12.220 --> 00:01:15.845
应该使用什么远程实例

00:01:15.845 --> 00:01:19.240
StoppingCondition 可以防止

00:01:19.240 --> 00:01:22.825
计算流程变得很长

00:01:22.825 --> 00:01:27.020
例如不小心出现无限循环 下面说说第一个区别

00:01:27.020 --> 00:01:33.620
我们没有指定要使用的算法的超参数

00:01:33.620 --> 00:01:37.420
而是仅指定静态超参数

00:01:37.420 --> 00:01:41.210
即不使用 SageMaker 的超参数功能

00:01:41.210 --> 00:01:46.040
改变的超参数

00:01:46.040 --> 00:01:50.155
我们将 gamma 固定为 4

00:01:50.155 --> 00:01:53.610
将 subsample 固定为 0.8

00:01:53.610 --> 00:01:57.200
因为我们要预测房价的中位数

00:01:57.200 --> 00:02:01.040
所以将 objective 设为线性回归

00:02:01.040 --> 00:02:03.900
我们不会改变这个设置

00:02:03.900 --> 00:02:08.525
然后将早停法轮数固定为 10 并将最高迭代次数设为 200

00:02:08.525 --> 00:02:10.925
接下来指定输入数据

00:02:10.925 --> 00:02:15.550
与训练作业相似

00:02:15.550 --> 00:02:18.220
指定训练数据的数据

00:02:18.220 --> 00:02:20.410
指定数据的位置

00:02:20.410 --> 00:02:25.820
即位于 S3 上 属于 csv 数据 然后为验证过程指定参数

00:02:25.820 --> 00:02:29.960
这个 training_params 对象与我们

00:02:29.960 --> 00:02:33.970
在创建训练作业时创建的 training_params 对象很像

00:02:33.970 --> 00:02:36.560
区别在于我们没有设置超参数

00:02:36.560 --> 00:02:39.515
而是仅设置静态超参数

00:02:39.515 --> 00:02:44.300
稍后将设置允许 SageMaker 更改的超参数

00:02:44.300 --> 00:02:47.780
training_params 对象用来创建

00:02:47.780 --> 00:02:51.710
SageMaker 将使用的基本模型

00:02:51.710 --> 00:02:54.980
与在高阶方法中创建

00:02:54.980 --> 00:02:59.000
用作基本模型的 estimator 对象的方式相似

00:02:59.000 --> 00:03:01.534
为了指定允许更改的参数

00:03:01.534 --> 00:03:03.875
我们需要设置训练作业

00:03:03.875 --> 00:03:08.930
首先指定允许的不同参数

00:03:08.930 --> 00:03:14.600
指定连续参数的最大值

00:03:14.600 --> 00:03:16.010
最小值以及参数名称

00:03:16.010 --> 00:03:19.850
还要指定整数参数

00:03:19.850 --> 00:03:22.490
包括最小值 最大值

00:03:22.490 --> 00:03:25.435
以及允许 SageMaker 更改的参数名称

00:03:25.435 --> 00:03:31.475
接着指定模型总数

00:03:31.475 --> 00:03:37.585
以及并行运行的模型总数

00:03:37.585 --> 00:03:44.480
SageMaker 将使用贝叶斯优化方法更新修改的超参数

00:03:44.480 --> 00:03:47.420
最后 我们需要告诉 SageMaker

00:03:47.420 --> 00:03:51.710
如何确定模型效果更佳还是更差

00:03:51.710 --> 00:03:59.830
如果验证均方根误差最小或更小 则模型更佳

00:03:59.830 --> 00:04:02.360
我们有了描述基准模型的数据结构

00:04:02.360 --> 00:04:09.755
以及描述优化器如何运行的数据结构

00:04:09.755 --> 00:04:11.240
如果将二者组合到一起

00:04:11.240 --> 00:04:13.900
就可以创建一个超参数优化作业

00:04:13.900 --> 00:04:16.610
与 SageMaker 中的其他作业一样

00:04:16.610 --> 00:04:20.880
我们需要命名作业 并且是唯一名称

00:04:20.880 --> 00:04:25.765
此外 优化作业的名称还有一个限制条件

00:04:25.765 --> 00:04:31.970
大部分作业名称可以长达 63 个字符

00:04:31.970 --> 00:04:37.795
所以我们可以选择各种名称并加上时间戳

00:04:37.795 --> 00:04:39.785
但是对于优化作业来说

00:04:39.785 --> 00:04:42.950
最大长度是 32 个字符

00:04:42.950 --> 00:04:45.950
原因是优化作业将创建大量训练作业

00:04:45.950 --> 00:04:48.980
它将根据优化作业名称

00:04:48.980 --> 00:04:53.290
自动为这些训练作业分配名称

00:04:53.290 --> 00:04:55.790
请注意这一点

00:04:55.790 --> 00:04:59.285
如果优化作业的名称太长 可能会出错

00:04:59.285 --> 00:05:01.460
指定名称后

00:05:01.460 --> 00:05:06.300
我们就可以创建超参数优化作业了 需要指定作业名称

00:05:06.300 --> 00:05:11.510
提供优化作业配置 告诉 SageMaker 更改哪些超参数以及更改范围

00:05:11.510 --> 00:05:17.195
还要指定描述基本模型的训练作业

00:05:17.195 --> 00:05:21.990
当然 除了创建作业之外 SageMaker 还将开始运行作业

00:05:21.990 --> 00:05:25.125
和之前一样 作业会在后台运行

00:05:25.125 --> 00:05:29.075
如果要直观地查看运行进度

00:05:29.075 --> 00:05:32.730
我们需要使用 wait_for_tuning_job 方法

