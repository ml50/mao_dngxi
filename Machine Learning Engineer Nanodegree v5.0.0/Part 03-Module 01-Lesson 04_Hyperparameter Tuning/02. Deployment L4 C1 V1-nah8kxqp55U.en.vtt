WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.189
In this lesson we're going to take advantage of

00:00:02.189 --> 00:00:04.964
SageMaker's hyperparameter tuning functionality.

00:00:04.964 --> 00:00:08.115
Essentially, what SageMaker can do for us is

00:00:08.115 --> 00:00:11.970
train a bunch of different models and choose the best one.

00:00:11.970 --> 00:00:17.160
Of course, we are going to have to tell SageMaker how many a bunch is,

00:00:17.160 --> 00:00:20.670
and what we mean by best model.

00:00:20.670 --> 00:00:25.755
To start with, let's remind ourselves how SageMaker trains a model.

00:00:25.754 --> 00:00:31.070
I'm going to open up the batch transform, XGBoost, high-level notebook.

00:00:31.070 --> 00:00:35.299
I've already opened it up and run the first few cells,

00:00:35.299 --> 00:00:40.759
and the important ones here are in step four when training the XGBoost model.

00:00:40.759 --> 00:00:45.079
Remember, what we do is we first create an estimator object and this kind of

00:00:45.079 --> 00:00:49.354
acts as a wrapper for the parameters that we're going to use to construct our model.

00:00:49.354 --> 00:00:52.789
We then set parameters that are specific to the model that

00:00:52.789 --> 00:00:56.390
we've chosen in our case because we've chosen XGBoost,

00:00:56.390 --> 00:01:01.219
these are some of the hyperparameters we wish to set and then we call

00:01:01.219 --> 00:01:03.875
the fit method and SageMaker takes care of

00:01:03.875 --> 00:01:07.760
creating a training job and executing it for us.

00:01:07.760 --> 00:01:11.210
So, how do we know that these hyperparameters are

00:01:11.209 --> 00:01:14.919
the best hyperparameters for the model that we are working on?

00:01:14.920 --> 00:01:17.420
The answer is basically trial and error.

00:01:17.420 --> 00:01:24.094
We would maybe change this to six or change this to 0.3 or 0.05,

00:01:24.094 --> 00:01:25.730
we'd make some modifications here,

00:01:25.730 --> 00:01:28.329
and then we would train the model another time,

00:01:28.329 --> 00:01:32.239
and then we would check to see whether the metric that we're using in this case

00:01:32.239 --> 00:01:38.269
RMSE has decreased when we change these hyperparameters.

00:01:38.269 --> 00:01:42.560
This is a very iterative process where we're just sort of plugging in new numbers

00:01:42.560 --> 00:01:44.299
up here and training the model again and

00:01:44.299 --> 00:01:46.759
checking the output and since that's very routine,

00:01:46.760 --> 00:01:50.450
we would hope that there would be an automated way of doing this, and there is.

00:01:50.450 --> 00:01:53.125
This is what SageMaker's hyperparameter tuning does.

00:01:53.125 --> 00:02:00.079
So, instead of giving Gamma say a parameter value of four we would give it a range of

00:02:00.079 --> 00:02:04.400
values and then SageMaker would try different values in

00:02:04.400 --> 00:02:09.064
that range and then using by default Bayesian optimization,

00:02:09.064 --> 00:02:15.694
it would find the optimal or attempt to find the optimal value for Gamma.

00:02:15.694 --> 00:02:18.530
Optimal in this case is going to depend on

00:02:18.530 --> 00:02:24.033
whatever training metric we use to differentiate different trained models.

00:02:24.033 --> 00:02:25.939
Before we see how to do this,

00:02:25.939 --> 00:02:30.745
I just want to take a moment to talk a little bit about this output that we see here.

00:02:30.745 --> 00:02:36.710
When a training job successfully completes part of what is displayed here is the output

00:02:36.710 --> 00:02:38.870
that the Docker container containing

00:02:38.870 --> 00:02:43.145
the XGBoost algorithm that was running output to standard output.

00:02:43.145 --> 00:02:45.849
Sometimes when you get an error,

00:02:45.848 --> 00:02:50.164
you don't get this output in the notebook.

00:02:50.164 --> 00:02:51.859
This output still exists,

00:02:51.860 --> 00:02:53.420
however, to look it up,

00:02:53.419 --> 00:02:55.954
you need to use something called CloudWatch,

00:02:55.955 --> 00:02:57.680
which I'm going to show you in a moment.

00:02:57.680 --> 00:02:59.200
In order to use CloudWatch,

00:02:59.199 --> 00:03:03.935
we need to look at the logs that were generated by a specific training job.

00:03:03.935 --> 00:03:07.340
In this case, scrolling all the way up to the top we can

00:03:07.340 --> 00:03:11.004
see that the name of the training job is this one right here.

00:03:11.004 --> 00:03:14.870
So, now if we open up the SageMaker console and we'll look under

00:03:14.870 --> 00:03:20.750
training jobs we will see right here at the top is the training job that we just created.

00:03:20.750 --> 00:03:24.004
Selecting this and scrolling down,

00:03:24.004 --> 00:03:27.169
we see that there is a section called Monitor.

00:03:27.169 --> 00:03:30.649
In particular, there's a link called the View logs.

00:03:30.650 --> 00:03:33.860
If we click on this it will open up the logs

00:03:33.860 --> 00:03:37.370
for this particular training job inside of CloudWatch.

00:03:37.370 --> 00:03:39.235
So, now, if I select this,

00:03:39.235 --> 00:03:41.810
it will give me a list of all of

00:03:41.810 --> 00:03:45.370
the output that was generated during this training process.

00:03:45.370 --> 00:03:47.015
As I said before, this can be

00:03:47.014 --> 00:03:52.324
a very useful way to diagnose issues that might arise when training a model.

00:03:52.324 --> 00:03:57.064
It's also useful when you have a deployed model if it starts acting strangely,

00:03:57.064 --> 00:03:59.710
the errors may appear here in CloudWatch.

00:03:59.710 --> 00:04:01.995
Also, when working on the project,

00:04:01.995 --> 00:04:04.759
you'll note that you can include some of your own custom code,

00:04:04.759 --> 00:04:06.979
and if you wanted to, you could print output

00:04:06.979 --> 00:04:10.599
using that custom code and it would appear here in the logs.

