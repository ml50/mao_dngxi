WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.385
到目前为止 我们创建了两个不同的模型

00:00:02.385 --> 00:00:04.995
分别是 XGBoost 模型和线性模型

00:00:04.995 --> 00:00:09.375
假设我们想从部署的 XGBoost 模型切换到

00:00:09.375 --> 00:00:11.565
新的线性模型

00:00:11.565 --> 00:00:15.615
但是 我们希望新模型的性能

00:00:15.615 --> 00:00:19.920
至少与 XGBoost 模型很接近

00:00:19.920 --> 00:00:23.670
一种实现方式是执行 A/B 测试

00:00:23.670 --> 00:00:27.810
即创建一个新的端点 端点将接收一堆数据

00:00:27.810 --> 00:00:32.430
然后判断将数据发送给两个模型中的哪个模型

00:00:32.430 --> 00:00:35.825
我们可以在端点配置中进行设置

00:00:35.825 --> 00:00:40.220
分别将每个模型列为生产变体

00:00:40.220 --> 00:00:43.590
所以我们将创建新的端点配置

00:00:43.590 --> 00:00:46.635
并列出两个生产变体

00:00:46.635 --> 00:00:50.690
第一个是线性模型 命名为 Linear-Model

00:00:50.690 --> 00:00:53.435
第二个是 XGBoost 模型

00:00:53.435 --> 00:00:55.705
命名为 XGB-Model

00:00:55.705 --> 00:00:58.910
端点发送给每个模型的数据量

00:00:58.910 --> 00:01:02.960
取决于 InitialVariantWeight

00:01:02.960 --> 00:01:07.160
为了确定发送给每个模型的数据比例

00:01:07.160 --> 00:01:10.715
SageMaker 将计算权重总和

00:01:10.715 --> 00:01:15.050
然后 发送给第一个模型的数据比例是

00:01:15.050 --> 00:01:17.315
该模型的权重

00:01:17.315 --> 00:01:18.905
除以权重总和

00:01:18.905 --> 00:01:23.390
并对其他生产变体分别执行相似的计算流程

00:01:23.390 --> 00:01:25.905
我们有两个模型

00:01:25.905 --> 00:01:27.660
每个模型的权重是 1

00:01:27.660 --> 00:01:29.110
所以总和是 2

00:01:29.110 --> 00:01:33.665
1/2 的数据将发送给线性模型

00:01:33.665 --> 00:01:38.440
另一半数据将发送给 XGBoost 模型

00:01:38.440 --> 00:01:40.840
创建了端点配置后

00:01:40.840 --> 00:01:45.815
就要求 SageMaker 用这些属性创建端点

00:01:45.815 --> 00:01:47.570
端点现在已经在运行

00:01:47.570 --> 00:01:49.105
我们可以向其发送一些数据

00:01:49.105 --> 00:01:50.900
按照之前的操作

00:01:50.900 --> 00:01:54.140
在序列化数据后 首先将测试数据集的

00:01:54.140 --> 00:01:59.345
第一行发送给新的组合端点

00:01:59.345 --> 00:02:03.895
在响应中可以看到数据发送给了 XGBoost 模型

00:02:03.895 --> 00:02:10.370
下面将测试数据集的前 10 行发送给端点

00:02:10.370 --> 00:02:13.580
并输出每个调用的响应

00:02:13.580 --> 00:02:17.105
可以看到第一行发送给了 XGBoost 模型

00:02:17.105 --> 00:02:19.090
下一行发送给了线性模型

00:02:19.090 --> 00:02:23.400
再次发送给XGBoost XGBoost 线性模型 等等

00:02:23.400 --> 00:02:25.060
SageMaker 的做法是

00:02:25.060 --> 00:02:26.945
每次端点收到数据后

00:02:26.945 --> 00:02:30.460
SageMaker 将“投掷硬币” 正面朝上的话 数据发送给 XGBoost 模型

00:02:30.460 --> 00:02:32.400
反面朝上的话 发送给线性模型

00:02:32.400 --> 00:02:37.615
如果我们忘记了已部署端点的配置

00:02:37.615 --> 00:02:42.625
可以使用 sagemaker_client 的 describe_endpoint 方法

00:02:42.625 --> 00:02:47.320
返回结果是一个 JSON 对象或 Python 字典

00:02:47.320 --> 00:02:52.400
描述了我们对此端点设置的所有属性

00:02:52.400 --> 00:02:54.545
读起来有点乱

00:02:54.545 --> 00:02:58.970
但是可以看到这里有个 ProductionVariants 条目

00:02:58.970 --> 00:03:05.210
其中包含线性模型和 XGBoost 模型

00:03:05.210 --> 00:03:08.510
假设A/B 测试已经运行了一段时间

00:03:08.510 --> 00:03:10.175
我们一直在收集数据

00:03:10.175 --> 00:03:13.100
发现证据很可靠

00:03:13.100 --> 00:03:15.590
新的线性模型效果很不错

00:03:15.590 --> 00:03:18.600
我们想完成更改

00:03:18.600 --> 00:03:24.585
即不再让端点向 XGBoost 和线性模型发送数据

00:03:24.585 --> 00:03:29.395
而是做出更改 只向线性模型发送数据

00:03:29.395 --> 00:03:34.315
我们可以使用 sagemaker_client 的 update_endpoint 方法

00:03:34.315 --> 00:03:39.380
只需指定要更新哪个端点

00:03:39.380 --> 00:03:43.010
以及更新完毕后

00:03:43.010 --> 00:03:47.450
端点配置使用哪个

00:03:47.450 --> 00:03:52.265
我们将更新之前部署的端点

00:03:52.265 --> 00:03:56.875
配置为仅向线性模型发送数据

00:03:56.875 --> 00:03:59.490
当然 这些都在后台发生

00:03:59.490 --> 00:04:04.760
与此同时 我们看看当前存在的端点

00:04:04.760 --> 00:04:08.195
可以看到 目前有两个生产变体

00:04:08.195 --> 00:04:11.275
分别是线性模型和 XGBoost 模型

00:04:11.275 --> 00:04:13.809
原因是

00:04:13.809 --> 00:04:17.285
使用线性模型端点配置的端点

00:04:17.285 --> 00:04:18.845
尚未开始

00:04:18.845 --> 00:04:23.590
SageMaker 要确保端点从未中断

00:04:23.590 --> 00:04:24.930
所以在后台

00:04:24.930 --> 00:04:28.655
SageMaker 将首先启动新的端点

00:04:28.655 --> 00:04:34.160
并具有我们要将部署的端点更改为的配置

00:04:34.160 --> 00:04:37.025
新端点准备好后

00:04:37.025 --> 00:04:40.865
它将配置现有端点

00:04:40.865 --> 00:04:45.125
使其将所有数据都发送到创建的新端点

00:04:45.125 --> 00:04:48.905
这样的话 最终用户就不会看到中断情况

00:04:48.905 --> 00:04:52.925
为了查看这种情况 我们等待端点更新完毕

00:04:52.925 --> 00:04:57.550
端点现已更新为仅指向线性模型

00:04:57.550 --> 00:05:00.245
我们可以要求 SageMaker 描述此端点

00:05:00.245 --> 00:05:02.155
可以看到

00:05:02.155 --> 00:05:05.575
当前端点的确只有一个生产变体

00:05:05.575 --> 00:05:07.390
即线性模型

00:05:07.390 --> 00:05:11.240
使用完毕后 我们需要关闭端点

00:05:11.240 --> 00:05:17.630
我们学习了如何创建向多个模型发送数据的端点

00:05:17.630 --> 00:05:21.140
并学习了如何更新现有端点

00:05:21.140 --> 00:05:24.800
使用户感受不到服务中断

