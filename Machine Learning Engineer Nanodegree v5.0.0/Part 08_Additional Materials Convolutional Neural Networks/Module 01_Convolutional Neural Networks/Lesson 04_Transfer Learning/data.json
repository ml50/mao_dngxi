{
  "data": {
    "lesson": {
      "id": 727966,
      "key": "a559990d-e214-4c5d-a424-437f6299383e",
      "title": "Transfer Learning",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn how to apply a pre-trained network to a new problem with transfer learning.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/a559990d-e214-4c5d-a424-437f6299383e/727966/1545247083611/Transfer+Learning+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/a559990d-e214-4c5d-a424-437f6299383e/727966/1545247079264/Transfer+Learning+Subtitles.zip"
          },
          {
            "name": "flower_photos",
            "uri": "https://video.udacity-data.com/topher/2018/September/5baa60a0_flower-photos/flower-photos.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 727977,
          "key": "bd6c99ac-2c4f-4a80-9ae4-adb4403666c2",
          "title": "Transfer Learning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd6c99ac-2c4f-4a80-9ae4-adb4403666c2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784064,
              "key": "f523d1d8-5a20-4a3a-b1a7-ac2ef219ff16",
              "title": "Transfer Learning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yfPEROi3SPU",
                "china_cdn_id": "yfPEROi3SPU.mp4"
              }
            }
          ]
        },
        {
          "id": 727978,
          "key": "88c3cd0d-24a5-48a9-babe-dd3dd1724366",
          "title": "Useful Layers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "88c3cd0d-24a5-48a9-babe-dd3dd1724366",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784065,
              "key": "81988293-7bf3-40ea-8665-44ae0faf8a1b",
              "title": "Useful Layers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kn4BN7z3UGQ",
                "china_cdn_id": "kn4BN7z3UGQ.mp4"
              }
            }
          ]
        },
        {
          "id": 727979,
          "key": "f80c5e76-e812-4bb0-aecd-40921aaf0bf6",
          "title": "Fine-Tuning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f80c5e76-e812-4bb0-aecd-40921aaf0bf6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784066,
              "key": "6f7a68a2-631e-4c46-95ad-a8804441e5bd",
              "title": "03 Fine Tuning V1 RENDER V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XOyb315xYbw",
                "china_cdn_id": "XOyb315xYbw.mp4"
              }
            },
            {
              "id": 728105,
              "key": "5a6ec3c9-fe93-4fec-9e34-e7b2fece194a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Transfer Learning\n\nTransfer learning involves taking a pre-trained neural network and adapting the neural network to a new, different data set. \n\nDepending on both:\n* The size of the new data set, and\n* The similarity of the new data set to the original data set\n\nThe approach for using transfer learning will be different. There are four main cases:\n1. New data set is small, new data is similar to original training data.\n2. New data set is small, new data is different from original training data.\n3. New data set is large, new data is similar to original training data.\n4. New data set is large, new data is different from original training data.",
              "instructor_notes": ""
            },
            {
              "id": 811298,
              "key": "bbe2104f-0bed-4fa5-aaa3-322dfaae679c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A large data set might have one million images. A small data could have two-thousand images. The dividing line between a large data set and small data set is somewhat subjective. Overfitting is a concern when using transfer learning with a small data set. \n\nImages of dogs and images of wolves would be considered similar; the images would share common characteristics. A data set of flower images would be different from a data set of dog images. \n\nEach of the four transfer learning cases has its own approach. In the following sections, we will look at each case one by one.",
              "instructor_notes": ""
            },
            {
              "id": 811297,
              "key": "a7bab3a5-431b-4773-a3ea-8e4543014e28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The graph below displays what approach is recommended for each of the four main cases. ",
              "instructor_notes": ""
            },
            {
              "id": 728106,
              "key": "04abb2cd-c9ef-4dce-93a5-09c5993f1e18",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa60db_screen-shot-2018-09-25-at-9.22.35-am/screen-shot-2018-09-25-at-9.22.35-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/04abb2cd-c9ef-4dce-93a5-09c5993f1e18",
              "caption": "Four cases for using transfer learning.",
              "alt": "",
              "width": 540,
              "height": 756,
              "instructor_notes": null
            },
            {
              "id": 728108,
              "key": "a18c1c43-7676-4573-887f-9ed584b6d596",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Demonstration Network\n\nTo explain how each situation works, we will start with a generic pre-trained convolutional neural network and explain how to adjust the network for each case. Our example network contains three convolutional layers and three fully connected layers:",
              "instructor_notes": ""
            },
            {
              "id": 728109,
              "key": "12006dc5-031a-4878-82f5-008d5d2c641f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6197_screen-shot-2018-09-25-at-9.25.41-am/screen-shot-2018-09-25-at-9.25.41-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/12006dc5-031a-4878-82f5-008d5d2c641f",
              "caption": "Overview of the layers of a pre-trained CNN.",
              "alt": "",
              "width": 540,
              "height": 748,
              "instructor_notes": null
            },
            {
              "id": 728110,
              "key": "7f59828e-a42f-4c69-a60c-ab45aa4435d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is an generalized overview of what the convolutional neural network does: \n* the first layer will detect edges in the image\n* the second layer will detect shapes\n* the third convolutional layer detects higher level features\n\nEach transfer learning case will use the pre-trained convolutional neural network in a different way.",
              "instructor_notes": ""
            },
            {
              "id": 728111,
              "key": "1bea17b5-fcdb-455c-926d-4cc9e6ad30c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 1: Small Data Set, Similar Data",
              "instructor_notes": ""
            },
            {
              "id": 728112,
              "key": "b3a12be0-e54d-4f32-a0c1-c57ffa86373d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa61e8_screen-shot-2018-09-25-at-9.27.01-am/screen-shot-2018-09-25-at-9.27.01-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b3a12be0-e54d-4f32-a0c1-c57ffa86373d",
              "caption": "Case 1: small set, similar data",
              "alt": "",
              "width": 540,
              "height": 776,
              "instructor_notes": null
            },
            {
              "id": 728113,
              "key": "7ab80663-f5bd-4f36-abc7-a01579c3cc2c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is small and similar to the original training data:\n- slice off the end of the neural network\n- add a new fully connected layer that matches the number of classes in the new data set\n- randomize the weights of the new fully connected layer; freeze all the weights from the pre-trained network\n- train the network to update the weights of the new fully connected layer\n\nTo avoid overfitting on the small data set, the weights of the original network will be held constant rather than re-training the weights. \n\nSince the data sets are similar, images from each data set will have similar higher level features. Therefore most or all of the pre-trained neural network layers already contain relevant information about the new data set and should be kept.\n\nHere's how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 728114,
              "key": "41c4ce17-8a33-42b7-8f55-ff7ee612641d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa621b_screen-shot-2018-09-25-at-9.27.57-am/screen-shot-2018-09-25-at-9.27.57-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/41c4ce17-8a33-42b7-8f55-ff7ee612641d",
              "caption": "Adding and training a fully-connected layer at the end of the NN.",
              "alt": "",
              "width": 540,
              "height": 788,
              "instructor_notes": null
            },
            {
              "id": 728115,
              "key": "3790ee69-693c-47db-bf0f-3097004e3b11",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 2: Small Data Set, Different Data",
              "instructor_notes": ""
            },
            {
              "id": 728116,
              "key": "9e78d341-2971-410f-a8c6-dbc144dca13e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6267_screen-shot-2018-09-25-at-9.29.10-am/screen-shot-2018-09-25-at-9.29.10-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9e78d341-2971-410f-a8c6-dbc144dca13e",
              "caption": "Case 2: small set, different data",
              "alt": "",
              "width": 540,
              "height": 788,
              "instructor_notes": null
            },
            {
              "id": 728117,
              "key": "66ab618e-9158-4580-98ae-1058db60b58c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is small and different from the original training data:\n* slice off all but some of the pre-trained layers near the beginning of the network\n* add to the remaining pre-trained layers a new fully connected layer that matches the number of classes in the new data set\n* randomize the weights of the new fully connected layer; freeze all the weights from the pre-trained network\n* train the network to update the weights of the new fully connected layer\n\nBecause the data set is small, overfitting is still a concern. To combat overfitting, the weights of the original neural network will be held constant, like in the first case.\n\nBut the original training set and the new data set do not share higher level features. In this case, the new network will only use the layers containing lower level features.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 728118,
              "key": "1e9b7882-cc6b-4ed8-a9a6-a00a6ca4cd06",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa629e_screen-shot-2018-09-25-at-9.30.01-am/screen-shot-2018-09-25-at-9.30.01-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1e9b7882-cc6b-4ed8-a9a6-a00a6ca4cd06",
              "caption": "Remove all but the starting layers of the model, and add and train a linear layer at the end.",
              "alt": "",
              "width": 540,
              "height": 794,
              "instructor_notes": null
            },
            {
              "id": 728119,
              "key": "384dc972-6ab2-481d-8c4d-deeab21fe888",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 3: Large Data Set, Similar Data\n",
              "instructor_notes": ""
            },
            {
              "id": 728120,
              "key": "f02da47a-5e0d-4c11-bb48-96d03795444e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa62d9_screen-shot-2018-09-25-at-9.31.03-am/screen-shot-2018-09-25-at-9.31.03-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f02da47a-5e0d-4c11-bb48-96d03795444e",
              "caption": "Case 3: large data, similar to ImageNet or pre-trained set.",
              "alt": "",
              "width": 540,
              "height": 766,
              "instructor_notes": null
            },
            {
              "id": 728121,
              "key": "c946cb42-d896-438b-9014-25b8e374d46b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is large and similar to the original training data:\n- remove the last fully connected layer and replace with a layer matching the number of classes in the new data set\n- randomly initialize the weights in the new fully connected layer\n- initialize the rest of the weights using the pre-trained weights \n-  re-train the entire neural network\n\nOverfitting is not as much of a concern when training on a large data set; therefore, you can re-train all of the weights.\n\nBecause the original training set and the new data set share higher level features, the entire neural network is used as well.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 728122,
              "key": "d588e97b-2b72-4d1e-94e1-5e58e3ad5cb2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6313_screen-shot-2018-09-25-at-9.31.59-am/screen-shot-2018-09-25-at-9.31.59-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d588e97b-2b72-4d1e-94e1-5e58e3ad5cb2",
              "caption": "Utilizing pre-trained weights as a starting point!",
              "alt": "",
              "width": 540,
              "height": 772,
              "instructor_notes": null
            },
            {
              "id": 728123,
              "key": "0b3edfa4-92b5-4763-b263-9c3e2ee07095",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 4: Large Data Set, Different Data\n",
              "instructor_notes": ""
            },
            {
              "id": 728124,
              "key": "7b50f396-55da-4631-82d0-a5982ae6e0d4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6355_screen-shot-2018-09-25-at-9.33.11-am/screen-shot-2018-09-25-at-9.33.11-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7b50f396-55da-4631-82d0-a5982ae6e0d4",
              "caption": "Case 4: large data, different than original set",
              "alt": "",
              "width": 540,
              "height": 758,
              "instructor_notes": null
            },
            {
              "id": 728125,
              "key": "9736bf0b-5dfc-4193-aeb2-00daf4ec9fbd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is large and different from the original training data:\n- remove the last fully connected layer and replace with a layer matching the number of classes in the new data set\n- retrain the network from scratch with randomly initialized weights\n- alternatively, you could just use the same strategy as the \"large and similar\" data case\n\nEven though the data set is different from the training data, initializing the weights from the pre-trained network might make training faster. So this case is exactly the same as the case with a large, similar data set.\n\nIf using the pre-trained network as a starting point does not produce a successful model, another option is to randomly initialize the convolutional neural network weights and train the network from scratch.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 728126,
              "key": "d744e254-f8ad-422e-9ec2-1562c683cb5a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6392_screen-shot-2018-09-25-at-9.33.58-am/screen-shot-2018-09-25-at-9.33.58-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d744e254-f8ad-422e-9ec2-1562c683cb5a",
              "caption": "Fine-tune or retrain entire network.",
              "alt": "",
              "width": 540,
              "height": 786,
              "instructor_notes": null
            },
            {
              "id": 728127,
              "key": "bd53604f-6113-4a2a-ae4e-b175d12d2bd5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Optional Resources\n\n- Check out this [research paper](https://arxiv.org/pdf/1411.1792.pdf) that systematically analyzes the transferability of features learned in pre-trained CNNs.\n- Read the [Nature publication](http://www.nature.com/articles/nature21056.epdf?referrer_access_token=_snzJ5POVSgpHutcNN4lEtRgN0jAjWel9jnR3ZoTv0NXpMHRAJy8Qn10ys2O4tuP9jVts1q2g1KBbk3Pd3AelZ36FalmvJLxw1ypYW0UxU7iShiMp86DmQ5Sh3wOBhXDm9idRXzicpVoBBhnUsXHzVUdYCPiVV0Slqf-Q25Ntb1SX_HAv3aFVSRgPbogozIHYQE3zSkyIghcAppAjrIkw1HtSwMvZ1PXrt6fVYXt-dvwXKEtdCN8qEHg0vbfl4_m&tracking_referrer=edition.cnn.com) detailing Sebastian Thrun's cancer-detecting CNN!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 727980,
          "key": "249a064e-dde0-4e17-b72a-658de5100bd5",
          "title": "VGG Model & Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "249a064e-dde0-4e17-b72a-658de5100bd5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784067,
              "key": "6c5d7609-ff4d-4f6a-a8bf-4fd30ff7ac29",
              "title": "VGG Classifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fOiQFXItYe4",
                "china_cdn_id": "fOiQFXItYe4.mp4"
              }
            }
          ]
        },
        {
          "id": 728022,
          "key": "8220b71c-6032-4939-8342-03d2ef52a71f",
          "title": "Pre-Notebook: Transfer Learning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8220b71c-6032-4939-8342-03d2ef52a71f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 728128,
              "key": "e42d6f0b-7aa1-4d1e-8d81-f391872f736d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Notebook: Transfer Learning\n\nNow, you're ready to use transfer learning on a new task!\n\n**It's suggested that you open the notebook in a new, working tab and continue working on it as you go through the instructional videos in this tab.** This way you can toggle between learning new skills and coding/applying new skills.\n\nTo open this notebook, you have two options:\n>- Go to the next page in the classroom (recommended).\n- Clone the repo from [Github](https://github.com/udacity/deep-learning-v2-pytorch) and open the notebook **Transfer_Learning_Exercise.ipynb** in the **transfer-learning** folder.  You can either download the repository with `git clone https://github.com/udacity/deep-learning-v2-pytorch.git`, or download it as an archive file from [this link](https://github.com/udacity/deep-learning-v2-pytorch/archive/master.zip).\n\n# Instructions\n\n* Load in a pre-trained VGG Net\n* Freeze the weights in selected layers and add a new, linear layer of your own design\n* Train the modified model for a couple epochs and test its performance\n\nThis is a self-assessed lab. If you need any help or want to check your answers, feel free to check out the solutions notebook in the same folder, or by clicking [here](https://github.com/udacity/deep-learning-v2-pytorch/blob/master/transfer-learning/Transfer_Learning_Solution.ipynb).",
              "instructor_notes": ""
            },
            {
              "id": 728159,
              "key": "b77908a1-8138-476a-9998-711f70510b91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### GPU Workspaces\n\nThe next workspace is **GPU-enabled**, which means you can select to train on a GPU instance. The recommendation is this:\n* Load in data, test functions and models (checking parameters and doing a short training loop) while in CPU (non-enabled) mode\n* When you're ready to extensively train and test your model, **enable** GPU to quickly train the model!\n\nAll models and data they see as input will have to be moved to the GPU device, so take note of the relevant movement code in the model creation and training process.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 718429,
          "key": "b51b281f-b214-40c7-9293-9b3f1dd19650",
          "title": "Notebook: Transfer Learning, Flowers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b51b281f-b214-40c7-9293-9b3f1dd19650",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 718435,
              "key": "d9230d6f-272e-467f-96e4-12ec7c49dadb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewuf1qztkwjj",
              "pool_id": "jupytergpu",
              "view_id": "jupyter-z1il5yn9z6r",
              "gpu_capable": true,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Transfer_Learning_Exercise.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 727981,
          "key": "d9395541-f2e6-4d2d-a7f4-af5f71894dc0",
          "title": "Freezing Weights & Last Layer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9395541-f2e6-4d2d-a7f4-af5f71894dc0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784069,
              "key": "954c7daf-c6c3-4811-9b0a-dd47edec16fd",
              "title": "Freezing Weights",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ssNIX_2QfMQ",
                "china_cdn_id": "ssNIX_2QfMQ.mp4"
              }
            },
            {
              "id": 782249,
              "key": "7111f13f-374f-40f6-9cc1-c20d32818009",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Freezing parameters\n\nTo freeze any parameters, you can use the variable `requires_grad`. By default this is set to True. To freeze existing parameters you can loop through each one and set `param.requires_grad = False`.\n\nAbove, there is a **small typo**, which leaves out the `s` in `requires_grad`. This has been fixed in the exercise notebooks and our Github repo.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 727982,
          "key": "e3efab85-50cb-4372-a57d-0db804871c6b",
          "title": "Training a Classifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e3efab85-50cb-4372-a57d-0db804871c6b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 784071,
              "key": "5f37705c-c424-42db-8a28-bcf197244711",
              "title": "Last Layer",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4LniBMFI53g",
                "china_cdn_id": "4LniBMFI53g.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}