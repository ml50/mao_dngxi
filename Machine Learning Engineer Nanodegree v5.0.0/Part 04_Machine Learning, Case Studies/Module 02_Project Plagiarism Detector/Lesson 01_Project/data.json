{
  "data": {
    "lesson": {
      "id": 844039,
      "key": "fc67a0bb-3e8f-40af-a3a3-8c3754901773",
      "title": "Project",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": null,
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/fc67a0bb-3e8f-40af-a3a3-8c3754901773/844039/1556771535777/Project+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/fc67a0bb-3e8f-40af-a3a3-8c3754901773/844039/1556771532606/Project+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "2214c4e5-203c-46cd-b44f-137969a21549",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 23040,
        "semantic_type": "Project",
        "title": "Plagiarism Detector",
        "description": "# Plagiarism Detection\n\n## Project Overview\n\nIn this project, you will be tasked with building a plagiarism detector that examines a text file and performs binary classification; labeling that file as either plagiarized or not, depending on how similar the text file is to a provided source text.\n\n## Getting the Project Materials\n\nYou have been given starting notebooks in a Github repository, linked below.\n\n> Since this project uses SageMaker, it is suggested that you create a new SageMaker notebook instance using your [AWS console](https://console.aws.amazon.com) and link it to the Github repository [https://github.com/udacity/ML_SageMaker_Studies](https://github.com/udacity/ML_SageMaker_Studies).\n\n**The project files are in the `Project_Plagiarism_Detection` directory.**\n\nYou should complete each exercise and question; your project will be evaluated against [this rubric](https://review.udacity.com/#!/rubrics/2516/view).\n\n## Submission and Project Evaluation\n\nYou will be graded on your implementation of a plagiarism detector as well as complete answers to any questions in the project notebook. You'll submit a **zip file** or Github repo that includes complete notebooks, with all cells executed, and you'll be graded according to the project rubric.\n\n1. Ensure you've passed all the unit tests in the notebook.\n2. Ensure you pass all points on [the rubric](https://review.udacity.com/#!/rubrics/2516/view).\n3. When you're done with the project, please save the last two notebooks, \"2_Plagiarism_Feature_Engineering.ipynb\" and \"3_Training_a_Model.ipynb\", making sure you've run all cells. You can do this by going to the **File** menu in the notebook and choosing \"Download\". \n4. Package \"2_Plagiarism_Feature_Engineering.ipynb\", \"3_Training_a_Model.ipynb\", \"problem_unittests.py\", \"helpers.py\", and at least *one*, complete training directory (`source_sklearn` or `source_pytorch`) into a zip archive, or push the files from your GitHub repo.\n  \nNote that the zip file should **not** include the large `data` or any generated data repositories; this would make your submission too large to download and manage.\n\nOnce you have all of your project files in one zip file, you click `Submit` and follow the instructions for uploading your complete project!\n\n## Project Submission Checklist\n\n**Before submitting your project, please review and confirm the following items.** \n<input type=\"checkbox\"> I am confident all rubric items have been met and my project will pass as submitted. \n<input type=\"checkbox\"> Project builds correctly without errors and runs.\n<input type=\"checkbox\"> All required functionality exists and my project behaves as expected per the project's specifications.\n\n**Once you have checked all these items, you are ready to submit!**\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2516",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 813337,
          "key": "3be5b50c-c8fb-49cc-af84-6b0293738105",
          "title": "Project Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3be5b50c-c8fb-49cc-af84-6b0293738105",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 813340,
              "key": "4027c072-ac62-4e60-9945-1436b74645a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Plagiarism Detection Project\n\nIn this project, you will be tasked with building a plagiarism detector that examines a text file and performs binary classification; labeling that file as either *plagiarized* or *not*, depending on how similar that text file is to a provided source text. Detecting plagiarism is an active area of research; the task is non-trivial and the differences between paraphrased answers and original work are often not so obvious.\n\nLater in this lesson, you'll find a link to all of the relevant project files.",
              "instructor_notes": ""
            },
            {
              "id": 832578,
              "key": "39f81d55-27d5-4bdd-b1bc-34a3ba7eac68",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c7867f5_screen-shot-2019-02-28-at-2.59.48-pm/screen-shot-2019-02-28-at-2.59.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/39f81d55-27d5-4bdd-b1bc-34a3ba7eac68",
              "caption": "",
              "alt": "Comparing similar words in an answer and source text.",
              "width": 380,
              "height": 594,
              "instructor_notes": null
            },
            {
              "id": 813345,
              "key": "dcaac0de-150a-47d8-8a4c-204826baf298",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Defining Features\n\nOne of the ways you might go about detecting plagiarism, is by computing **similarity features** that measure how similar a given text file is as compared to an original source text. You can develop as many features as you want and are required to define a couple as outlined in [this paper](https://s3.amazonaws.com/video.udacity-data.com/topher/2019/January/5c412841_developing-a-corpus-of-plagiarised-short-answers/developing-a-corpus-of-plagiarised-short-answers.pdf) (which is also linked in the Lesson Resources tab. In this paper, researchers created features called **containment** and **longest common subsequence**.\n\nIn the next few sections, which explain how these features are calculated, I'll refer to a submitted text file (the one we want to label as plagiarized or not) as a **Student Answer Text** and an original, wikipedia source file (that we want to compare that answer to) as the **Wikipedia Source Text**.\n",
              "instructor_notes": ""
            },
            {
              "id": 813342,
              "key": "7b46b487-7a06-49ca-b67b-9d600918f42e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You'll be defining a few different similarity features to compare the two texts. Once you've extracted relevant features, it will be up to you to explore different classification models and decide on a model that gives you the best performance on a test dataset. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 813338,
          "key": "08116fc2-611d-4618-b068-50449444caea",
          "title": "Containment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08116fc2-611d-4618-b068-50449444caea",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 813343,
              "key": "c97f7d89-5e64-456a-8bdc-28c0324ffd17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Containment\n\nOne of your first tasks will be to create **containment** features that first look at a whole body of text (and count up the occurrences of words in several text files) and then compare a submitted and source text, relative to the traits of the whole body of text.",
              "instructor_notes": ""
            },
            {
              "id": 841728,
              "key": "7fd348b7-cb5c-481d-8cd0-2ed0af318a6c",
              "title": "L4 03 Containment V1 V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FwmT_7fICn0",
                "china_cdn_id": "FwmT_7fICn0.mp4"
              }
            },
            {
              "id": 813344,
              "key": "ecd43d07-2a41-4a6e-83b8-b6be4fe0878d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Calculating containment \n\nYou can calculate n-gram counts using count vectorization, and then follow the formula for containment:\n\n<div class=\"mathquill\"> \\frac{{count(\\text{n-gram})}_{A} \\cap count (\\text{n-gram})_{S}}{count(\\text{n-gram})_{A}} </div>\n\nIf the two texts have no n-grams in common, the containment will be 0, but if all their n-grams intersect then the containment will be 1. Intuitively, you can see how having longer n-gram's in common, might be an indication of cut-and-paste plagiarism.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 824873,
          "key": "533362c8-82f7-4106-b7ac-d9caf163cd9a",
          "title": "Notebook: Calculate Containment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "533362c8-82f7-4106-b7ac-d9caf163cd9a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 824874,
              "key": "94d7e911-60ef-4b4c-b9d2-20ffff9f497d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r806240c824873xJUPYTERy917pc14",
              "pool_id": "jupyter",
              "view_id": "jupyter-7svdm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Containment_Exercise.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 838222,
          "key": "a7c0e2a2-cc35-4560-a782-59b0725de4c3",
          "title": "Longest Common Subsequence",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a7c0e2a2-cc35-4560-a782-59b0725de4c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 838224,
              "key": "257aac97-d411-44f9-b735-92238d3176ff",
              "title": "L4 04 Longest Common Subsequence V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yxXXwBKeYvU",
                "china_cdn_id": "yxXXwBKeYvU.mp4"
              }
            }
          ]
        },
        {
          "id": 838223,
          "key": "f41838f3-514b-4532-8f3e-b173a577989e",
          "title": "Dynamic Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f41838f3-514b-4532-8f3e-b173a577989e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 838225,
              "key": "e94dae28-9649-4ba7-b428-09120bb36e79",
              "title": "L4 05 Dynamic Programming V1 V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vAwu-sW9GJE",
                "china_cdn_id": "vAwu-sW9GJE.mp4"
              }
            }
          ]
        },
        {
          "id": 832576,
          "key": "8afadbac-ff66-4ee2-8ab3-e5ef39fbd040",
          "title": "Project Files & Evaluation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8afadbac-ff66-4ee2-8ab3-e5ef39fbd040",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 832579,
              "key": "1fd4e1da-0319-4e3a-8d27-877046cd84c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Plagiarism Detection\n\n## Project Overview\n\nIn this project, you will be tasked with building a plagiarism detector that examines a text file and performs binary classification; labeling that file as either plagiarized or not, depending on how similar the text file is to a provided source text.\n\n\nThis project will be broken down into three main notebooks:\n\n**Notebook 1: Data Exploration**\n* Load in the corpus of plagiarism text data.\n* Explore the existing data features and the data distribution.\n* This first notebook is **not** required in your final project submission.\n\n**Notebook 2: Feature Engineering**\n\n* Clean and pre-process the text data.\n* Define features for comparing the similarity of an answer text and a source text, and extract similarity features.\n* Select \"good\" features, by analyzing the correlations between different features.\n* Create train/test `.csv` files that hold the relevant features and class labels for train/test data points.\n\n**Notebook 3: Train and Deploy Your Model in SageMaker**\n\n* Upload your train/test feature data to S3.\n* Define a binary classification model and a training script.\n* Train your model and deploy it using SageMaker.\n* Evaluate your deployed classifier.\n\n## Getting the Project Materials\n\nYou have been given the starting notebooks in a Github repository, linked below.\n\n> Since this project uses SageMaker, it is suggested that you create a new SageMaker notebook instance using your [AWS console](https://console.aws.amazon.com) and link it to the Github repository [https://github.com/udacity/ML_SageMaker_Studies](https://github.com/udacity/ML_SageMaker_Studies).\n\n**The project files are in the `Project_Plagiarism_Detection` directory.**\n\nYou should complete each exercise and question; your project will be evaluated against [this rubric](https://review.udacity.com/#!/rubrics/2516/view).\n\n## Project Evaluation\n\nYou will be graded on your implementation of a plagiarism detector as well as complete answers to any questions in the project notebook. You'll submit a **zip file** or Github repo that includes complete notebooks, with all cells executed, and you'll be graded according to the project rubric.",
              "instructor_notes": ""
            },
            {
              "id": 838231,
              "key": "743c535b-020e-47f8-9e28-c25a51236184",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exploring the Data\n\nBefore starting the project, you are given the option to explore the plagiarism data you'll be working with, in the **next workspace**.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 838228,
          "key": "dfe98f8d-dbf4-4791-8da3-6c37ed8c26f7",
          "title": "Notebook: Exploring the Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dfe98f8d-dbf4-4791-8da3-6c37ed8c26f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 838229,
              "key": "3596c014-3c66-4ec3-8439-7dbe1beaa712",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r806240c838228xJUPYTER37ngnrmf",
              "pool_id": "jupyter",
              "view_id": "jupyter-i9lo1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/1_Data_Exploration.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}