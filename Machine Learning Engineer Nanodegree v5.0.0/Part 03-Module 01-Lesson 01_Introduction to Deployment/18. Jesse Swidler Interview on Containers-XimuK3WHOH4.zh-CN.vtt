WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.375
我是 Jennifer Staab 是优达学城的 AI 讲师

00:00:03.375 --> 00:00:05.325
我身边的是 Jesse Swidler

00:00:05.325 --> 00:00:08.160
他是优达学城的资深软件工程师

00:00:08.160 --> 00:00:10.425
Hi Jennifer 很高兴接受访谈

00:00:10.425 --> 00:00:12.630
我在过去八九年的时间里

00:00:12.630 --> 00:00:15.225
一直都在搞网络应用开发 很高兴和你交流

00:00:15.225 --> 00:00:19.140
Jesse 作为一名软件开发工程师

00:00:19.140 --> 00:00:21.300
你认为容器有什么作用？

00:00:21.300 --> 00:00:24.480
嗯我认为

00:00:24.480 --> 00:00:27.435
用集装箱打比方

00:00:27.435 --> 00:00:31.320
最好理解容器可以给工作带来的诸多便利

00:00:31.320 --> 00:00:33.915
在有集装箱之前

00:00:33.915 --> 00:00:37.520
在世界各地运输货物很难

00:00:37.520 --> 00:00:41.630
现在我们可以将物品放在一个箱子里

00:00:41.630 --> 00:00:45.240
将箱子放到卡车上并开到港口

00:00:45.240 --> 00:00:49.505
然后放到船上

00:00:49.505 --> 00:00:52.490
我们可以建造大型昂贵工具

00:00:52.490 --> 00:00:54.440
例如用起重机移动箱子

00:00:54.440 --> 00:00:57.210
吊起箱子并放到不同的位置

00:00:57.820 --> 00:01:01.365
这就是容器的便利之处

00:01:01.365 --> 00:01:05.180
一切都封装在一个箱子里 我们可以用工具操作箱子

00:01:05.180 --> 00:01:08.200
你是说软件中的容器

00:01:08.200 --> 00:01:11.690
与集装箱类似吗？

00:01:11.690 --> 00:01:12.615
是的

00:01:12.615 --> 00:01:14.960
容器使工作更便利

00:01:14.960 --> 00:01:18.970
因为我们可以使用针对特定容器开发的工具

00:01:18.970 --> 00:01:20.820
容器里有什么并不重要

00:01:20.820 --> 00:01:23.680
例如无论在容器里运行什么软件都没关系 对吗？

00:01:23.680 --> 00:01:25.760
对的

00:01:27.090 --> 00:01:30.890
还是我说错了？

00:01:33.330 --> 00:01:37.614
容器并不是完全虚拟机

00:01:37.614 --> 00:01:40.570
但是对于初学者来说 可以这么理解

00:01:40.570 --> 00:01:43.705
因为它与底层操作系统共享操作工具

00:01:43.705 --> 00:01:46.500
因为不是完全虚拟机

00:01:46.500 --> 00:01:50.770
那么容器有什么特殊之处或优势呢？

00:01:50.770 --> 00:01:54.290
不是完全虚拟机有什么优势？

00:01:54.290 --> 00:01:56.530
因为不是虚拟机

00:01:56.530 --> 00:01:58.525
所以对操作系统的负载更小

00:01:58.525 --> 00:02:03.170
应用的运行开销很少

00:02:03.170 --> 00:02:06.170
使用容器的代价很小

00:02:06.170 --> 00:02:11.880
那么我们是如何在教室中使用容器运行 WorKspace 的？

00:02:11.880 --> 00:02:14.535
对于 Workspace 来说

00:02:14.535 --> 00:02:19.445
大部分学员环境都封装在容器之中

00:02:19.445 --> 00:02:23.070
所以我们可以将容器放在教室中

00:02:23.070 --> 00:02:27.305
并同时向所有学员部署学习环境

00:02:27.305 --> 00:02:31.040
我们可以用相同的方式控制权限

00:02:31.040 --> 00:02:33.110
就像集装箱一样

00:02:33.110 --> 00:02:39.190
我们也创建了向学员提供容器的工具

00:02:39.500 --> 00:02:42.070
不这么做的话

00:02:42.070 --> 00:02:45.130
我们就无法轻松地新建 Workspace

00:02:45.130 --> 00:02:49.485
所以 Workspace 是在容器中运行的？

00:02:49.485 --> 00:02:52.124
是的整个环境

00:02:52.124 --> 00:02:55.905
都使用了容器

00:02:55.905 --> 00:02:58.560
当学员登录并使用 Workspace 时

00:02:58.560 --> 00:03:01.635
其实就是在使用容器？

00:03:01.635 --> 00:03:02.190
是的

00:03:02.190 --> 00:03:05.900
所以学员已经在纳米学位课程中使用了容器？

00:03:05.900 --> 00:03:08.960
是的 他们直接在 Workspace 中用到了容器

00:03:08.960 --> 00:03:10.895
通常

00:03:10.895 --> 00:03:12.305
每次使用互联网

00:03:12.305 --> 00:03:15.845
都很可能在使用服务器上的某个容器

00:03:15.845 --> 00:03:17.705
哇 很有意思

00:03:17.705 --> 00:03:19.510
我从来没这么想过

00:03:19.510 --> 00:03:25.805
如果我们要更新 Workspace 中的软件 该怎么办？

00:03:25.805 --> 00:03:28.215
有何影响？

00:03:28.215 --> 00:03:30.510
使用容器的好处是

00:03:30.510 --> 00:03:35.660
我们通常通过脚本构建容器

00:03:35.660 --> 00:03:38.780
我们可以直接更新脚本

00:03:38.780 --> 00:03:40.955
并使用新的依赖项 然后重新运行脚本

00:03:40.955 --> 00:03:43.505
这样就获得了包含更新软件的新容器

00:03:43.505 --> 00:03:46.265
哇 更新软件变得好轻松

00:03:46.265 --> 00:03:46.850
是的

00:03:46.850 --> 00:03:51.260
作为软件开发工程师 容器给你的工作带来了哪些便利性？

00:03:51.260 --> 00:03:54.230
容器完全改变了我的工作方式

00:03:54.230 --> 00:03:57.545
因为之前没用容器的时候

00:03:57.545 --> 00:04:00.635
很难按照自己的想法拆分逻辑

00:04:00.635 --> 00:04:04.080
现在有了容器

00:04:04.080 --> 00:04:09.490
网络应用的大部分开发工作都不需要使用微服务

00:04:09.500 --> 00:04:14.685
我们将代码划分成小很多的单元 并且更好管理

00:04:14.685 --> 00:04:17.640
有道理所以容器使你的工作更轻松？

00:04:17.640 --> 00:04:18.855
是的

00:04:18.855 --> 00:04:22.805
感谢你接受访谈

00:04:22.805 --> 00:04:25.880
很高兴你能跟我们介绍容器知识

00:04:25.880 --> 00:04:29.630
我对容器有更深的理解了

00:04:29.630 --> 00:04:33.700
现在我知道优达学城的 Workspace 就用到了容器

00:04:33.700 --> 00:04:36.070
谢谢邀请我

