WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.174
在上个视频中

00:00:02.174 --> 00:00:06.450
我们实例化了一个 LinearLearner 模型 下面简单讲解下我是如何格式化训练数据的

00:00:06.450 --> 00:00:10.410
我希望将 split_data 函数生成的训练特征和标签

00:00:10.410 --> 00:00:12.960
转换成 RecordSet

00:00:12.960 --> 00:00:15.795
并作为 estimator 可以使用的训练数据

00:00:15.794 --> 00:00:18.390
首先将特征和标签

00:00:18.390 --> 00:00:21.164
转换成 float32 类型

00:00:21.164 --> 00:00:26.684
然后使用 linear.record_set 将数据转换成 RecordSet 格式

00:00:26.684 --> 00:00:29.445
只需传入特征和标签

00:00:29.445 --> 00:00:33.000
这与之前的非监督式示例很像

00:00:33.000 --> 00:00:34.619
只是在非监督式示例中

00:00:34.619 --> 00:00:36.629
我们仅传入了特征

00:00:36.630 --> 00:00:39.529
这次因为我们要执行监督式学习任务

00:00:39.529 --> 00:00:41.480
所以还需要传入标签

00:00:41.479 --> 00:00:45.304
x 表示特征 y 表示标签

00:00:45.304 --> 00:00:50.179
这个看起来与在非监督式学习示例中创建 RecordSet 很像

00:00:50.179 --> 00:00:53.554
但当时我们仅传入了训练特征

00:00:53.554 --> 00:00:55.554
我们没有任何标签可以参考

00:00:55.554 --> 00:01:00.859
这次 我们需要传入训练特征 x 和训练标签 y

00:01:00.859 --> 00:01:02.990
并创建特殊格式的训练数据

00:01:02.990 --> 00:01:05.540
然后 为了用特殊格式的数据训练模型

00:01:05.540 --> 00:01:09.250
只需调用 linear.fit 并传入特殊格式的数据

00:01:09.250 --> 00:01:11.930
这个单元格将创建一个具有特定名称的训练作业

00:01:11.930 --> 00:01:15.590
启动所需的实例并训练线性 estimator

00:01:15.590 --> 00:01:18.409
你的下个任务是部署训练过的模型

00:01:18.409 --> 00:01:19.909
在 estimator 训练后

00:01:19.909 --> 00:01:23.090
你应该会看到很多数据 包括当前周期

00:01:23.090 --> 00:01:26.075
以及关于模型训练的详细信息

00:01:26.075 --> 00:01:31.025
与之前一样 可以在 SageMaker 控制台中查看这个作业的状态

00:01:31.025 --> 00:01:34.730
转到 SageMaker 控制台并点击“Training jobs”

00:01:34.730 --> 00:01:38.285
可以看到我之前执行了很多训练作业 这个是正在运行的作业

00:01:38.284 --> 00:01:40.489
点击我们刚刚启动的这个作业

00:01:40.489 --> 00:01:43.009
可以看到作业名称 状态

00:01:43.010 --> 00:01:45.730
甚至还有创建和类型详情

00:01:45.730 --> 00:01:48.515
某些参数保留为默认值

00:01:48.515 --> 00:01:51.409
或采用我指定的值

00:01:51.409 --> 00:01:53.539
例如周期数和预测器类型

00:01:53.540 --> 00:01:56.780
打开日志 看看训练作业的状况

00:01:56.780 --> 00:01:59.000
日志需要一段时间才能生成

00:01:59.000 --> 00:02:01.340
打开后 将看到这样的消息记录

00:02:01.340 --> 00:02:02.630
点击这些日志后

00:02:02.629 --> 00:02:05.164
可以看到系统输出了很多数据

00:02:05.165 --> 00:02:10.129
展开某个指标 看看二元分类交叉熵损失

00:02:10.129 --> 00:02:14.375
可以看到 我们训练的是 LinearLearner 并且位于第 0 周期

00:02:14.375 --> 00:02:15.694
继续向下滚动

00:02:15.694 --> 00:02:18.784
点击指标并查看后续周期的结果

00:02:18.784 --> 00:02:20.689
等待训练结束

00:02:20.689 --> 00:02:24.215
可以看到系统发现了最佳模型并保存了检查点

00:02:24.215 --> 00:02:26.650
往这个最佳模型上面看看

00:02:26.650 --> 00:02:28.675
可以查看训练过程中的指标

00:02:28.675 --> 00:02:32.510
这是最终训练损失 比一开始的低多了

00:02:32.509 --> 00:02:34.909
接着可以看到分类准确率

00:02:34.909 --> 00:02:36.859
在训练数据上的准确率很高

00:02:36.860 --> 00:02:40.770
还有训练精确率和召回率分数

00:02:40.770 --> 00:02:42.710
稍后讲解这些指标

00:02:42.710 --> 00:02:45.490
所有这些都会在 notebook 中输出

00:02:45.490 --> 00:02:48.235
但是我发现日志读起来方便多了

00:02:48.235 --> 00:02:51.350
如果你成功训练了线性 estimator

00:02:51.349 --> 00:02:54.094
就可以部署它并创建线性预测器了

00:02:54.094 --> 00:02:55.580
部署该预测器后

00:02:55.580 --> 00:02:57.510
你可以使用它做出预测

00:02:57.509 --> 00:02:59.840
建议运行下面的几个单元格

00:02:59.840 --> 00:03:02.664
看看当你传入测试数据后 结果如何

00:03:02.664 --> 00:03:08.189
接下来我将演示我的部署方式并介绍我的一些测试评估结果

