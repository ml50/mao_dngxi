WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.459
我们看到默认的 LinearLearner 获得了很高的准确率

00:00:02.459 --> 00:00:07.304
但是依然将一些欺诈性交易和正常交易分类错了

00:00:07.304 --> 00:00:09.839
实际上 每个类别都有 30 多个数据点分类错了

00:00:09.839 --> 00:00:12.660
我们看看到底训练过程中发生了什么 导致这一行为

00:00:12.660 --> 00:00:15.599
以及如何改进模型

00:00:15.599 --> 00:00:20.324
首先 如果我们是为银行应用设计这样的模型

00:00:20.324 --> 00:00:25.679
那么用户肯定不希望有任何有效交易被归类为欺诈性交易

00:00:25.679 --> 00:00:28.300
我们希望尽量少的假正例 0

00:00:28.300 --> 00:00:30.815
被分类为 1

00:00:30.815 --> 00:00:33.170
另一方面 如果银行经理要求应用

00:00:33.170 --> 00:00:36.740
能发现几乎所有的欺诈性交易

00:00:36.740 --> 00:00:39.590
即使假正例数量很高

00:00:39.590 --> 00:00:43.625
那么我们需要尽可能减少假负例的数量

00:00:43.625 --> 00:00:46.789
在根据特定的产品需求和目标训练模型时

00:00:46.789 --> 00:00:49.494
我们不仅仅要优化准确率

00:00:49.494 --> 00:00:53.030
而且要优化其他指标 例如精确率和召回率

00:00:53.030 --> 00:00:57.395
它们可以帮助我们减少假正例或假负例的数量

00:00:57.395 --> 00:01:00.320
根据特定的指标优化模型

00:01:00.320 --> 00:01:03.409
通常称为模型优化

00:01:03.409 --> 00:01:05.509
第二项模型改进涉及的问题

00:01:05.510 --> 00:01:08.020
是我们在此 notebook 的最开始见过的问题

00:01:08.019 --> 00:01:12.935
我们发现只有约 0.17% 的数据标记为欺诈性交易

00:01:12.935 --> 00:01:16.519
所以即使模型将所有数据标记为有效交易

00:01:16.519 --> 00:01:19.099
依然有可能获得很高的测试准确率

00:01:19.099 --> 00:01:21.379
这样可能会导致过拟合有效数据

00:01:21.379 --> 00:01:24.259
并包含一些假负例

00:01:24.260 --> 00:01:29.120
即欺诈性交易 (1) 错误地归类为有效交易 (0)

00:01:29.120 --> 00:01:31.130
我们按部就班地解决这些问题

00:01:31.129 --> 00:01:35.494
首先在训练过程中根据特定的指标优化模型

00:01:35.495 --> 00:01:39.750
其次 解决训练集类别不平衡性问题

