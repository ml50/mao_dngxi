WEBVTT
Kind: captions
Language: en

00:00:04.219 --> 00:00:07.379
Test driven development is when you write

00:00:07.379 --> 00:00:10.304
tests before you write the code that's being tested.

00:00:10.304 --> 00:00:13.800
This means your test would fail at first and you will know you

00:00:13.800 --> 00:00:17.400
finished implementing a task when this test passes.

00:00:17.399 --> 00:00:20.070
This way of developing code has a number of

00:00:20.070 --> 00:00:24.149
benefits that's made it a standard practice in software engineering.

00:00:24.149 --> 00:00:26.014
As a simple example,

00:00:26.015 --> 00:00:28.589
let's say you have to write a function that checks

00:00:28.589 --> 00:00:31.620
whether a string is a valid email address.

00:00:31.620 --> 00:00:36.289
You think of a few factors to consider such as whether the string contains

00:00:36.289 --> 00:00:40.884
an "@" symbol and a period and write out a function that addresses them,

00:00:40.884 --> 00:00:43.674
and then test it manually in your terminal.

00:00:43.674 --> 00:00:47.404
You input one valid and one invalid email address

00:00:47.405 --> 00:00:50.600
to make sure it works properly, and it does.

00:00:50.600 --> 00:00:54.905
You try a few more valid and invalid email addresses

00:00:54.905 --> 00:00:57.490
and one of them gives back the wrong result.

00:00:57.490 --> 00:01:01.679
You realize you forgot to consider an edge case in your function,

00:01:01.679 --> 00:01:04.280
so you go back and add that in.

00:01:04.280 --> 00:01:08.030
Then, you test your function with another edge case you forgot to

00:01:08.030 --> 00:01:12.655
consider and edit your function again to fix this.

00:01:12.655 --> 00:01:15.855
Instead of doing all of this back and forth,

00:01:15.855 --> 00:01:20.150
you can try to create a test that checks for all the different scenarios and

00:01:20.150 --> 00:01:24.780
edge case as you can think of before even starting to write your function.

00:01:24.780 --> 00:01:28.760
This way, when you do start implementing your function,

00:01:28.760 --> 00:01:32.960
you can run this test to get immediate feedback on whether it works or

00:01:32.959 --> 00:01:37.604
not in all the ways you can think of as you tweak your function.

00:01:37.605 --> 00:01:39.375
If your test passes,

00:01:39.375 --> 00:01:42.594
you know your implementation is done.

00:01:42.594 --> 00:01:45.079
In the future, when you refactor

00:01:45.079 --> 00:01:48.689
this function or make changes to other parts of your program,

00:01:48.689 --> 00:01:54.319
you can keep running this test to ensure your function still behaves as expected.

00:01:54.319 --> 00:01:57.799
This also helps ensure that your function behavior

00:01:57.799 --> 00:02:01.155
is repeatable regardless of external parameters,

00:02:01.155 --> 00:02:03.280
such as hardware and time.

00:02:03.280 --> 00:02:05.849
When you first start writing tests,

00:02:05.849 --> 00:02:08.989
you will be slow and you will be tempted to

00:02:08.990 --> 00:02:12.320
write implementation code before you write tests.

00:02:12.319 --> 00:02:15.199
Stick with it though and through practice,

00:02:15.199 --> 00:02:16.799
you will get faster.

00:02:16.800 --> 00:02:22.600
Eventually, you'll be able to write all kinds of tests in very little time.

