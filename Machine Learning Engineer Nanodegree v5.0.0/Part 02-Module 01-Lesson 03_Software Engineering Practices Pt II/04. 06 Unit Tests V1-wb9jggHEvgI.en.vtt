WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.569
Let's say you wanted to test a function that finds

00:00:03.569 --> 00:00:07.884
the nearest perfect square less than or equal to a certain number.

00:00:07.884 --> 00:00:09.900
Your first approach might be testing it

00:00:09.900 --> 00:00:14.050
interactively in a terminal or Jupyter notebook, like this.

00:00:14.050 --> 00:00:17.565
So first, we'll import the function from the file,

00:00:17.565 --> 00:00:20.205
and now, we'll start testing it with different values.

00:00:20.204 --> 00:00:22.144
So let's try five,

00:00:22.144 --> 00:00:27.004
that should return four since that's the nearest perfect square less than or equal to it.

00:00:27.004 --> 00:00:29.059
Let's try negative number,

00:00:29.059 --> 00:00:32.664
which should return zero, which does.

00:00:32.664 --> 00:00:34.975
Now, let's try an actual perfect square,

00:00:34.975 --> 00:00:38.560
nine which should return nine,

00:00:38.560 --> 00:00:40.359
and let's just try another one,

00:00:40.359 --> 00:00:42.164
23 that returns 16.

00:00:42.164 --> 00:00:46.390
So awesome. While this does test the function,

00:00:46.390 --> 00:00:49.755
it's still a poor way to test because it isn't repeatable,

00:00:49.755 --> 00:00:52.295
requires you to type these in manually,

00:00:52.295 --> 00:00:55.969
and doesn't tell you whether it's returning the correct answers.

00:00:55.969 --> 00:00:59.030
Imagine you have hundreds of functions you need to test

00:00:59.030 --> 00:01:02.280
and test repeatedly while iterating on your project,

00:01:02.280 --> 00:01:07.710
you can see how inefficient and unreliable of a method this approach would be for that.

00:01:07.709 --> 00:01:12.639
After this, you may consider putting your test code into a file to make it repeatable,

00:01:12.640 --> 00:01:14.500
and end up writing this.

00:01:14.500 --> 00:01:17.810
This is better because your test code is now on a file that you

00:01:17.810 --> 00:01:21.430
can run to repeat the same tests without much work,

00:01:21.430 --> 00:01:24.635
but it's still not telling you whether it's getting the right answers.

00:01:24.635 --> 00:01:26.015
You'd still have to check,

00:01:26.015 --> 00:01:27.730
five, the last one's four,

00:01:27.730 --> 00:01:29.500
that's correct, negative 12, oh yeah,

00:01:29.500 --> 00:01:31.855
that's zero. Still pretty slow.

00:01:31.855 --> 00:01:35.725
If we print the correct expected result with each answer,

00:01:35.724 --> 00:01:39.169
now, we do have a clear way to check out the results.

00:01:39.170 --> 00:01:41.510
However, we still need to check these results

00:01:41.510 --> 00:01:45.995
manually to compare what they returned and the correct answer yourself.

00:01:45.995 --> 00:01:50.050
This is not ideal if we're running a large amount of unit tests often.

00:01:50.049 --> 00:01:56.049
We can use assert to ensure that each result is identical to the correct answer.

00:01:56.049 --> 00:01:59.914
This is much better since it checks our results automatically.

00:01:59.915 --> 00:02:03.335
However, look what happens when something fails.

00:02:03.334 --> 00:02:08.180
Let's say, I didn't put this equal sign and I only put a less than sign.

00:02:08.180 --> 00:02:11.500
The result is messy and it stops the program.

00:02:11.500 --> 00:02:14.810
Ideally, running a test should run all the unit tests

00:02:14.810 --> 00:02:18.215
and let you know which ones failed and which ones succeeded.

00:02:18.215 --> 00:02:21.185
This can't happen if it stops with every failure.

00:02:21.185 --> 00:02:23.955
Any tests that happened after this one failed,

00:02:23.955 --> 00:02:25.830
we can't see the results of.

00:02:25.830 --> 00:02:29.860
In addition, the message where failure is messier than it needs to be.

00:02:29.860 --> 00:02:32.570
Fortunately, there are great tools available in

00:02:32.569 --> 00:02:36.400
Python that we will use to create effective unit tests.

