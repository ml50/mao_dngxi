WEBVTT
Kind: captions
Language: zh-CN

00:00:04.490 --> 00:00:08.455
软件程序崩溃是非常明显的

00:00:08.455 --> 00:00:11.560
你会收到报错 程序会停止运行

00:00:11.560 --> 00:00:16.380
但是 在数据科学过程中可能会出现许多问题

00:00:16.379 --> 00:00:21.504
不像崩溃程序的功能错误那样容易检测到

00:00:21.504 --> 00:00:25.679
所有代码都能看似完全顺利运行

00:00:25.679 --> 00:00:29.554
意识不到对某些值进行了错误编码

00:00:29.554 --> 00:00:32.185
或者没有恰当地选择特征

00:00:32.185 --> 00:00:38.365
或者存在意外的数据打破了统计模型所基于的假设

00:00:38.365 --> 00:00:42.890
这些错误更难以发现 因为除了代码质量

00:00:42.890 --> 00:00:48.520
你还必须检查分析的质量和准确性

00:00:48.520 --> 00:00:52.910
因此 你必须进行适当的测试

00:00:52.909 --> 00:00:57.875
来避免意料之外的情况 使自己能够对结果足够自信

00:00:57.875 --> 00:01:02.990
实际上测试已经被证明有很多好处

00:01:02.990 --> 00:01:08.200
以至于专门有一种基于测试的开发过程 称为测试驱动开发

00:01:08.200 --> 00:01:12.140
在这种开发过程中

00:01:12.140 --> 00:01:16.579
你需要在编写代码之前 先写好测试用例

00:01:16.579 --> 00:01:18.935
我们稍后会详细讨论

00:01:18.935 --> 00:01:25.400
现在先进行一些编写测试的练习 尤其是单元测试

00:01:25.400 --> 00:01:29.960
单元测试是指涵盖某个代码单元的测试

00:01:29.959 --> 00:01:34.694
代码单元通常是指独立于程序其余部分的单个函数

00:01:34.694 --> 00:01:39.369
首先你将学习如何使用纯 Python 编写单元测试

00:01:39.370 --> 00:01:44.010
然后学习如何使用其他工具来改善

00:01:44.010 --> 00:01:50.040
最后你将看到数据科学中的测试类型示例

