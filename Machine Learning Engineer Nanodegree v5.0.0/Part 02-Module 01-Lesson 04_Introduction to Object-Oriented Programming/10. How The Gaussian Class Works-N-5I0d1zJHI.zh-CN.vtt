WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.094
首先 我们来看看我写的一个 Python 类 叫做 Gaussian

00:00:05.094 --> 00:00:07.665
然后你将自己编写该类

00:00:07.665 --> 00:00:12.484
该类有一个用于实例化对象的 init 方法

00:00:12.484 --> 00:00:15.028
里面有三个属性

00:00:15.028 --> 00:00:19.160
分别是均值 标准偏差和用于存储数据的空列表

00:00:19.160 --> 00:00:22.739
注意在 init 函数里 均值的默认值为 0

00:00:22.739 --> 00:00:26.265
标准偏差的默认值为 1

00:00:26.265 --> 00:00:28.980
和任何其他 Python 函数一样

00:00:28.980 --> 00:00:31.875
你可以指定输入的默认值

00:00:31.875 --> 00:00:36.509
此外注意 在 init 方法里 data 属性没有输入值

00:00:36.509 --> 00:00:41.384
类的属性不是一定要包含在 init 输入变量中

00:00:41.384 --> 00:00:44.450
然后我定义了其他方法

00:00:44.450 --> 00:00:48.950
用于计算数据均值

00:00:48.950 --> 00:00:52.255
计算数据的标准偏差

00:00:52.255 --> 00:00:57.664
以及读取数据文件的方法 叫做 read_data_file

00:00:57.664 --> 00:01:00.875
还有几个其他方法 稍后我会讲解的

00:01:00.875 --> 00:01:03.649
查看 read_data_file 方法后会发现

00:01:03.649 --> 00:01:06.409
该方法将从文件里读取数据

00:01:06.409 --> 00:01:09.828
然后将数据存储在 data 属性中

00:01:09.828 --> 00:01:14.420
read_data_file 方法有个特别之处

00:01:14.420 --> 00:01:20.510
这段代码会调用 self 变量的 calculate_mean 和 calculate_stdev 方法

00:01:20.510 --> 00:01:22.938
然后将结果

00:01:22.938 --> 00:01:26.805
存储在 mean 和 stdev 属性中

00:01:26.805 --> 00:01:30.843
self 变量不仅使你能够访问类属性

00:01:30.843 --> 00:01:32.715
而且能够访问类方法

00:01:32.715 --> 00:01:36.415
Gaussian 类还有几个其他方法

00:01:36.415 --> 00:01:40.325
其中一个方法使用 matplotlib 软件包绘制直方图

00:01:40.325 --> 00:01:42.980
还有一个函数会输出

00:01:42.980 --> 00:01:46.400
概率密度函数的结果

00:01:46.400 --> 00:01:48.799
另一个函数会绘制归一化直方图

00:01:48.799 --> 00:01:52.665
并绘制在同一 x 值范围内的概率密度函数图

00:01:52.665 --> 00:01:56.915
这些示例演示了如何使用类方法

00:01:56.915 --> 00:02:02.810
接下来 我将使用该类实例化一个叫做 gaussian_one 的对象

00:02:02.810 --> 00:02:05.593
现在我将运行该代码单元格

00:02:05.593 --> 00:02:08.223
因为我没有指定任何参数

00:02:08.223 --> 00:02:11.675
因此将使用默认均值和标准偏差

00:02:11.675 --> 00:02:18.360
Jupyter Notebook 所在的同一文件夹里有一个叫做 numbers.txt 的数据文件

00:02:18.360 --> 00:02:21.468
我从该文件里读取数据

00:02:21.468 --> 00:02:24.460
然后使用其他方法输出几个图形

00:02:24.460 --> 00:02:26.264
在这节课的下一部分

00:02:26.264 --> 00:02:28.490
我将给出该 Gaussian 类的框架版本

00:02:28.490 --> 00:02:31.628
其中有几个部分标记为 TODO

00:02:31.628 --> 00:02:33.288
看起来是这样的

00:02:33.288 --> 00:02:35.544
你的任务是填写代码

00:02:35.544 --> 00:02:39.110
视频里已经包含了答案代码

00:02:39.110 --> 00:02:41.310
但是尽量不要偷看视频

00:02:41.310 --> 00:02:43.788
请阅读 TODO 部分的注释

00:02:43.788 --> 00:02:46.490
然后自己编写 Gaussian 类

00:02:46.490 --> 00:02:48.889
你将使用的文件还包含单元测试

00:02:48.889 --> 00:02:52.425
你可以运行这些测试 检查代码是否正确

00:02:52.425 --> 00:02:54.370
它们位于文件底部

00:02:54.370 --> 00:02:56.090
我演示下操作方式

00:02:56.090 --> 00:02:58.818
如果运行这里的第一个代码单元格

00:02:58.818 --> 00:03:01.250
那么会执行第二个代码单元格

00:03:01.250 --> 00:03:04.625
系统将显示所有单元测试的结果

00:03:04.625 --> 00:03:07.003
这里显示了几个错误

00:03:07.003 --> 00:03:08.835
以及几个失败的测试

00:03:08.835 --> 00:03:12.593
因此我需要重新修改代码

00:03:12.593 --> 00:03:16.930
让你编写你已经见过的代码似乎有点傻

00:03:16.930 --> 00:03:19.460
但是有助于巩固

00:03:19.460 --> 00:03:22.413
Python 面向对象编程知识

00:03:22.413 --> 00:03:26.300
在这节课结束时 你将完成一个更有挑战的编程任务

00:03:26.300 --> 00:03:31.085
暂时先看看自己能重新编写多少 Gaussian 类代码

00:03:31.085 --> 00:03:33.842
但是别担心 我还提供了代码的答案文件

