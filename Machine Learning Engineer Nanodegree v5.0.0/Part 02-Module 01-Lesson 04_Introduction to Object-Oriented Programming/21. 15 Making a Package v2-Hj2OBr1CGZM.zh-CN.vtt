WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.940
你可能曾经做过这样的操作

00:00:01.940 --> 00:00:05.120
使用 pip install 来安装 Python 软件包

00:00:05.120 --> 00:00:09.419
比如说 如果你想要安装 scikit-learn 软件包

00:00:09.419 --> 00:00:15.714
你会进入终端 然后输入 pip install scikit-learn

00:00:15.714 --> 00:00:21.920
pip install 命令会在 PyPI 在线存储库中下载软件包

00:00:21.920 --> 00:00:26.385
在这个示例中 scikit-learn 已经安装了 所以命令只会告知一下

00:00:26.385 --> 00:00:28.554
在这节课的剩余部分

00:00:28.554 --> 00:00:33.015
你将构建一个 Python 软件包并将其上传到 PyPI 中

00:00:33.015 --> 00:00:36.079
首先需要先将软件包准备好

00:00:36.079 --> 00:00:39.184
使其可以在本地使用 pip 安装

00:00:39.185 --> 00:00:43.615
我将展示一下如何设置文件才可以被 pip 安装

00:00:43.615 --> 00:00:45.469
在屏幕的左手边

00:00:45.469 --> 00:00:48.619
可以看到我现在所在目录中包含

00:00:48.619 --> 00:00:52.969
distributions 文件夹和 setup.py 文件

00:00:52.969 --> 00:00:56.174
先来看一下 distributions 文件夹

00:00:56.174 --> 00:00:59.689
双击打开 这个文件夹包含了

00:00:59.689 --> 00:01:04.414
之前编写的高斯分布和通用分布类

00:01:04.415 --> 00:01:07.460
区别在于 现在这个文件夹是一个正式的 Python 软件包了

00:01:07.459 --> 00:01:11.509
因为现在文件夹中包含了一个 init 文件

00:01:11.510 --> 00:01:13.885
软件包需要一个 init 文件

00:01:13.885 --> 00:01:18.830
与之前的高斯分布和通用分布文件相比 只有一行代码存在差异

00:01:18.829 --> 00:01:24.004
打开 Gaussiandistributions.py 文件

00:01:24.004 --> 00:01:26.659
可以看到第三行

00:01:26.659 --> 00:01:31.379
我导入了 Generaldistribution.py 文件中的 Distribution 类

00:01:31.379 --> 00:01:34.569
在 Generaldistribution 之前多了一个点

00:01:34.569 --> 00:01:37.609
这个点是 Python3 的要求

00:01:37.609 --> 00:01:40.599
如果你使用的是 Python2 则不需要

00:01:40.599 --> 00:01:44.299
另一方面 init 是新添加的文件

00:01:44.299 --> 00:01:49.060
init 文件告诉 Python 这个目录中包含了一个软件包

00:01:49.060 --> 00:01:54.435
软件包必须要包含 init 文件 即使该文件中完全空白

00:01:54.435 --> 00:01:57.019
init 文件中的代码会在

00:01:57.019 --> 00:02:00.700
你导入该软件包时运行

00:02:00.700 --> 00:02:03.725
在这个案例中 init 文件

00:02:03.724 --> 00:02:07.314
从 Gaussiandistribution 模块中导入了 Gaussian 类

00:02:07.314 --> 00:02:12.034
添加这行代码是因为 我想要通过编写 from distributions import Gaussian 代码

00:02:12.034 --> 00:02:16.924
就能直接导入 Gaussian 类

00:02:16.925 --> 00:02:18.920
你将在稍后了解这句话的意思

00:02:18.919 --> 00:02:22.219
如果我没有在 init 文件中包括任何代码

00:02:22.219 --> 00:02:24.919
软件包仍然可以正常运行 但是任何使用该包的程序

00:02:24.919 --> 00:02:28.309
导入 Gaussian 类都会更麻烦

00:02:28.310 --> 00:02:34.594
需要编写代码 from distributions.Gaussiandistribution import Gaussian

00:02:34.594 --> 00:02:39.284
这就像创建了一个直接导入 Gaussian 类的快捷方式

00:02:39.284 --> 00:02:42.724
回到目录的上一级

00:02:42.724 --> 00:02:47.930
与 distributions 同级的目录中包含了一个 setup.py 文件

00:02:47.930 --> 00:02:50.915
这个文件是 pip 安装所必需的

00:02:50.914 --> 00:02:53.590
pip 会自动查找该文件

00:02:53.590 --> 00:02:57.110
打开文件 你会看到其中

00:02:57.110 --> 00:03:00.860
包含了软件包的信息或元数据

00:03:00.860 --> 00:03:02.565
比如包名

00:03:02.564 --> 00:03:06.185
版本 描述等等

00:03:06.185 --> 00:03:08.504
我们开始安装这个软件包吧!

00:03:08.504 --> 00:03:10.115
要安装该包

00:03:10.115 --> 00:03:14.775
先进入终端 确保你所在的目录是 setup.py 文件所在目录

00:03:14.775 --> 00:03:22.550
在这个示例中 我需要修改目录 输入 cd python_package_example

00:03:22.550 --> 00:03:28.740
现在我就在包含 distributions 软件包和 setup.py 文件的目录中了

00:03:28.740 --> 00:03:32.300
在终端中 输入 pip install .

00:03:32.300 --> 00:03:37.770
然后点击回车 这个点告诉 pip 在当前目录下查找 setup 文件

00:03:37.770 --> 00:03:41.060
搞定 Python 软件包安装好了

00:03:41.060 --> 00:03:45.500
现在我可以在我的 Python 代码中使用该软件包了

00:03:45.500 --> 00:03:47.735
我要打开一个新的终端

00:03:47.735 --> 00:03:50.210
注意 我现在已经不在

00:03:50.210 --> 00:03:52.790
python_package_example 目录下

00:03:52.789 --> 00:03:56.030
这没关系 因为我们已经安装好了软件包

00:03:56.030 --> 00:03:58.610
输入 python 进入

00:03:58.610 --> 00:04:03.385
Python 解释器 然后导入 Gaussian 类

00:04:03.384 --> 00:04:09.409
输入 from distributions import Gaussian 然后点击回车

00:04:09.409 --> 00:04:13.009
现在我可以访问 Gaussian 类 所以可以写这样的代码

00:04:13.009 --> 00:04:17.584
gaussian_one = Gaussian(10,5)

00:04:17.584 --> 00:04:21.589
使用均值 10 和标准偏差 5 来初始化该分布

00:04:21.589 --> 00:04:23.709
点击回车 现在看到

00:04:23.709 --> 00:04:27.394
我可以像之前的方式一样

00:04:27.394 --> 00:04:32.024
使用 Gaussian 类了 你也可以访问其中的所有方法

00:04:32.024 --> 00:04:34.219
你可能会问

00:04:34.220 --> 00:04:37.485
这个安装包到底安装在哪里了?

00:04:37.485 --> 00:04:41.110
答案就是 你的系统中 pip 安装软件包的位置

00:04:41.110 --> 00:04:43.790
如果你仍然在 Python 解释器中

00:04:43.790 --> 00:04:49.450
输入导入软件包的代码比如 import distributions

00:04:49.449 --> 00:04:55.909
你可以输入 distributions.__file__

00:04:55.910 --> 00:04:59.900
点击回车 这将打印出软件包安装的位置

00:04:59.899 --> 00:05:04.214
这就是本地创建 Python 软件包以及本地安装的全过程

00:05:04.214 --> 00:05:05.964
在这节课的最后一部分

00:05:05.964 --> 00:05:10.199
你将扩展该软件包 创建一个二项分布类

00:05:10.199 --> 00:05:12.949
然后你可以将软件包上传到 PyPI

00:05:12.949 --> 00:05:15.814
这样所有人都可以下载并安装你的软件包

00:05:15.814 --> 00:05:19.610
如果你决定在本地计算机上安装这个软件包

00:05:19.610 --> 00:05:23.220
你应该要先创建一个虚拟环境

00:05:23.220 --> 00:05:28.425
虚拟环境就好像是一个用来安装 Python 软件包的孤岛

00:05:28.425 --> 00:05:33.740
这样你就不会影响到计算机的默认 Python 安装

00:05:33.740 --> 00:05:38.199
我会在下一页给出设置虚拟环境的说明

