WEBVTT
Kind: captions
Language: zh-CN

00:00:04.370 --> 00:00:10.125
这节课还要介绍一个面向对象概念 继承

00:00:10.125 --> 00:00:13.275
举个实际的例子 这样更容易理解这一概念

00:00:13.275 --> 00:00:17.385
例如之前的衬衫例子

00:00:17.385 --> 00:00:19.640
Shirt 有四个属性

00:00:19.640 --> 00:00:23.234
color size style 和 price

00:00:23.234 --> 00:00:25.495
Shirt 还有两个方法

00:00:25.495 --> 00:00:27.350
分别是更改价格方法

00:00:27.350 --> 00:00:30.454
和计算折扣价方法

00:00:30.454 --> 00:00:32.215
随着商店的扩张

00:00:32.215 --> 00:00:37.289
可能会出售其他服饰 例如裤子 袜子和裙子

00:00:37.289 --> 00:00:42.908
这些服饰和衬衫对象具有一些相同的属性和方法

00:00:42.908 --> 00:00:47.270
它们可能都具有 color size style 和 price

00:00:47.270 --> 00:00:53.439
可能都会使用函数来更改价格和计算折扣价

00:00:53.439 --> 00:00:59.548
如果它们都具有很多共同点 为何要分别编写不同的类呢？

00:00:59.548 --> 00:01:03.024
你可以编写一个 Clothing 父类

00:01:03.024 --> 00:01:05.430
然后 Pants Socks

00:01:05.430 --> 00:01:07.674
Dresses 和 Shirts 类

00:01:07.674 --> 00:01:12.250
等就可以继承 Clothing 类的属性和方法

00:01:12.250 --> 00:01:16.165
看起来就像一个族谱 Clothing 是父母

00:01:16.165 --> 00:01:19.355
Pants Socks Dresses 和 Shirts

00:01:19.355 --> 00:01:21.578
是子女

00:01:21.578 --> 00:01:23.328
这么做的一个优势是

00:01:23.328 --> 00:01:26.510
当你添加衬衫等更多服饰类型时

00:01:26.510 --> 00:01:31.245
你可以轻松地添加一个继承 Clothing 类属性的新类

00:01:31.245 --> 00:01:33.995
如果你想添加新的属性呢

00:01:33.995 --> 00:01:37.525
例如 material 表示服饰材质

00:01:37.525 --> 00:01:40.140
是棉质 尼龙或其他材质

00:01:40.140 --> 00:01:42.174
你只需

00:01:42.174 --> 00:01:44.825
向 Clothing 类添加 material 属性

00:01:44.825 --> 00:01:48.938
所有子类将自动继承新属性

00:01:48.938 --> 00:01:53.245
这样代码编写和维护起来更高效

00:01:53.245 --> 00:01:57.099
接下来我将介绍继承的 Python 语法

00:01:57.099 --> 00:02:02.099
然后你将向 Gaussian 类添加继承代码

