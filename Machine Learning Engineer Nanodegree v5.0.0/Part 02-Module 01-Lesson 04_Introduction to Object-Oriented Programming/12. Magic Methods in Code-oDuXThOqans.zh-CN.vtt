WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.895
除了在上个视频中演示的方法之外

00:00:02.895 --> 00:00:05.894
我还向 Gaussian 类添加了两个方法

00:00:05.894 --> 00:00:11.278
分别是 add 和 repr (represent 的缩写 意思是表现)

00:00:11.278 --> 00:00:14.108
它们都称为魔术方法

00:00:14.108 --> 00:00:16.859
看起来熟悉吗？

00:00:16.859 --> 00:00:20.094
是的 因为你已经用过一个魔术方法 即 init 方法

00:00:20.094 --> 00:00:25.405
init 方法是一个魔术方法 负责初始化新的对象

00:00:25.405 --> 00:00:31.035
魔术方法使你能够重写和自定义默认 Python 行为

00:00:31.035 --> 00:00:37.475
例如 init 方法使你能够自定义 Python 实例化对象的方式

00:00:37.475 --> 00:00:41.384
add 方法会重写加号的行为

00:00:41.384 --> 00:00:45.173
我将执行包含 Gaussian 类的代码单元格

00:00:45.173 --> 00:00:49.075
我在这里实例化了两个 Gaussian 对象

00:00:49.075 --> 00:00:50.554
然后将它们加到一起

00:00:50.554 --> 00:00:55.090
Python 知道如何将两个浮点数或整数相加

00:00:55.090 --> 00:00:58.939
这些运算在 Python 安装包中已经定义好了

00:00:58.939 --> 00:01:01.993
但是将 Gaussian 与 Gaussian 相加

00:01:01.993 --> 00:01:03.835
在 Python 中没有任何意义

00:01:03.835 --> 00:01:07.349
因此这段代码应该产生报错 我运行下看看

00:01:07.349 --> 00:01:10.245
代码没有产生报错

00:01:10.245 --> 00:01:14.530
这是因为我定义了将两个高斯函数相加的行为

00:01:14.530 --> 00:01:18.075
向上滚动到 add 魔术方法部分

00:01:18.075 --> 00:01:19.620
看看它的原理

00:01:19.620 --> 00:01:23.650
该函数有两个输入 分别是 self 和 other

00:01:23.650 --> 00:01:27.319
self 是指加号左边的对象

00:01:27.319 --> 00:01:30.828
other 是指加号右侧的对象

00:01:30.828 --> 00:01:34.745
然后定义将这两个对象相加的含义

00:01:34.745 --> 00:01:38.510
将两个 Gaussian 相加是指对均值求和

00:01:38.510 --> 00:01:42.483
并计算标准偏差平方和的平方根

00:01:42.483 --> 00:01:44.435
然后代码用新的均值和新的标准偏差

00:01:44.435 --> 00:01:49.120
实例化一个新的 Gaussian 对象

00:01:49.120 --> 00:01:50.659
并返回该新对象

00:01:50.659 --> 00:01:54.885
再来看看 repr 方法

00:01:54.885 --> 00:02:00.608
在 Python 中 如果一行代码只有一个变量 会怎样？

00:02:00.608 --> 00:02:04.409
Python 将输出该变量的值

00:02:04.409 --> 00:02:07.063
假设 x=5

00:02:07.063 --> 00:02:11.610
仅运行 x  Python 将输出值 5

00:02:11.610 --> 00:02:15.735
repr 方法会控制输出内容

00:02:15.735 --> 00:02:17.840
这段代码重写了

00:02:17.840 --> 00:02:20.360
默认的 repr 行为

00:02:20.360 --> 00:02:23.658
输出 Gaussian 对象的均值和标准偏差

00:02:23.658 --> 00:02:27.155
我将运行这行代码并看看结果如何

00:02:27.155 --> 00:02:30.175
Python 有几十个魔术方法

00:02:30.175 --> 00:02:34.300
你可以重写加号 减号 除号

00:02:34.300 --> 00:02:39.990
乘号 大于 小于符号 等等

00:02:39.990 --> 00:02:42.270
为了练习使用魔术方法

00:02:42.270 --> 00:02:46.443
你将回到 Gaussian 方法并重新编写刚刚查看的代码

00:02:46.443 --> 00:02:49.805
如果你已经厌烦了重新编写代码 别担心

00:02:49.805 --> 00:02:52.908
很快你会将此 Gaussian 模块转换成实际软件包

00:02:52.908 --> 00:02:54.654
然后添加更多功能

