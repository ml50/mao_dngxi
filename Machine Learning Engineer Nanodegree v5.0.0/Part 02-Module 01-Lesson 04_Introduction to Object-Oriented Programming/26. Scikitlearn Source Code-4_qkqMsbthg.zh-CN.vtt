WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.859
我们接下来开始浏览 scikit-learn 的源代码

00:00:03.859 --> 00:00:06.599
这就是为什么我希望你学习面向对象编程

00:00:06.599 --> 00:00:10.699
以及如何制作 Python 软件包的原因

00:00:10.699 --> 00:00:15.515
如果你想要理解 Pandas SciPy

00:00:15.515 --> 00:00:18.445
NumPy 或者 scikit-learn 这些软件包

00:00:18.445 --> 00:00:23.160
至少需要理解面向对象编程的基础知识

00:00:23.160 --> 00:00:26.375
当我们浏览 scikit-learn 源代码时

00:00:26.375 --> 00:00:31.339
你会看到一些内容与这节课做的练习非常相似

00:00:31.339 --> 00:00:36.079
包括 import 语句 类和继承

00:00:36.079 --> 00:00:41.724
你也会注意到一些我们还没有涉及到的语法 比如 @ 符号、mixin

00:00:41.725 --> 00:00:43.895
以及多重继承的示例

00:00:43.895 --> 00:00:47.970
其中类继承于两个或多个父类

00:00:47.969 --> 00:00:52.129
面向对象编程是非常大的课题

00:00:52.130 --> 00:00:56.260
Python 拥有非常多你还未见过的功能

00:00:56.259 --> 00:01:01.704
打开谷歌 搜索 scikit-learn 源代码

00:01:01.704 --> 00:01:05.284
可以看到这些代码托管在 GitHub 上

00:01:05.284 --> 00:01:07.009
这就是存储的代码库

00:01:07.010 --> 00:01:11.695
打开 sklearn 文件夹 看看能发现什么

00:01:11.694 --> 00:01:14.869
嗯 我看到了 linear_model 文件夹

00:01:14.870 --> 00:01:19.265
我猜其中存放了关于线性回归的代码

00:01:19.265 --> 00:01:22.674
最上面是 tests 文件夹

00:01:22.674 --> 00:01:25.849
可以看出编写测试代码

00:01:25.849 --> 00:01:31.034
在 Python 软件包或者任何程序中都是重要的一部分

00:01:31.034 --> 00:01:32.840
打开 tests 文件夹

00:01:32.840 --> 00:01:34.865
可以浏览所有不同的测试

00:01:34.864 --> 00:01:37.295
针对各种不同的功能

00:01:37.295 --> 00:01:40.564
回到上一级 linear_model 文件夹

00:01:40.564 --> 00:01:43.549
因为这里有一个 init 文件

00:01:43.549 --> 00:01:47.349
你可以了解到 linear_model 实际上是一个软件包

00:01:47.349 --> 00:01:51.579
打开这个文件 代码看起来有些熟悉

00:01:51.579 --> 00:01:56.444
init 文件导入了软件包每个模块中的类

00:01:56.444 --> 00:02:00.349
这等同于在 distributions 软件包的 init 文件中

00:02:00.349 --> 00:02:04.469
创建类名的快捷方式 再次返回

00:02:04.469 --> 00:02:06.689
这次我们打开 base.py

00:02:06.689 --> 00:02:08.319
看一下有什么代码

00:02:08.319 --> 00:02:14.900
该文件的开头有一些注释 然后是很多 import 语句

00:02:14.900 --> 00:02:20.680
所以 base.py 文件中使用了很多其他的模块或软件包

00:02:20.680 --> 00:02:24.870
接下来是一个叫做 SPARSE_INTERCEPTS_DECAY 的变量

00:02:24.870 --> 00:02:28.504
还有一个叫做 make_dataset 的函数

00:02:28.504 --> 00:02:31.069
正如我在课程开始时提到的

00:02:31.069 --> 00:02:37.180
Python 模块中可以包含变量、函数、类的任意组合

00:02:37.180 --> 00:02:42.064
滚动向下 可以看到一些比较高级的内容

00:02:42.064 --> 00:02:46.359
这个 @ 符号被称为装饰器

00:02:46.360 --> 00:02:48.700
你可能还没有见过

00:02:48.699 --> 00:02:53.149
如果你想要了解装饰器相关 可以参考下方的资料链接

00:02:53.150 --> 00:02:55.520
再向下滚动

00:02:55.520 --> 00:02:58.920
看到了模块中的第一个类

00:02:58.919 --> 00:03:01.514
名称是 LinearModel

00:03:01.514 --> 00:03:07.839
这个类继承自两个父类 ABCMeta 和 BaseEstimator

00:03:07.840 --> 00:03:11.795
然后你可以看到 LinearModel 类有几个方法

00:03:11.794 --> 00:03:17.299
_decision_function 前面的下划线只是一种方便的用法

00:03:17.300 --> 00:03:20.165
表示该函数仅在类内部使用

00:03:20.164 --> 00:03:23.854
而不是由实例化对象使用

00:03:23.854 --> 00:03:27.905
如果你想要参与贡献这类软件库

00:03:27.905 --> 00:03:29.860
请查看 Issues 页面

00:03:29.860 --> 00:03:32.195
可以在 GitHub 页面的上部找到入口

00:03:32.194 --> 00:03:34.289
这里就是 Issues 点击进去

00:03:34.289 --> 00:03:39.169
你可以阅读有关问题的信息 看看是否有什么可以贡献

00:03:39.169 --> 00:03:41.899
我也在下方给出了

00:03:41.900 --> 00:03:45.135
如何参与贡献 GitHub 项目的指导说明链接

00:03:45.134 --> 00:03:50.000
scikit-learn 是一个大型的软件包 其中包含了大量的代码

00:03:50.000 --> 00:03:52.490
但是不用觉得不知所措

00:03:52.490 --> 00:03:55.520
你要意识到像这样的软件包是随着时间的推移而逐渐建立的

00:03:55.520 --> 00:03:59.490
各种各样的人都在为不同的部分做出贡献

00:03:59.490 --> 00:04:02.555
在课程中编写的基础的软件包

00:04:02.555 --> 00:04:05.575
就是这种大型软件包工作的基本原理

00:04:05.574 --> 00:04:09.589
你可以从仅有几个模块的小的软件包开始

00:04:09.590 --> 00:04:12.400
随着时间的推移添加越来越多的功能

