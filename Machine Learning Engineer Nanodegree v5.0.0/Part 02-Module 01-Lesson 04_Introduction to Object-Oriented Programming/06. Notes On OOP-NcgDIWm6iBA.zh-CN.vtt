WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.410
关于面向对象编程 我想提几点注意事项

00:00:04.410 --> 00:00:06.190
在这节课的第一部分

00:00:06.190 --> 00:00:09.355
你将在 Jupyter Notebook 中完成编程练习

00:00:09.355 --> 00:00:11.663
但是在编写软件时

00:00:11.663 --> 00:00:16.210
通常不会在 Jupyter Notebook 中编写面向对象程序

00:00:16.210 --> 00:00:20.969
而是将代码分成独立的 Python 脚本

00:00:20.969 --> 00:00:22.920
在这节课的第二部分

00:00:22.920 --> 00:00:24.640
你将使代码模块化

00:00:24.640 --> 00:00:29.265
现在我将大致介绍接下来将用到的工具

00:00:29.265 --> 00:00:34.500
如果你没有在其他优达学城课程中见过这个界面的话

00:00:34.500 --> 00:00:36.155
我来介绍下 它叫做 workspace

00:00:36.155 --> 00:00:39.929
它内嵌在了教室中 稍后你将用到它

00:00:39.929 --> 00:00:45.090
这是一个 Linux Ubuntu 环境 你可以在该环境里编写和执行 Python 代码

00:00:45.090 --> 00:00:50.255
我将 Shirt 类代码放在了其中一个文件里 并将该文件命名为 shirt.py

00:00:50.255 --> 00:00:55.634
现在我将编写另一个 Python 脚本 其中会使用 Shirt 类的代码

00:00:55.634 --> 00:00:57.283
我在同一个文件夹里

00:00:57.283 --> 00:01:01.655
创建了另一个叫做 example.py 的文件

00:01:01.655 --> 00:01:05.685
我想在 example.py 文件里使用 Shirt 类

00:01:05.685 --> 00:01:12.468
首先 我需要导入 Shirt 类 输入 from shirt import Shirt

00:01:12.468 --> 00:01:16.209
小写的 shirt 是指 shirt.py 文件

00:01:16.209 --> 00:01:21.019
首字母大写的 Shirt 是指在此文件里定义的类

00:01:21.019 --> 00:01:23.959
我可以将该文件和类命名为任何名称

00:01:23.959 --> 00:01:25.819
它们不是必须要采用相同的名称

00:01:25.819 --> 00:01:27.900
我这么命名只是为了方便

00:01:27.900 --> 00:01:31.400
现在我可以像在之前的练习中一样

00:01:31.400 --> 00:01:35.090
在 example.py 中使用 Shirt 类

00:01:35.090 --> 00:01:38.180
区别只是现在的代码已经模块化

00:01:38.180 --> 00:01:40.924
我将编写一些利用 Shirt 类的代码

00:01:40.924 --> 00:01:44.299
最后 我将在终端里运行代码

00:01:44.299 --> 00:01:46.879
首先 我将更改我所在的目录

00:01:46.879 --> 00:01:49.709
确保我位于包含这些 Python 文件的目录中

00:01:49.709 --> 00:01:54.129
然后输入 python example.py

00:01:54.129 --> 00:01:58.069
输出结果是在代码里已设定的输出语句

00:01:58.069 --> 00:01:59.665
接下来

00:01:59.665 --> 00:02:05.540
我将介绍如何在 Python 中访问和更改属性值

00:02:05.540 --> 00:02:09.479
Shirt 类具有一个更改衬衫价格的方法

00:02:09.479 --> 00:02:17.780
例如 example.py 文件第 9 行的代码 shirt_two.change_price(45)

00:02:17.780 --> 00:02:25.810
在 Python 里还可以使用以下语法更改属性值

00:02:25.810 --> 00:02:33.525
shirt_one.color = 'red'  shirt_one.size = 'L'

00:02:33.525 --> 00:02:37.098
抱歉 重新修改下 shirt_one 已经是红色 因此改成黄色

00:02:37.098 --> 00:02:42.288
并且 shirt_one.price = 43

00:02:42.288 --> 00:02:46.115
与使用方法访问和显示属性相比

00:02:46.115 --> 00:02:50.645
直接访问属性存在不足之处

00:02:50.645 --> 00:02:53.223
对于面向对象编程来说

00:02:53.223 --> 00:02:58.003
Python 跟其他编程语言有点不同

00:02:58.003 --> 00:03:00.604
例如 在 C++ 等语言中

00:03:00.604 --> 00:03:03.860
你可以设置不允许

00:03:03.860 --> 00:03:07.938
直接更改或访问某个对象的属性

00:03:07.938 --> 00:03:10.610
Python 就没有这类设置 它允许直接访问/获取属性

00:03:10.610 --> 00:03:13.250
为何通过方法更改值

00:03:13.250 --> 00:03:16.574
比直接更改值更好？

00:03:16.574 --> 00:03:21.193
从长远来看 通过方法更改值使代码更灵活

00:03:21.193 --> 00:03:24.710
比如 如果计量单位变了 该怎么办？

00:03:24.710 --> 00:03:29.413
假设商店一开始采用的是美元 现在需要采用欧元

00:03:29.413 --> 00:03:35.688
假设你直接更改第 14 行的属性

00:03:35.688 --> 00:03:37.788
现在忽然需要使用欧元

00:03:37.788 --> 00:03:42.090
我只能手动修改 例如改成 38 欧元

00:03:42.090 --> 00:03:46.805
所有直接访问价格属性的地方 都需要这样的手动修改

00:03:46.805 --> 00:03:51.625
但是如果使用方法的话 例如 change_price 方法

00:03:51.625 --> 00:03:53.889
那么只需转到 Shirt 类

00:03:53.889 --> 00:03:57.905
更改原始方法 并且更改一次就够了

00:03:57.905 --> 00:04:04.593
我只需乘以 0.81 就能将所有价格从美元换算成欧元

00:04:04.593 --> 00:04:07.639
现在回到 example.py

00:04:07.639 --> 00:04:09.830
对于第 9 行来说

00:04:09.830 --> 00:04:13.843
不需要手动地将价格从美元改成欧元

00:04:13.843 --> 00:04:18.838
因为 Shirt 类会自动进行换算

00:04:18.838 --> 00:04:22.990
对于这门面向对象编程入门课程来说

00:04:22.990 --> 00:04:28.350
你不需要思考是直接更新属性还是使用方法更新

00:04:28.350 --> 00:04:32.814
但是 如果你决定深入学习面向对象编程

00:04:32.814 --> 00:04:36.500
尤其是 C++ 或 Java 等其他语言

00:04:36.500 --> 00:04:37.884
则需要考虑这方面的因素

