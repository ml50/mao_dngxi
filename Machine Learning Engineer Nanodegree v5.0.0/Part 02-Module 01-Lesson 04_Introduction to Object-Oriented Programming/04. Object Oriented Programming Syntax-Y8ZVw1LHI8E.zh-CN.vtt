WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.269
现在我们直接来讲解如何用 Python 编写类

00:00:04.269 --> 00:00:07.048
如果你之前没有接触过类

00:00:07.049 --> 00:00:09.493
语法可能会有点难懂

00:00:09.493 --> 00:00:12.564
我们将逐步讲解一段示例代码

00:00:12.564 --> 00:00:16.559
我将暂时使用 Jupyter Notebook 演示代码

00:00:16.559 --> 00:00:21.750
但之后你将使用 Python 脚本编写代码

00:00:21.750 --> 00:00:23.125
在第一个单元格中

00:00:23.125 --> 00:00:25.338
我编写了一个 Shirt 类

00:00:25.338 --> 00:00:28.648
就像在上个视频中讨论的那样

00:00:28.649 --> 00:00:30.320
该类有 color

00:00:30.320 --> 00:00:34.170
size、style 和 price 属性

00:00:34.170 --> 00:00:37.454
我还编写了更改价格的方法

00:00:37.454 --> 00:00:41.474
以及输出折扣价的方法

00:00:41.475 --> 00:00:44.840
第二、三个单元格展示了

00:00:44.840 --> 00:00:48.300
如何实例化 shirt 对象

00:00:48.298 --> 00:00:51.484
告诉你如何在程序中使用类

00:00:51.484 --> 00:00:54.630
我将从第一个单元格往下开始介绍

00:00:54.630 --> 00:00:59.179
第一行告诉 Python 我将编写一个类

00:00:59.179 --> 00:01:01.054
然后将该类命名为 Shirt

00:01:01.054 --> 00:01:06.319
良好的编程实践规定 类名首字母要大写

00:01:06.319 --> 00:01:09.444
不过即使首字母不大写 代码也能运行

00:01:09.444 --> 00:01:12.659
你可以在 Shirt 后面添加括号 或者不添加

00:01:12.659 --> 00:01:14.599
代码都能运行

00:01:14.599 --> 00:01:16.399
下一行则规定了

00:01:16.400 --> 00:01:20.350
如何用相应的值来初始化所有属性

00:01:20.349 --> 00:01:23.174
注意 类表示的是一个范本

00:01:23.174 --> 00:01:25.420
因此我设置的是

00:01:25.420 --> 00:01:29.239
通用 shirt 的 color、size、style、price

00:01:29.239 --> 00:01:33.649
稍后你将了解如何初始化特定的 Shirt 对象

00:01:33.650 --> 00:01:38.520
有两个地方看起来有点奇怪

00:01:38.519 --> 00:01:44.099
__init__ 函数和 self 变量

00:01:44.099 --> 00:01:47.000
init 函数是 Python 的内置函数

00:01:47.000 --> 00:01:51.935
Python 可以使用该函数创建一个特定的 Shirt 对象

00:01:51.935 --> 00:01:54.140
暂时先记住此函数

00:01:54.140 --> 00:01:55.805
稍后我会解释的

00:01:55.805 --> 00:01:59.674
self 变量一开始不好理解

00:01:59.674 --> 00:02:03.140
self 会存储 color 和 size 等属性

00:02:03.140 --> 00:02:08.104
并使这些属性在整个类中都能使用

00:02:08.104 --> 00:02:11.269
self 本质上是一个字典

00:02:11.270 --> 00:02:15.250
用于存储所有属性及其属性值

00:02:15.250 --> 00:02:19.128
请查看 change_price() 方法 看看 self 的工作原理

00:02:19.128 --> 00:02:24.918
我将 self 作为方法的第一个输入写进括号 从而能够访问 price 属性

00:02:24.919 --> 00:02:28.280
刚提到 self 存储了 price

00:02:28.280 --> 00:02:32.015
以及 color、size 和 style 等属性

00:02:32.014 --> 00:02:34.849
如果你想访问属性

00:02:34.848 --> 00:02:38.054
那么 self 将始终是方法的第一个输入

00:02:38.055 --> 00:02:40.490
同时注意 change_price() 和 discount() 方法

00:02:40.490 --> 00:02:43.975
都很像普通的 Python 函数

00:02:43.973 --> 00:02:48.543
例如 Python 函数不是必须要返回内容

00:02:48.544 --> 00:02:52.489
因此在 change_price() 方法中 它没有返回任何内容

00:02:52.490 --> 00:02:55.280
只是更改了 price 属性的值

00:02:55.280 --> 00:02:57.770
同时 discount() 方法则返回了内容

00:02:57.770 --> 00:03:00.564
它返回的是折扣价

00:03:00.563 --> 00:03:03.125
重申下 Shirt 类只是通用范本

00:03:03.125 --> 00:03:06.788
我将运行第一个单元格 然后再说第二个单元格

00:03:06.788 --> 00:03:09.033
现在来看看如何使用这个类

00:03:09.033 --> 00:03:10.853
下面是一些示例

00:03:10.854 --> 00:03:15.649
如果我要创建实际的 Shirt 对象 则使用这样的语法

00:03:15.650 --> 00:03:17.944
称之为实例化对象

00:03:17.943 --> 00:03:22.218
注意输入值的顺序需要与 init 函数保持一致

00:03:22.218 --> 00:03:25.424
我赋予属性一些值 包括颜色、尺寸、风格、价格

00:03:25.425 --> 00:03:27.469
来初始化这个特定的 Shirt

00:03:27.468 --> 00:03:29.329
就像 init 函数一样

00:03:29.330 --> 00:03:34.690
Python 将调用 init 函数来初始化这个 Shirt 对象

00:03:34.688 --> 00:03:36.108
我来运行代码单元格

00:03:36.110 --> 00:03:41.510
这里的输出是一个 Shirt 对象 至于末尾的有趣数字和字母组合

00:03:41.508 --> 00:03:47.178
是 Python 在告诉我们该对象在内存中的存储位置

00:03:47.180 --> 00:03:51.665
但是这样并没有什么用 除非将对象存储在一个变量里

00:03:51.663 --> 00:03:53.048
因此在下个代码单元格中

00:03:53.050 --> 00:03:54.800
我将把对象储存在变量里

00:03:54.800 --> 00:03:57.410
我将运行此代码单元格

00:03:57.408 --> 00:04:01.120
现在这个 Shirt 对象存储在了变量 new_shirt 里

00:04:01.120 --> 00:04:03.610
new_shirt 变量具有相关的

00:04:03.610 --> 00:04:06.710
颜色、尺寸、风格和价格

00:04:06.710 --> 00:04:11.335
你可以使用这个点记法访问这些属性

00:04:11.335 --> 00:04:15.754
我来运行下个代码单元格 你将看到结果

00:04:15.753 --> 00:04:21.199
向下滚动 你还可以使用相同的点记法访问方法

00:04:21.199 --> 00:04:25.978
但是需要指定这些方法所需的任何输入

00:04:25.980 --> 00:04:28.360
例如 要更改价格

00:04:28.360 --> 00:04:31.430
我将调用 change_price() 方法并传入值 10

00:04:31.430 --> 00:04:32.740
运行此代码单元格

00:04:32.740 --> 00:04:36.935
现在看到 price 属性从 15 变成了 10

00:04:36.935 --> 00:04:39.329
discount() 方法也一样

00:04:39.329 --> 00:04:43.918
我在 discount() 方法里传入 0.2 结果返回值 8

00:04:43.920 --> 00:04:46.939
因为这是打八折后的价格

00:04:46.939 --> 00:04:48.410
在最后一部分

00:04:48.410 --> 00:04:52.814
我实例化了三个 Shirt 对象 然后将这些对象存储在一个列表里

00:04:52.814 --> 00:04:55.759
举这个例子的原因是

00:04:55.759 --> 00:04:58.750
我想强调这些变量和任何其他 Python 变量一样

00:04:58.750 --> 00:05:00.230
结果是这样

00:05:00.230 --> 00:05:04.730
先将 Shirt 存储到 tshirt_collection 列表中

00:05:04.730 --> 00:05:08.879
然后运行 for 循环并输出每件衬衫的 color

00:05:08.879 --> 00:05:11.709
如果你第一次接触面向对象编程

00:05:11.709 --> 00:05:13.759
刚刚讲解的内容可能听起来有点难

00:05:13.759 --> 00:05:18.110
我建议你重复观看本视频 然后再转到下一课

00:05:18.110 --> 00:05:22.485
下一课的内容是进一步探索代码并自己编写类

00:05:22.485 --> 00:05:26.074
最重要的是练习

00:05:26.074 --> 00:05:28.805
自己编写类 运行代码

00:05:28.805 --> 00:05:31.730
并调试出现的任何错误消息

