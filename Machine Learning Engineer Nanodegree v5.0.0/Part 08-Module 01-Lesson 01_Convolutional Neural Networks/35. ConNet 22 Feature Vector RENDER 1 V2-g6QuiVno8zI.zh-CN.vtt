WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.010
卷积神经网络的职责是发现图像中的图案

00:00:05.010 --> 00:00:08.045
我们使用一系列层级发现这些图案

00:00:08.045 --> 00:00:11.610
CNN 中的层级会将输入图像数组

00:00:11.610 --> 00:00:15.350
变成只包含图像内容的表示法

00:00:15.350 --> 00:00:20.260
这通常称为图像的特征级表示法 或称为特征向量

00:00:20.260 --> 00:00:23.160
为了帮助理解 举个例子

00:00:23.160 --> 00:00:26.400
假设有两张汽车图像

00:00:26.400 --> 00:00:27.570
它们差别很大

00:00:27.570 --> 00:00:29.130
如果我要描述这些图像

00:00:29.130 --> 00:00:31.975
肯定会考虑细节风格之类的

00:00:31.975 --> 00:00:33.645
但是对于图像分类器来说

00:00:33.645 --> 00:00:37.170
它只想知道这两张图像都是汽车图像

00:00:37.170 --> 00:00:39.780
两个图像在经过 CNN 的多个层级时会被转换

00:00:39.780 --> 00:00:42.410
如果你仔细观察

00:00:42.410 --> 00:00:45.780
就会发现原始确切像素值越来越不重要

00:00:45.780 --> 00:00:50.510
两个转换后的输出应该开始看起来更相似

00:00:50.510 --> 00:00:52.640
然后得出结论：二者都是汽车图像

00:00:52.640 --> 00:00:56.225
而不是关注两个图像里的汽车分别是什么样式和风格的

00:00:56.225 --> 00:01:01.060
CNN 中的后续层级丢弃了风格和纹理信息

00:01:01.060 --> 00:01:05.000
而是促使网络去回答一些

00:01:05.000 --> 00:01:07.150
关于一般形状和独特图案的问题

00:01:07.150 --> 00:01:09.155
例如“图中有车轮吗？”

00:01:09.155 --> 00:01:10.395
“图中有眼睛吗？”

00:01:10.395 --> 00:01:12.400
“有三条腿或尾巴吗？”

00:01:12.400 --> 00:01:14.420
一旦我们像这样

00:01:14.420 --> 00:01:17.270
提取出图像内容后

00:01:17.270 --> 00:01:20.390
我们可以将数组扁平化为特征向量

00:01:20.390 --> 00:01:25.455
然后传入一个或多个全连接层 判断图像中的对象是什么

00:01:25.455 --> 00:01:29.360
例如 如果在最后的最大池化层之后发现了轮子

00:01:29.360 --> 00:01:32.150
特征向量将能体现这一信息

00:01:32.150 --> 00:01:34.580
全连接层将转换该信息

00:01:34.580 --> 00:01:38.290
并以更高的概率预测图中有汽车

00:01:38.290 --> 00:01:40.870
如果有眼睛 三条腿和尾巴

00:01:40.870 --> 00:01:43.430
那么输出层会考虑该信息

00:01:43.430 --> 00:01:46.700
并推测图中很可能有一条狗

00:01:46.700 --> 00:01:48.730
当然要强调下

00:01:48.730 --> 00:01:50.645
模型得出的所有这些结论

00:01:50.645 --> 00:01:52.790
并不是预先确定的认知

00:01:52.790 --> 00:01:56.945
而是模型在训练过程中学习的结果

00:01:56.945 --> 00:01:58.400
模型会通过反向传播

00:01:58.400 --> 00:02:01.320
更新定义过滤器的权重及全连接层中的权重

00:02:01.320 --> 00:02:04.010
我们指定的这种结构

00:02:04.010 --> 00:02:06.800
为模型提供了一种结构 使其能训练得更好

00:02:06.800 --> 00:02:10.750
因此它有可能更准确地分类对象

00:02:10.750 --> 00:02:15.660
接下来我将演示如何开始定义图像分类 CNN 结构

00:02:15.660 --> 00:02:18.090
你将有机会练习编写代码

