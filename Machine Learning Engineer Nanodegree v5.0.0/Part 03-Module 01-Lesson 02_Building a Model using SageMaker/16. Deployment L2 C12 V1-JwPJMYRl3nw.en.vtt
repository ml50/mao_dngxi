WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.754
Now, that the model has been created,

00:00:01.754 --> 00:00:04.154
we'd like to test it to see how well it's doing.

00:00:04.155 --> 00:00:06.509
If we click on the high level notebook,

00:00:06.509 --> 00:00:08.759
we can remind ourselves how we went about it there.

00:00:08.759 --> 00:00:11.939
First, we created a transformer object,

00:00:11.939 --> 00:00:14.219
in which we described the number of

00:00:14.220 --> 00:00:18.105
virtual machines and the type of virtual machine we wanted to use,

00:00:18.105 --> 00:00:20.219
and then we call it the transform method,

00:00:20.219 --> 00:00:25.799
which created a batch transform job which was then executed by SageMaker,

00:00:25.800 --> 00:00:28.469
just like when we train the model we will construct

00:00:28.469 --> 00:00:32.070
our own batch transform job in a low-level notebook.

00:00:32.070 --> 00:00:36.554
Going back to the low-level notebook and scrolling down,

00:00:36.554 --> 00:00:41.090
the first thing to notice is that just like in the training and in

00:00:41.090 --> 00:00:45.515
the model creation steps we have to name our transformed job.

00:00:45.515 --> 00:00:50.274
Also like the model and training job cases,

00:00:50.274 --> 00:00:52.729
we have to make sure that the name is unique.

00:00:52.729 --> 00:00:58.250
So again, we make sure to append a timestamp on the end of the transform_jobs_name.

00:00:58.250 --> 00:01:03.005
Next we, need to describe the transformation job in detail.

00:01:03.005 --> 00:01:06.060
We begin by setting a name,

00:01:06.060 --> 00:01:11.075
choosing the model which we wish to use for the transformation job,

00:01:11.075 --> 00:01:17.075
we describe how many simultaneous transformations will occur at any given time.

00:01:17.075 --> 00:01:18.829
For now, we'll just use one,

00:01:18.829 --> 00:01:20.840
but if we had a very large dataset,

00:01:20.840 --> 00:01:24.219
maybe we'd like more than one to run at the same time.

00:01:24.219 --> 00:01:30.739
Next, we describe the maximum amount of data that is sent to our model at any given time.

00:01:30.739 --> 00:01:33.079
If you need to you can increase this,

00:01:33.079 --> 00:01:35.899
but for now we will just leave it at six.

00:01:35.900 --> 00:01:38.195
In this case, we're choosing multi-record,

00:01:38.194 --> 00:01:43.654
which means we want to send multiple records in each chunk of data.

00:01:43.655 --> 00:01:46.310
Then, we describe where we would like

00:01:46.310 --> 00:01:50.090
SageMaker to save the results of our batch transformed job.

00:01:50.090 --> 00:01:54.695
Once we've described the output we should also make sure to describe the input.

00:01:54.694 --> 00:01:58.789
Here we're telling SageMaker that we are sending it

00:01:58.790 --> 00:02:03.275
CSV data that we can break the data up line by line

00:02:03.275 --> 00:02:07.190
in case the data is too large to send in a single chunk and where

00:02:07.189 --> 00:02:12.079
the data is located in particular on S3 in this location.

00:02:12.080 --> 00:02:19.400
Lastly, we tell SageMaker what sort of machine to use when running the transform job.

00:02:19.400 --> 00:02:23.590
Now, that we have specified all of the parameters of our transformation job,

00:02:23.590 --> 00:02:26.740
it's time to ask SageMaker to create the job.

00:02:26.740 --> 00:02:29.340
Just like in the training case,

00:02:29.340 --> 00:02:34.280
SageMaker is now working on creating and executing that transform job in the background.

00:02:34.280 --> 00:02:37.939
So, in order to get some visual representation of what's going on,

00:02:37.939 --> 00:02:41.454
we need to call the weight for transform job method.

00:02:41.455 --> 00:02:45.065
Now, we just need to wait for the transform job to complete.

00:02:45.064 --> 00:02:47.359
Now, that the transform job is completed,

00:02:47.360 --> 00:02:49.465
we can take a look at the results.

00:02:49.465 --> 00:02:53.120
First, we make sure to copy the output from

00:02:53.120 --> 00:02:56.750
our transform job to the local notebook instance,

00:02:56.750 --> 00:03:00.650
and then we create an edge graph to take a look to see how it's doing.

00:03:00.650 --> 00:03:02.599
It turns out not too bad.

