WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.700
下载 处理

00:00:02.700 --> 00:00:04.530
并上传数据后

00:00:04.530 --> 00:00:07.110
下面开始创建模型

00:00:07.110 --> 00:00:08.805
正如我在上个视频中提到的

00:00:08.805 --> 00:00:12.525
我们将使用 XGBoost 算法创建模型

00:00:12.525 --> 00:00:15.060
了解 XGBoost 算法的工作原理

00:00:15.060 --> 00:00:17.910
已经超出了这节课的范畴

00:00:17.910 --> 00:00:21.540
但是 了解 XGBoost 算法很重要

00:00:21.540 --> 00:00:25.165
因为处理表格数据的时候使用该算法很高效

00:00:25.165 --> 00:00:29.270
它是在各种机器学习竞赛中

00:00:29.270 --> 00:00:33.960
效率排名靠前的算法 例如 Kaggle 竞赛中用到的算法

00:00:33.960 --> 00:00:37.160
为了让 StageMaker 使用 XGBoost 拟合模型

00:00:37.160 --> 00:00:39.470
它需要启动虚拟机

00:00:39.470 --> 00:00:42.485
虚拟机将加载我们指定的 Docker 容器

00:00:42.485 --> 00:00:45.980
Amazon 向我们提供了 XGBoost Docker 容器

00:00:45.980 --> 00:00:49.810
但是 镜像名称取决于我们所在的区域

00:00:49.810 --> 00:00:53.245
幸运的是 我们可以使用

00:00:53.245 --> 00:00:56.785
Amazon 提供的get_ image_uri 实用程序

00:00:56.785 --> 00:01:00.890
提供区域名称和要使用的算法后

00:01:00.890 --> 00:01:03.745
该实用程序将创建相应的容器名称

00:01:03.745 --> 00:01:05.520
有了该名称之后 我们就可以

00:01:05.520 --> 00:01:11.180
创建 StageMaker estimator 对象了 在这里提供要使用的容器名称

00:01:11.180 --> 00:01:13.165
对我们来说 即 XGBoost 容器

00:01:13.165 --> 00:01:16.425
并提供此 estimator 的角色

00:01:16.425 --> 00:01:19.250
角色可以告诉 Amazon

00:01:19.250 --> 00:01:23.870
特定对象能够访问哪些资源

00:01:23.870 --> 00:01:27.260
因为我们希望 estimator 能访问训练数据

00:01:27.260 --> 00:01:29.120
训练数据存储在 S3 中

00:01:29.120 --> 00:01:31.730
所以需要确保 estimator 具有

00:01:31.730 --> 00:01:33.880
能访问 S3 的角色

00:01:33.880 --> 00:01:36.865
当我们一开始创建此 notebook 实例时

00:01:36.865 --> 00:01:40.460
我们为其设定了可以访问 S3 的角色

00:01:40.460 --> 00:01:42.770
所以 如果为 estimator 设定的角色

00:01:42.770 --> 00:01:45.955
与此 notebook 实例的角色一样 就可以了

00:01:45.955 --> 00:01:50.290
我们还需要告诉 StageMaker 要创建多少个实例

00:01:50.290 --> 00:01:53.525
即要创建多少个虚拟机

00:01:53.525 --> 00:01:55.165
对我们来说 是 1 个

00:01:55.165 --> 00:02:01.545
我们需要告诉 StageMaker 我们要使用的实例或虚拟机类型

00:02:01.545 --> 00:02:07.119
ml.m4.xlarge 实例类型对我们来说就很合适

00:02:07.119 --> 00:02:12.995
最后 我们需要告诉 StageMaker 将最终保存的模型存储在哪里

00:02:12.995 --> 00:02:15.200
我们将模型存储在默认存储桶中

00:02:15.200 --> 00:02:19.025
并放在之前设置的文件夹里

00:02:19.025 --> 00:02:21.425
即 prefix 指定的文件夹

00:02:21.425 --> 00:02:25.910
最后 我们需要提供 session 对象

00:02:25.910 --> 00:02:30.230
以防 StageMaker 需要使用其他信息 好的

00:02:30.230 --> 00:02:32.705
现在我们有了 estimator 对象

00:02:32.705 --> 00:02:37.790
该 estimator 对象是 XGBoost 算法的封装器

00:02:37.790 --> 00:02:42.610
XGBoost 本身有一些超参数可以指定

00:02:42.610 --> 00:02:45.100
我们可以忽略这些超参数的含义

00:02:45.100 --> 00:02:48.620
但是强烈建议你尝试不同的值

00:02:48.620 --> 00:02:52.810
看看这些值对模型及拟合数据有何影响

00:02:52.810 --> 00:02:54.770
需要注意的是

00:02:54.770 --> 00:02:59.700
因为房价中位数是浮点数

00:02:59.700 --> 00:03:01.895
所以需要使用线性回归

00:03:01.895 --> 00:03:05.630
XGBoost 利用 early_stopping_rounds 判断

00:03:05.630 --> 00:03:09.730
是否提前结束数据处理

00:03:09.730 --> 00:03:13.340
例如 如果模型在验证集上性能开始下降

00:03:13.340 --> 00:03:16.790
那么我们可能过拟合了 应该停止训练模型

00:03:16.790 --> 00:03:22.985
最后 我们告诉 XGBoost 最高迭代次数

00:03:22.985 --> 00:03:25.110
设置好超参数后

00:03:25.110 --> 00:03:27.620
就可以开始拟合模型了

00:03:27.620 --> 00:03:29.360
在拟合模型时

00:03:29.360 --> 00:03:35.205
XGBoost estimator 对象有一个很便利的函数 叫做 fit()

00:03:35.205 --> 00:03:38.420
我们只需提供

00:03:38.420 --> 00:03:41.965
训练数据和验证数据的位置

00:03:41.965 --> 00:03:46.100
当然 位置本身是一个对象

00:03:46.100 --> 00:03:49.970
不仅描述了数据在 S3 上的位置

00:03:49.970 --> 00:03:52.280
而且描述了数据格式

00:03:52.280 --> 00:03:54.415
对我们来说 是 csv 文件

00:03:54.415 --> 00:03:59.415
现在等待 StageMaker 配置虚拟机

00:03:59.415 --> 00:04:00.990
准备好一切

00:04:00.990 --> 00:04:03.930
然后加载镜像和训练模型

