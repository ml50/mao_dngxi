WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.755
创建好模型后

00:00:01.755 --> 00:00:04.155
下面测试模型 看看模型的表现如何

00:00:04.155 --> 00:00:06.510
点击高阶 notebook

00:00:06.510 --> 00:00:08.760
看看是如何测试模型的

00:00:08.760 --> 00:00:11.940
首先 我们创建了 transformer 对象

00:00:11.940 --> 00:00:14.220
我们在其中描述了虚拟机的数量

00:00:14.220 --> 00:00:18.105
以及虚拟机的类型

00:00:18.105 --> 00:00:20.220
然后调用 transform 方法

00:00:20.220 --> 00:00:25.800
该方法创建了一个批转换作业 然后被 SageMaker 执行

00:00:25.800 --> 00:00:28.470
就像训练模型一样

00:00:28.470 --> 00:00:32.070
我们将在低阶 notebook 中自己构建批转换作业

00:00:32.070 --> 00:00:36.555
回到低阶 notebook 并向下滚动

00:00:36.555 --> 00:00:41.090
首先要注意的是 就像在训练和模型创建步骤中一样

00:00:41.090 --> 00:00:45.515
我们需要命名转换作业

00:00:45.515 --> 00:00:50.275
并且和模型创建及训练作业步骤一样

00:00:50.275 --> 00:00:52.730
必须确保名称是唯一的

00:00:52.730 --> 00:00:58.250
我们在 transform_job_name 后面附加一个时间戳

00:00:58.250 --> 00:01:03.005
接着需要详细描述训练作业

00:01:03.005 --> 00:01:06.060
首先设置名称

00:01:06.060 --> 00:01:11.075
选择转换作业要使用的模型

00:01:11.075 --> 00:01:17.075
指定在任何给定时间同时有多少个转换在运行

00:01:17.075 --> 00:01:18.830
暂时先设为 1

00:01:18.830 --> 00:01:20.840
但是如果有非常大的数据集

00:01:20.840 --> 00:01:24.220
或许需要同时运行多个转换作业

00:01:24.220 --> 00:01:30.740
接着指定在任何给定时间发送的最大数据量

00:01:30.740 --> 00:01:33.080
你也可以增加这个值

00:01:33.080 --> 00:01:35.900
暂时先保留为 6

00:01:35.900 --> 00:01:38.195
这里设为 MultiRecord

00:01:38.195 --> 00:01:43.655
表示在每份数据中发送多条记录

00:01:43.655 --> 00:01:46.310
然后指定

00:01:46.310 --> 00:01:50.090
SageMaker 将批转换作业的结果保存到何处

00:01:50.090 --> 00:01:54.695
描述了输出之后 还需要描述输入

00:01:54.695 --> 00:01:58.790
我们告诉 SageMaker 我们将向其发送 CSV 数据

00:01:58.790 --> 00:02:03.275
如果数据太多 一次发送太大的话

00:02:03.275 --> 00:02:07.190
我们可以按行拆分数据

00:02:07.190 --> 00:02:12.080
然后指定数据所在的位置 即 S3 上的这个文件夹里

00:02:12.080 --> 00:02:19.400
最后 告诉 SageMaker 在什么样的虚拟机上运行转换作业

00:02:19.400 --> 00:02:23.590
指定了转换作业的所有参数后

00:02:23.590 --> 00:02:26.740
下面要求 SageMaker 创建转换作业

00:02:26.740 --> 00:02:29.340
就像在训练步骤中一样

00:02:29.340 --> 00:02:34.280
SageMaker 现在正在后台创建和执行转换作业

00:02:34.280 --> 00:02:37.940
为了直观地了解后台发生的情况

00:02:37.940 --> 00:02:41.455
我们需要调用 wait_for_transform_job 方法

00:02:41.455 --> 00:02:45.065
现在等着转换作业运行完毕

00:02:45.065 --> 00:02:47.360
转换作业运行完毕后

00:02:47.360 --> 00:02:49.465
我们来看看结果

00:02:49.465 --> 00:02:53.120
首先 需要将转换作业的输出

00:02:53.120 --> 00:02:56.750
复制到本地 notebook 实例中

00:02:56.750 --> 00:03:00.650
然后绘制图形 看看运行效果

00:03:00.650 --> 00:03:02.600
结果并不糟糕

