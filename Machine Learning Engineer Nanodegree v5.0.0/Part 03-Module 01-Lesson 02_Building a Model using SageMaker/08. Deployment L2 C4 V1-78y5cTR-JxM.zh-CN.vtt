WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.640
在第一个 SageMaker 示例中

00:00:02.640 --> 00:00:06.030
我们将查看 Boston Housing 数据集

00:00:06.030 --> 00:00:08.400
并使用该数据集

00:00:08.400 --> 00:00:11.730
预测波士顿地区的房价中位数

00:00:11.730 --> 00:00:19.170
首先转到“Tutorials”文件夹并打开 Boston Housing - XGBoost

00:00:19.170 --> 00:00:22.215
(Batch Transform) High-Level notebook

00:00:22.215 --> 00:00:24.420
文件名比较长

00:00:24.420 --> 00:00:27.525
当我们继续学习时 将明白这些单词的含义

00:00:27.525 --> 00:00:30.510
首先 Boston Housing 表示我们要使用的数据集

00:00:30.510 --> 00:00:36.585
High Level 表示我们将在此示例中使用的 API

00:00:36.585 --> 00:00:39.300
它使 SageMaker 使用起来更简单

00:00:39.300 --> 00:00:43.910
首先 我们需要导入所需的所有 Python 模块

00:00:43.910 --> 00:00:48.895
包括所有的 SageMaker 特定模块

00:00:48.895 --> 00:00:53.285
对于我们导入的每个 SageMaker 模块

00:00:53.285 --> 00:00:57.330
稍后会详细介绍的好的

00:00:57.330 --> 00:00:58.845
接下来获取数据

00:00:58.845 --> 00:01:00.540
幸运的是

00:01:00.540 --> 00:01:03.969
Boston Housing 数据集是由 sklearn 提供的

00:01:03.969 --> 00:01:05.510
所以不需要什么操作

00:01:05.510 --> 00:01:07.030
直接加载数据

00:01:07.030 --> 00:01:08.570
数据加载后

00:01:08.570 --> 00:01:11.750
我们需要将数据拆分成训练集和测试集

00:01:11.750 --> 00:01:14.675
另外 我还将训练集

00:01:14.675 --> 00:01:18.365
拆分成了验证集和训练集

00:01:18.365 --> 00:01:20.760
原因是在这个示例中

00:01:20.760 --> 00:01:24.355
我们将使用 XGBoost 算法

00:01:24.355 --> 00:01:26.895
该算法是一个随机数模型

00:01:26.895 --> 00:01:32.240
从我的经验来看 随机数模型很容易过拟合

00:01:32.240 --> 00:01:35.560
所以使用验证集可以改进结果

00:01:35.560 --> 00:01:39.675
SageMaker 训练和部署模型的流程如下

00:01:39.675 --> 00:01:41.930
首先创建一个虚拟机

00:01:41.930 --> 00:01:45.170
该虚拟机具有所有我们指定的属性

00:01:45.170 --> 00:01:48.595
例如 它可能配有 GPU

00:01:48.595 --> 00:01:50.990
或者具有一定量的 RAM

00:01:50.990 --> 00:01:53.510
或特定数量的处理器

00:01:53.510 --> 00:01:56.600
我们针对特定任务指定了这些量

00:01:56.600 --> 00:01:58.850
然后 虚拟机将加载镜像

00:01:58.850 --> 00:02:01.955
通常 此镜像是一种 Docker 容器

00:02:01.955 --> 00:02:05.780
我们将使用提供的 Docker 容器

00:02:05.780 --> 00:02:09.935
其中包含使用 XGBoost 的训练和推理代码

00:02:09.935 --> 00:02:13.855
为了使虚拟机成功执行训练代码

00:02:13.855 --> 00:02:16.335
它必须能够访问训练数据

00:02:16.335 --> 00:02:19.650
SageMaker 认为此数据位于 S3 上

00:02:19.650 --> 00:02:22.170
S3 是 Amazon 的数据存储服务

00:02:22.170 --> 00:02:25.835
我们需要将数据集上传到这里

00:02:25.835 --> 00:02:28.630
不过步骤很简单

00:02:28.630 --> 00:02:31.250
为了将数据上传到 S3

00:02:31.250 --> 00:02:34.715
首先需要将数据保存到文件中

00:02:34.715 --> 00:02:38.810
我们选择将所有数据保存到 /data/boston 目录下

00:02:38.810 --> 00:02:43.475
我们需要确保存在该目录

00:02:43.475 --> 00:02:46.970
然后使用 Pandas 将测试 验证和训练集

00:02:46.970 --> 00:02:51.380
写入 /data 目录下的 csv 文件中

00:02:51.380 --> 00:02:54.469
我们目前使用的 SageMaker 会话

00:02:54.469 --> 00:02:59.255
与此 notebook 实例相关联

00:02:59.255 --> 00:03:02.570
此会话关联了一个 Python 对象

00:03:02.570 --> 00:03:06.215
这就是 session 对象

00:03:06.215 --> 00:03:09.740
在 notebook 中一直向上滚动

00:03:09.740 --> 00:03:11.990
我们在这里

00:03:11.990 --> 00:03:18.155
使用 SageMaker API 获取了此 session 对象

00:03:18.155 --> 00:03:23.165
此 session 对象包含一系列有用的方法和信息

00:03:23.165 --> 00:03:29.225
例如 其中一个方法是 upload_data

00:03:29.225 --> 00:03:33.755
传入文件路径和文件前缀后

00:03:33.755 --> 00:03:41.490
它会将这个文件上传到与此会话相关联的默认 S3 存储桶中

00:03:41.490 --> 00:03:44.765
notebook 实例有一个默认的 S3 存储桶

00:03:44.765 --> 00:03:47.045
就像一个驱动器

00:03:47.045 --> 00:03:55.365
这个 upload_data 方法将我们所选的文件上传到这个驱动器中的某个文件夹里

00:03:55.365 --> 00:04:00.305
该文件夹由在这里设置的文件前缀指定

00:04:00.305 --> 00:04:02.120
再过一遍

00:04:02.120 --> 00:04:05.660
session 对象包含一个 upload_data 方法

00:04:05.660 --> 00:04:10.850
该方法会将数据文件上传到 S3 存储桶

00:04:10.850 --> 00:04:15.920
该存储桶是此 notebook 的默认存储桶

00:04:15.920 --> 00:04:17.860
并放入由 prefix 指定的文件夹中

00:04:17.860 --> 00:04:24.060
此外需要注意的是 这个方法的返回值是一个 URI

00:04:24.060 --> 00:04:27.155
它指向 S3 上的数据

00:04:27.155 --> 00:04:29.525
我们已经下载 处理

00:04:29.525 --> 00:04:31.655
和上传了数据

00:04:31.655 --> 00:04:33.670
下面开始训练模型

