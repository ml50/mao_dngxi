WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.879
Now that you understand the importance of developing in a clean and modular way,

00:00:05.879 --> 00:00:08.824
let's break down what this means in code.

00:00:08.824 --> 00:00:11.695
The first tip for writing clean code,

00:00:11.695 --> 00:00:16.774
is to use meaningful descriptive names for your variables and functions.

00:00:16.774 --> 00:00:20.729
This can help you explain most of your code without comments.

00:00:20.730 --> 00:00:27.600
Take a look at this code that initializes a list of student test scores, prints the mean,

00:00:27.600 --> 00:00:32.125
curves each score by multiplying its square root by 10,

00:00:32.125 --> 00:00:36.000
and then prints the mean of the new curved scores.

00:00:36.000 --> 00:00:42.265
With this code, you wouldn't know what was happening right away without these comments.

00:00:42.265 --> 00:00:45.619
See how this compares to this cleaner code,

00:00:45.619 --> 00:00:49.189
which conveys the same purpose without the comments.

00:00:49.189 --> 00:00:54.314
Now, we know what both of these lists stand for without the comments,

00:00:54.314 --> 00:00:58.844
which will help us throughout the program wherever these variables are used.

00:00:58.844 --> 00:01:02.310
We also use the function with a descriptive name,

00:01:02.310 --> 00:01:06.085
mean, instead of running a calculation each time.

00:01:06.084 --> 00:01:08.519
This not only helps readability,

00:01:08.519 --> 00:01:11.789
but follows the DRY principle or don't repeat

00:01:11.790 --> 00:01:15.440
yourself that is important to writing modular code,

00:01:15.439 --> 00:01:17.179
which we'll talk more about later.

00:01:17.180 --> 00:01:21.230
In addition, we imported the math module to use

00:01:21.230 --> 00:01:27.570
its square root method instead of raising each score to 0.5 with double asterisks,

00:01:27.569 --> 00:01:29.759
which isn't only more readable,

00:01:29.760 --> 00:01:32.480
but also faster in Python 3.

00:01:32.480 --> 00:01:37.609
Try testing how effective your names are by asking a fellow programmer to guess

00:01:37.609 --> 00:01:43.594
the purpose of a function or variable based on its name without looking at your code.

00:01:43.594 --> 00:01:47.689
Coming up with meaningful names often requires effort to get right.

00:01:47.689 --> 00:01:49.353
Here are some guidelines.

00:01:49.353 --> 00:01:51.739
Let's start with the first guideline.

00:01:51.739 --> 00:01:54.359
Be descriptive, and when appropriate,

00:01:54.359 --> 00:01:57.754
try implying the type of whatever you're naming.

00:01:57.754 --> 00:02:00.019
Notice we call this list,

00:02:00.019 --> 00:02:02.409
age list instead of ages,

00:02:02.409 --> 00:02:08.694
which helps us avoid confusing the integer age and the list of ages later in this code.

00:02:08.694 --> 00:02:12.769
For Booleans, it's often helpful to prefix the name with words

00:02:12.770 --> 00:02:17.425
like is or as to make it clear that it's a condition.

00:02:17.425 --> 00:02:20.960
You can also use parts of speech to imply types by

00:02:20.960 --> 00:02:25.070
using verbs for functions and nouns for variables.

00:02:25.069 --> 00:02:30.349
Normally, you don't want to use abbreviations unless the word will be used many,

00:02:30.349 --> 00:02:34.794
many times, and you especially don't want single letter names.

00:02:34.794 --> 00:02:40.709
However, exceptions include names for counters such as i in this example,

00:02:40.710 --> 00:02:44.075
as well as common variable names using math like,

00:02:44.074 --> 00:02:46.954
x, y, t, and so on.

00:02:46.955 --> 00:02:49.630
Choosing when these exceptions can be made

00:02:49.629 --> 00:02:52.689
can be determined based on your audience for the code.

00:02:52.689 --> 00:02:55.030
If you work with other data scientists,

00:02:55.030 --> 00:02:57.840
certain variables may be common knowledge.

00:02:57.840 --> 00:03:00.490
While if you work with full-stack engineers,

00:03:00.490 --> 00:03:05.170
it might be necessary to provide more descriptive names in these cases as well.

00:03:05.169 --> 00:03:10.179
However, long names do not always mean meaningful names.

00:03:10.180 --> 00:03:12.105
You should be descriptive,

00:03:12.104 --> 00:03:15.139
but not with more characters than necessary.

00:03:15.139 --> 00:03:18.859
This first example is very verbose.

00:03:18.860 --> 00:03:21.020
This function computes the number of

00:03:21.020 --> 00:03:24.825
unique values in a list regardless of what that list is.

00:03:24.824 --> 00:03:29.844
So, we can generalize and remove of names list from the function name,

00:03:29.844 --> 00:03:32.754
and replace the argument name with arr,

00:03:32.754 --> 00:03:35.924
which is standard to represent an arbitrary array.

00:03:35.925 --> 00:03:40.760
In addition, implementation details are unnecessary to include in a function name.

00:03:40.759 --> 00:03:44.780
So, we can remove with set from the function name as well.

00:03:44.780 --> 00:03:50.539
The resulting function is much more clean and concise while still being descriptive.

00:03:50.539 --> 00:03:55.745
Another tip for writing clean code is to use whitespace properly.

00:03:55.745 --> 00:04:00.004
Code with poor or inconsistent spacing is the worst.

00:04:00.004 --> 00:04:02.014
Take a look at this mess.

00:04:02.014 --> 00:04:05.144
If you were handed this code as a developer,

00:04:05.145 --> 00:04:10.249
the first thing you should do is fix the whitespace and make it consistent.

00:04:10.248 --> 00:04:13.715
This is much nicer to read and work with.

00:04:13.715 --> 00:04:17.194
Organize your code with consistent indentation.

00:04:17.194 --> 00:04:22.355
The standard for Python is using four spaces for each indent,

00:04:22.355 --> 00:04:24.590
unlike we have here.

00:04:24.589 --> 00:04:27.409
Also, be sure to separate sections with

00:04:27.410 --> 00:04:30.740
blank lines to make it easier to organize and read.

00:04:30.740 --> 00:04:35.780
Lastly, try to limit your lines to around 79 characters.

00:04:35.779 --> 00:04:40.244
Seventy-nine is the guideline given in the PEP 8 Style Guide.

00:04:40.245 --> 00:04:42.430
In many good text editors,

00:04:42.430 --> 00:04:45.185
there's a setting to display a subtle line

00:04:45.185 --> 00:04:48.740
that indicates where the 79 character limit is.

00:04:48.740 --> 00:04:51.949
Notice how much clear it is to read

00:04:51.949 --> 00:04:57.925
this Mongo query in this code with shorter lines and proper indentation.

00:04:57.925 --> 00:05:04.329
Also, notice how much cleaner this ending part of the code is where we call create plot.

00:05:04.329 --> 00:05:06.615
For more guidelines on this,

00:05:06.615 --> 00:05:11.069
check out the code layout section of PEP 8 in the notes below.

