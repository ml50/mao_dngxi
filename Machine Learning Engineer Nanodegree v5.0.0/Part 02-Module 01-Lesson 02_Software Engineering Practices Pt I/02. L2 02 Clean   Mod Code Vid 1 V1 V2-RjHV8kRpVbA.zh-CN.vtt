WEBVTT
Kind: captions
Language: zh-CN

00:00:04.190 --> 00:00:07.620
第一种实践

00:00:07.620 --> 00:00:12.254
是以整洁和模块化的方式编写代码

00:00:12.255 --> 00:00:17.100
数据科学家在第一次开始编码时

00:00:17.100 --> 00:00:22.200
或者即使已经在更学术的研究环境中编码多年 都需要为此努力

00:00:22.199 --> 00:00:24.559
在行业中工作

00:00:24.559 --> 00:00:28.314
你的代码可能被用于生产

00:00:28.315 --> 00:00:33.895
生产代码就是指在生产服务器上运行的代码

00:00:33.895 --> 00:00:39.260
例如 当你在电脑上使用优达学城、

00:00:39.259 --> 00:00:45.454
谷歌或亚马逊等软件时 正在运行服务的代码就是生产代码

00:00:45.454 --> 00:00:50.420
理想情况下 在生产中使用的代码应该满足许多标准

00:00:50.420 --> 00:00:56.660
以确保在公开之前的可靠性和效率

00:00:56.659 --> 00:01:00.654
首先 代码需要整洁

00:01:00.655 --> 00:01:06.540
整洁要求代码可读、简单、精炼

00:01:06.540 --> 00:01:12.635
来看一个不整洁的自然语言句子示例

00:01:12.635 --> 00:01:16.730
"会有人看到你的衬衫被弄脏了

00:01:16.730 --> 00:01:20.359
因为上面有橙色

00:01:20.359 --> 00:01:24.275
看起来像果汁的颜色"

00:01:24.275 --> 00:01:28.984
这句话非常冗余复杂

00:01:28.984 --> 00:01:31.989
仅仅是读出这句话就已经让我感到沮丧

00:01:31.989 --> 00:01:34.765
这句话修改为

00:01:34.765 --> 00:01:40.394
"你好像撒了橙汁在衬衫上" 也可以表达相同的意思

00:01:40.394 --> 00:01:45.179
修改后的表达更加简洁明了

00:01:45.180 --> 00:01:49.340
在行业工作中编写整洁的代码非常重要

00:01:49.340 --> 00:01:54.510
因为团队的工作是在不断迭代的

00:01:54.510 --> 00:02:01.710
整洁代码使你和他人都可以更容易地理解和复用代码

00:02:01.709 --> 00:02:04.375
除了整洁

00:02:04.375 --> 00:02:06.894
你的代码还应该是模块化的

00:02:06.894 --> 00:02:12.824
这意味着 你的程序在逻辑上分解为了函数和模块

00:02:12.824 --> 00:02:16.639
在编程中 模块就是指一个文件

00:02:16.639 --> 00:02:20.689
你可以将代码封装为函数

00:02:20.689 --> 00:02:25.099
并在不同的地方调用函数来复用 与之类似

00:02:25.099 --> 00:02:28.819
你也可以将代码封装在模块或文件中

00:02:28.819 --> 00:02:33.159
然后通过将其导入其他文件来重复使用

00:02:33.159 --> 00:02:36.280
我们稍后会看到这种示例

00:02:36.280 --> 00:02:40.680
为了更好地理解模块化代码

00:02:40.680 --> 00:02:43.944
试着将它想象成存放衣服

00:02:43.944 --> 00:02:48.139
当然 你可以把所有衣服堆在一个抽屉里

00:02:48.139 --> 00:02:51.269
但这样很不容易找到目标

00:02:51.270 --> 00:02:54.490
也许你会因为

00:02:54.490 --> 00:02:57.590
在想要寻找某些衬衫或袜子的时候找不到

00:02:57.590 --> 00:03:02.069
而重复购买了很多一样的款式

00:03:02.069 --> 00:03:05.079
用不同的抽屉区分存放会好很多

00:03:05.080 --> 00:03:07.245
一个专门存放 T 恤

00:03:07.245 --> 00:03:09.224
一个专门存放衬衫

00:03:09.224 --> 00:03:12.114
一个专门存放袜子等

00:03:12.115 --> 00:03:16.225
这样设计后 如果你需要一套合适的服装来面试

00:03:16.224 --> 00:03:21.644
你不需要担心因为找不到合适的衣服而重复购买

00:03:21.645 --> 00:03:26.255
如果你需要告诉别人如何找到合适的衬衫

00:03:26.254 --> 00:03:28.284
裤子和袜子

00:03:28.284 --> 00:03:31.299
这种设计也会让别人的寻找更简单

00:03:31.300 --> 00:03:34.925
编写模块化代码也是如此

00:03:34.925 --> 00:03:38.990
将代码拆分为逻辑性的函数和模块

00:03:38.990 --> 00:03:42.645
可以使你快速查找相关的代码段

00:03:42.645 --> 00:03:48.550
你通常可以将代码概括为不同的片段 方便在不同的地方复用

00:03:48.550 --> 00:03:53.000
防止自己编写额外不必要的代码行

00:03:53.000 --> 00:03:56.960
将细节抽象为函数和模块

00:03:56.960 --> 00:04:01.865
对提高代码的可读性帮助很大

00:04:01.865 --> 00:04:06.500
再次强调 使团队更容易理解和迭代的

00:04:06.500 --> 00:04:11.069
编程方式对于生产至关重要

00:04:11.069 --> 00:04:12.979
在本课中 你将练习

00:04:12.979 --> 00:04:18.879
编写整洁且模块化的代码来帮助你实现这一目标

