WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.639
第一种文档模式是行注释

00:00:04.639 --> 00:00:07.750
到现在为止 你可能已经见过很多次了

00:00:07.750 --> 00:00:11.085
代码中哈希符号 (#) 后面的文本

00:00:11.085 --> 00:00:14.010
它们用于解释部分代码

00:00:14.009 --> 00:00:16.579
对以后的贡献者了解你的工作有很大帮助

00:00:16.579 --> 00:00:19.039
注释的用途有很多种

00:00:19.039 --> 00:00:22.184
但绝对是跟好评、中评以及用户评论不同的
(译者注 英文的 comments 也是评价的意思)

00:00:22.184 --> 00:00:25.154
但绝对是跟好评、中评以及用户评论不同的
(译者注 英文的 comments 也是评价的意思)

00:00:25.155 --> 00:00:27.710
注释的一种用途是记录

00:00:27.710 --> 00:00:31.455
复杂代码的主要步骤 以帮助读者理解使用

00:00:31.454 --> 00:00:35.199
例如 通过此函数的指导注释

00:00:35.200 --> 00:00:39.330
你实际上不需要完全理解代码 就可以了解函数功能

00:00:39.329 --> 00:00:41.585
如果我第一次看到这些

00:00:41.585 --> 00:00:44.605
我不知道这些函数或工具是什么

00:00:44.604 --> 00:00:49.399
这些注释真的可以帮助我理解每个代码块的用途

00:00:49.399 --> 00:00:53.509
甚至可以帮助我理解每一行代码或方法

00:00:53.509 --> 00:00:58.809
然而 也有人会认为这种使用注释的方式证明代码写的不好

00:00:58.810 --> 00:01:01.770
如果代码需要注释才能理解

00:01:01.770 --> 00:01:04.130
明显表明该代码需要重构

00:01:04.129 --> 00:01:08.140
注释对于解释代码无法解释的内容很有价值

00:01:08.140 --> 00:01:13.974
例如 某种方法以特定方式实现的历史原因

00:01:13.974 --> 00:01:18.034
有时使用非常规或看似随意的方法

00:01:18.034 --> 00:01:22.604
可能是因为一些隐蔽的外部变量会导致副作用

00:01:22.605 --> 00:01:25.340
这些东西很难用代码来解释

00:01:25.340 --> 00:01:30.139
这些用于检测图像中边缘水平的数字可能看起来是随意选择的

00:01:30.138 --> 00:01:33.560
但编程人员用不同的数字进行了实验

00:01:33.560 --> 00:01:38.269
意识到这是适用于这个特定用例的数字

