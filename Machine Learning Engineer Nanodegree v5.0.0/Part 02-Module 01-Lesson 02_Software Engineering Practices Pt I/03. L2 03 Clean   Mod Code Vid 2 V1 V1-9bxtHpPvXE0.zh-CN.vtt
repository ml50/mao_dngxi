WEBVTT
Kind: captions
Language: zh-CN

00:00:03.899 --> 00:00:09.734
刚开始为新想法或新任务编写代码时

00:00:09.734 --> 00:00:12.639
很容易将注意力放在

00:00:12.640 --> 00:00:16.570
代码的功能性而不是可读性

00:00:16.570 --> 00:00:22.719
因此在这个开发阶段 你的代码通常会有些混乱和重复

00:00:22.719 --> 00:00:24.769
没关系

00:00:24.769 --> 00:00:29.304
在完成代码之前 很难知道编写代码的最佳方式

00:00:29.304 --> 00:00:35.570
比如 如果你还没有进行足够的调试

00:00:35.570 --> 00:00:38.859
来理解代码的功能 可能很难确切知道

00:00:38.859 --> 00:00:42.905
哪些函数可以将步骤最好地模块化

00:00:42.905 --> 00:00:46.300
这就是为什么总是需要

00:00:46.299 --> 00:00:50.399
在完成工作模型后再返回进行重构的原因

00:00:50.399 --> 00:00:55.600
代码重构的意思是重新构建代码以

00:00:55.600 --> 00:01:01.550
改善其内部结构而不改变其外部功能

00:01:01.549 --> 00:01:06.069
重构让你在完成了功能完整的代码后

00:01:06.069 --> 00:01:10.754
有机会整理和模块化代码

00:01:10.754 --> 00:01:14.670
在短期内 你可能会认为这是浪费时间

00:01:14.670 --> 00:01:17.715
因为原本可以继续下一个功能

00:01:17.715 --> 00:01:22.840
但是 分配时间来重构代码

00:01:22.840 --> 00:01:28.335
从长远来看 反而减少了你和团队开发代码所需的时间

00:01:28.334 --> 00:01:31.579
一致地重构代码不仅

00:01:31.579 --> 00:01:34.829
会让代码以后更容易维护

00:01:34.829 --> 00:01:37.819
还可以让你在不同的任务中重复使用部件

00:01:37.819 --> 00:01:42.434
并在此过程中学习强大的编程技术

00:01:42.435 --> 00:01:45.769
练习重构代码的次数越多

00:01:45.769 --> 00:01:48.034
代码就会变得越直观

00:01:48.034 --> 00:01:52.939
你会发现 在第一次编写代码时越有组织

00:01:52.939 --> 00:01:55.894
回顾的时候所需要重组的内容就越少

00:01:55.894 --> 00:02:00.640
让我们来看几个例子 然后进行练习

