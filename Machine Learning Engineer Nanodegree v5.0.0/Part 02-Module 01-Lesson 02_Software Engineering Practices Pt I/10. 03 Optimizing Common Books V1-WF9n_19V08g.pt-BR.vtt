WEBVTT
Kind: captions
Language: pt-BR

00:00:00.495 --> 00:00:03.053
Como exemplo,
vamos analisar um cenário

00:00:03.086 --> 00:00:05.982
onde vamos otimizar um código
para torná-lo mais eficiente.

00:00:06.997 --> 00:00:09.573
Digamos que estejamos
organizando os livros de uma loja

00:00:09.606 --> 00:00:11.854
e queremos encontrar
todos os livros

00:00:11.887 --> 00:00:14.965
sobre codificação
publicados nos últimos 2 anos.

00:00:14.998 --> 00:00:18.365
Nós temos um arquivo que lista
todos os IDs dos livros

00:00:18.398 --> 00:00:20.717
publicados nos últimos 2 anos

00:00:20.750 --> 00:00:24.686
chamado "livros_publicados_
últimos_dois_anos.txt".

00:00:24.919 --> 00:00:27.733
E também temos um arquivo
para todos os livros de codificação,

00:00:27.766 --> 00:00:30.134
o "todos_livros_
de_codificação.txt".

00:00:30.661 --> 00:00:33.061
Como queremos todos os livros
de codificação

00:00:33.094 --> 00:00:37.325
publicados nos últimos 2 anos,
queremos encontrar os IDs dos livros

00:00:37.358 --> 00:00:39.758
presentes em ambos
os arquivos.

00:00:39.791 --> 00:00:42.101
O seu colega de trabalho
sugeriu este código

00:00:42.134 --> 00:00:45.877
para encontrarmos
os livros em ambos os arquivos.

00:00:46.549 --> 00:00:50.501
Depois de ler os arquivos,
a estratégia dele é fazer o loop

00:00:50.534 --> 00:00:52.725
por cada livro do 1º arquivo,

00:00:52.758 --> 00:00:55.605
checar se ele está presente
no 2º arquivo

00:00:55.638 --> 00:00:58.804
e, se estiver,
adicioná-lo à lista final.

00:00:59.228 --> 00:01:02.164
Isso faz sentido
e é uma 1ª abordagem intuitiva.

00:01:02.949 --> 00:01:04.596
Vamos ver o quanto
ele demora para rodar.

00:01:05.333 --> 00:01:08.397
Ele demorou
cerca de 13,6 segundos.

00:01:08.430 --> 00:01:12.213
Podemos fazer várias coisas
para torná-lo mais eficiente.

00:01:12.636 --> 00:01:13.789
Veja algumas dicas.

00:01:13.822 --> 00:01:18.373
Primeiro, use operações vetoriais
em vez de loops, quando possível.

00:01:18.406 --> 00:01:21.478
NumPy e Pandas são os seus
melhores amigos para isso.

00:01:21.511 --> 00:01:26.998
Em muitos casos, podemos substituir
loops por funções NumPy e Pandas,

00:01:27.031 --> 00:01:31.653
que usam operações vetoriais
para calcular muito mais rápido.

00:01:31.686 --> 00:01:35.045
Às vezes, há um método que faz
exatamente o que você precisa.

00:01:35.078 --> 00:01:37.877
Outras vezes, você precisa
ser um pouco criativo.

00:01:37.910 --> 00:01:41.846
Para este exemplo específico,
você pode usar um método útil.

00:01:41.879 --> 00:01:43.909
Vou mostrar como eu
abordaria isso.

00:01:44.573 --> 00:01:46.541
Sem brincadeira.
Eu jogo no Google:

00:01:46.574 --> 00:01:49.412
"Como encontrar elementos
em comum em 2 arrays no NumPy?"

00:01:49.445 --> 00:01:51.518
E esses são
os resultados que obtenho.

00:01:51.551 --> 00:01:55.461
Use o método"intersect1d" do NumPy
para obter a interseção

00:01:55.494 --> 00:01:59.325
dos arrays dos livros recentes
e dos livros de codificação.

00:01:59.358 --> 00:02:01.205
Eu vou dar o mesmo notebook
para você

00:02:01.238 --> 00:02:03.069
e vou colocar
uma célula bem aqui

00:02:03.102 --> 00:02:05.821
com um código para gravar
o tempo que ele leva para rodar.

00:02:05.854 --> 00:02:08.388
Escreva a sua linha
de código nesta linha.

00:02:08.869 --> 00:02:11.492
A 2ª dica é conhecer
as estruturas dos seus dados

00:02:11.525 --> 00:02:13.733
e saber quais métodos
são mais rápidos.

00:02:13.766 --> 00:02:18.045
Além de contar com o NumPy
e o Pandas, também é bom conferir

00:02:18.078 --> 00:02:21.317
se não há uma estrutura
de dados ou método no Python

00:02:21.350 --> 00:02:24.733
que você pode usar para completar
sua tarefa de forma mais eficaz.

00:02:24.766 --> 00:02:28.989
Por exemplo, neste caso, você lembra
de uma estrutura de dados do Python

00:02:29.022 --> 00:02:31.397
que armazena um grupo
de elementos únicos

00:02:31.430 --> 00:02:35.180
e calcula rapidamente interseções
e uniões entre grupos diferentes?

00:02:35.406 --> 00:02:36.540
Os "sets".

00:02:36.573 --> 00:02:40.061
Leia mais sobre por que "sets"
são mais eficientes que "lists"

00:02:40.094 --> 00:02:42.996
no link no rodapé
desta página.

00:02:43.029 --> 00:02:46.508
Além disso, lembra de quando
eu disse que jogo tudo no Google?

00:02:46.541 --> 00:02:49.822
Da última vez, procurei
como encontrar elementos em comum

00:02:49.855 --> 00:02:51.813
em arrays específicos
do NumPy.

00:02:52.613 --> 00:02:56.068
Mas você pode generalizar
ainda mais e procurar por algo como:

00:02:56.101 --> 00:02:59.148
"Como encontrar elementos em comum
em 2 listas Python?"

00:02:59.181 --> 00:03:00.844
Você verá posts como este,

00:03:00.877 --> 00:03:03.149
que compartilham e comparam
respostas diferentes.

00:03:03.182 --> 00:03:06.157
Veja o "set"
sendo introduzido aqui.

00:03:06.190 --> 00:03:08.589
Essa parece
ser muito bem avaliada.

00:03:08.622 --> 00:03:11.077
No fim, devemos tentar
métodos diferentes

00:03:11.110 --> 00:03:13.941
e comparar a eficácia deles
no nosso exemplo.

00:03:14.325 --> 00:03:16.789
Como métodos diferentes
têm desempenhos diferentes

00:03:16.822 --> 00:03:20.749
em contextos diferentes,
é sempre bom testarmos nós mesmos.

00:03:20.782 --> 00:03:23.164
Na próxima célula
do notebook Jupyter,

00:03:23.197 --> 00:03:26.684
descubra quanto tempo leva
para calcular os elementos comuns

00:03:26.717 --> 00:03:29.132
entre os livros recentes
e os livros de codificação

00:03:29.165 --> 00:03:32.157
usando o método
set intersection do Python.

00:03:32.190 --> 00:03:34.636
Esse é um código que calcula
o tempo gasto.

