WEBVTT
Kind: captions
Language: zh-CN

00:00:04.280 --> 00:00:07.905
假设你是数据科学团队的一员

00:00:07.905 --> 00:00:11.294
负责建立公司的推荐引擎

00:00:11.294 --> 00:00:13.995
你正坐在办公桌前处理一项功能

00:00:13.994 --> 00:00:16.994
根据年龄、性别和关系状态等

00:00:16.995 --> 00:00:21.330
人口统计数据 改善针对用户的推荐

00:00:21.329 --> 00:00:24.329
你正做到一半

00:00:24.329 --> 00:00:28.154
老板过来通知你 商业智能团队

00:00:28.155 --> 00:00:30.900
预测用户的朋友群组可以在短期内

00:00:30.899 --> 00:00:36.073
生成最佳推荐 希望你能立即优先完成该功能

00:00:36.073 --> 00:00:40.199
查看屏幕上的推荐引擎代码

00:00:40.200 --> 00:00:41.429
可以看到有很多

00:00:41.429 --> 00:00:46.789
处理人口统计特征时添加的 未完成的代码

00:00:46.789 --> 00:00:49.674
现在运行这些代码会崩溃

00:00:49.674 --> 00:00:53.864
如果你想立即开始实现新的朋友群组功能

00:00:53.865 --> 00:00:57.650
必须撤消前面这些工作

00:00:57.649 --> 00:01:01.664
或者删除或者注释掉这些未完成的代码

00:01:01.664 --> 00:01:04.995
这会非常混乱和冒险

00:01:04.995 --> 00:01:09.200
但是 如果你正在使用像 git 这样的版本控制系统

00:01:09.200 --> 00:01:14.719
可以直接提交更改 并为此新功能创建另一个分支

00:01:14.719 --> 00:01:16.819
详细说明一下

00:01:16.819 --> 00:01:23.209
公司的推荐引擎有一个 git 代码库 其中有一个 master 分支

00:01:23.209 --> 00:01:27.169
包含生产中使用的代码 还有一个 develop 分支

00:01:27.170 --> 00:01:32.075
其中包含最新稳定版本的代码以及下一版本的更改

00:01:32.075 --> 00:01:36.704
你的电脑上有该代码库的本地版本

00:01:36.704 --> 00:01:41.150
从 develop 分支中获取了最新的稳定版本

00:01:41.150 --> 00:01:44.780
开始处理人口统计功能时

00:01:44.780 --> 00:01:46.835
创建了一个新分支 demographic

00:01:46.834 --> 00:01:51.239
然后开始处理此分支中的代码

00:01:51.239 --> 00:01:53.424
但是做到一半时

00:01:53.424 --> 00:01:55.584
你需要处理另一个功能

00:01:55.584 --> 00:01:57.469
所以你提交 demographic 分支上的更改

00:01:57.469 --> 00:02:01.620
切换回 develop 分支

00:02:01.620 --> 00:02:04.185
在稳定的 develop 分支中

00:02:04.185 --> 00:02:08.560
你为新功能创建另一个分支 friend_group

00:02:08.560 --> 00:02:11.965
完成 friend_group 分支的工作后

00:02:11.965 --> 00:02:13.465
提交你的更改

00:02:13.465 --> 00:02:15.865
切换回 develop 分支

00:02:15.865 --> 00:02:18.330
合并 friend_group 分支

00:02:18.330 --> 00:02:22.265
并将其推送到远程代码库的 develop 分支

00:02:22.264 --> 00:02:24.799
现在你可以切换回

00:02:24.800 --> 00:02:29.040
demographic 分支继续你在该功能上的工作

00:02:29.039 --> 00:02:31.000
正如你在这里看到的

00:02:31.000 --> 00:02:35.014
正确使用 git 提交和分支可以帮助你

00:02:35.014 --> 00:02:39.039
同时处理多个功能 轻松切换

