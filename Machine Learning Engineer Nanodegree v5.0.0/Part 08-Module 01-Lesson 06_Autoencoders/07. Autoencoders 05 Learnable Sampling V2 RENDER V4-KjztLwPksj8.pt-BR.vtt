WEBVTT
Kind: captions
Language: pt-BR

00:00:00.193 --> 00:00:02.496
Depois de construirmos
um autocodificador

00:00:02.529 --> 00:00:03.872
com camadas lineares,

00:00:03.905 --> 00:00:06.769
vamos melhorar o modelo
com camadas convolucionais.

00:00:06.802 --> 00:00:10.337
Elas nos ajudarão a preservar
informações espaciais,

00:00:10.370 --> 00:00:14.048
assim elas são uma solução
melhor e mais elegante

00:00:14.081 --> 00:00:16.729
para codificar e decodificar
imagens.

00:00:16.762 --> 00:00:20.828
O codificador de um autocodificador
é algo que já vimos

00:00:20.861 --> 00:00:22.717
nas aulas sobre CNNs.

00:00:22.750 --> 00:00:24.398
Ele é constituído de uma série

00:00:24.431 --> 00:00:26.661
de camadas convolucionais
e de max pooling,

00:00:26.694 --> 00:00:30.077
que diminuem as dimensões espaciais
da imagem de input.

00:00:30.110 --> 00:00:34.941
Vimos como ir de uma imagem de input
para a representação comprimida.

00:00:34.974 --> 00:00:37.967
O decodificador é algo
que não vimos antes.

00:00:38.000 --> 00:00:42.646
Como ir da representação comprimida
para a imagem reconstruída?

00:00:42.679 --> 00:00:46.661
No código de exemplo, vimos
que podemos usar uma camada linear

00:00:46.694 --> 00:00:50.693
para deixar os inputs
com o tamanho desejado de output,

00:00:50.726 --> 00:00:53.817
assim podemos reverter facilmente
os passos de codificação.

00:00:53.850 --> 00:00:56.505
Porém, com a imagem de input
em vez do vetor,

00:00:56.538 --> 00:00:58.777
existem algumas
abordagens possíveis,

00:00:58.810 --> 00:01:00.529
mas o objetivo final
é o mesmo:

00:01:00.562 --> 00:01:04.577
queremos reverter o processo
de compressão do codificador

00:01:04.610 --> 00:01:07.793
e aumentar as dimensões
espaciais de um input comprimido,

00:01:07.826 --> 00:01:09.826
para produzir uma imagem
reconstruída

00:01:09.859 --> 00:01:12.827
com o mesmo formato
do input original.

00:01:12.860 --> 00:01:15.961
Em de reduzir
usando a max pooling,

00:01:15.994 --> 00:01:18.577
tente imaginar
a ampliação de uma imagem

00:01:18.610 --> 00:01:21.491
fazendo o contrário do pooling
dos valores de input.

00:01:21.524 --> 00:01:23.551
Podemos usar uma técnica
de interpolação:

00:01:23.584 --> 00:01:27.380
a dos vizinhos mais próximos ou
outro tipo de interpolação linear.

00:01:27.413 --> 00:01:29.798
A dos vizinhos mais próximos
expande uma área

00:01:29.831 --> 00:01:32.949
copiando um valor do pixel
da imagem de input,

00:01:32.982 --> 00:01:36.534
de uma área de 2x2, por exemplo,
para uma imagem de output maior.

00:01:36.567 --> 00:01:39.485
Se você já tentou ampliar
uma imagem de baixa resolução,

00:01:39.518 --> 00:01:42.302
esse tipo de ampliação
é o que geralmente acontece,

00:01:42.335 --> 00:01:45.894
mas a interpolação
é uma forma crua de ampliação.

00:01:45.927 --> 00:01:49.789
No caso dos vizinhos mais próximos,
copiamos valores existentes,

00:01:49.822 --> 00:01:53.079
mas uma imagem mais realista
terá mais variedade

00:01:53.112 --> 00:01:54.478
de valores de pixel,

00:01:54.511 --> 00:01:57.702
então deve haver uma maneira
melhor de ampliação.

00:01:57.735 --> 00:02:01.726
Podemos tentar aprender
como fazer uma ampliação melhor.

00:02:01.759 --> 00:02:04.141
Se quisermos que a rede
aprenda a ampliação,

00:02:04.174 --> 00:02:07.021
podemos usar
uma camada convolucional transposta.

00:02:07.054 --> 00:02:10.406
Ela não usa um método
de interpolação pré-definido,

00:02:10.439 --> 00:02:13.149
em vez disso, ela tem
parâmetros aprendíveis.

00:02:13.182 --> 00:02:16.798
Isso é chamado, às vezes,
de "camadas deconvolucionais",

00:02:16.831 --> 00:02:19.861
mas isso não é desfazer
um passo convolucional.

00:02:19.894 --> 00:02:22.693
Acho mais útil pensar
na convolução transposta

00:02:22.726 --> 00:02:25.481
como uma forma de ampliar
valores de input existentes

00:02:25.514 --> 00:02:28.979
usando pesos de filtros,
de forma parecida com a convolução.

00:02:29.012 --> 00:02:31.870
Antes de codificarmos,
veremos a matemática

00:02:31.903 --> 00:02:34.166
por trás da camada
convolucional transposta.

