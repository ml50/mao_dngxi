WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.120
我制作了世界银行数据仪表板的另一个版本

00:00:05.120 --> 00:00:08.945
这次是在后端使用 API 来获取数据

00:00:08.945 --> 00:00:12.780
你还会注意到 多了一个新的红色按钮

00:00:12.779 --> 00:00:16.994
这实际上是一个菜单 是我创建的一个过滤器

00:00:16.995 --> 00:00:19.830
你可以在其中选择特定的国家并提交

00:00:19.829 --> 00:00:25.459
然后它将仅返回你所筛选的国家数据

00:00:25.460 --> 00:00:28.219
添加这项额外功能的原因是

00:00:28.219 --> 00:00:32.004
可能你已经对 Web 开发有所了解

00:00:32.005 --> 00:00:35.810
我想鼓励你添加更多功能

00:00:35.810 --> 00:00:39.950
这还可以帮助你了解

00:00:39.950 --> 00:00:44.734
后端代码与 API 协作的一些原理

00:00:44.734 --> 00:00:47.299
我要做的就是演示

00:00:47.299 --> 00:00:49.789
Web 应用这个版本的代码

00:00:49.789 --> 00:00:52.399
这样你就可以了解其工作原理以及

00:00:52.399 --> 00:00:56.979
使用 API 而不是 CSV 文件 提取数据的方式

00:00:56.979 --> 00:01:03.094
在左侧 可以看到组成该版本应用的所有文件

00:01:03.094 --> 00:01:06.019
在左侧 可以看到组成该版本应用的所有文件

00:01:06.019 --> 00:01:09.519
我也将其放在了 GitHub 上 方便你下载查看

00:01:09.519 --> 00:01:13.879
唯一修改的文件是这个 data.py

00:01:13.879 --> 00:01:19.444
该文件位于 scripts 文件夹 这就是我进行所有数据整理的地方

00:01:19.444 --> 00:01:23.929
然后是 index.html 我在其中添加了代码

00:01:23.930 --> 00:01:31.010
处理红色的过滤器菜单 然后我必须

00:01:31.010 --> 00:01:34.204
在 routes.py 中添加一些额外的代码

00:01:34.204 --> 00:01:38.900
来完成筛选的逻辑

00:01:38.900 --> 00:01:43.435
我们从数据整理和 data.py 开始

00:01:43.435 --> 00:01:49.594
暂时还不必太担心红色过滤器在前端如何工作

00:01:49.594 --> 00:01:53.280
我先演示一下 API 数据整理代码的工作

00:01:53.280 --> 00:01:56.019
我先演示一下 API 数据整理代码的工作

00:01:56.019 --> 00:02:01.049
从这个 country_default 字典开始

00:02:01.049 --> 00:02:06.560
其中有国家名称和三个字符的 ISO 编码

00:02:06.560 --> 00:02:11.319
在之前的视频中 我使用了两个字符的 ISO 编码

00:02:11.319 --> 00:02:15.019
在这段代码中 我实际上使用了三个字符的 ISO 代码

00:02:15.020 --> 00:02:17.360
但无论哪种方式都对该 API 适用

00:02:17.360 --> 00:02:21.815
这里 像之前一样有 return_figures 函数

00:02:21.814 --> 00:02:26.495
现在的区别是 我输入的是这个国家列表

00:02:26.495 --> 00:02:30.080
这就是我要筛选的国家 默认情况下

00:02:30.080 --> 00:02:34.590
是所有国家 向下滚动

00:02:34.590 --> 00:02:41.300
这里的逻辑是说 万一没有传入国家变量

00:02:41.300 --> 00:02:47.490
则将 countries 变量设置为默认值 然后在这里做了一些准备工作

00:02:47.490 --> 00:02:51.550
每个国家名称之间用分号分隔 因为这就是 API 在 URL 中的预期格式

00:02:51.550 --> 00:02:57.155
每个国家名称之间用分号分隔 因为这就是 API 在 URL 中的预期格式

00:02:57.155 --> 00:03:02.449
然后这里将要获取的指标 创建了一个列表存储

00:03:02.449 --> 00:03:07.594
因为我想使用 for 循环进行遍历 一次性处理所有可视化

00:03:07.594 --> 00:03:10.034
往下移一点

00:03:10.034 --> 00:03:12.460
这是遍历指标的地方

00:03:12.460 --> 00:03:19.159
第一步是准备好 URL 字符串 用来发送给世界银行 API

00:03:19.159 --> 00:03:23.525
在下面的第 54 行代码中使用 requests 库

00:03:23.525 --> 00:03:29.439
获取 URL 然后收到 JSON 格式的数据

00:03:29.439 --> 00:03:31.300
第 59 行代码

00:03:31.300 --> 00:03:34.670
遍历从 API 获得的数据

00:03:34.669 --> 00:03:38.954
为 plotly 的使用做准备

00:03:38.955 --> 00:03:42.365
这就是 for 循环结束的地方

00:03:42.365 --> 00:03:45.640
再次回去 接下来处理的就是下一个指标

00:03:45.639 --> 00:03:50.119
准备 URL 然后获取数据

00:03:50.120 --> 00:03:55.444
将其放入一个 dataframe 在第 63 行代码追加到这个 data_frames 变量中

00:03:55.444 --> 00:03:58.549
这样我就可以将所有数据准备好了

00:03:58.550 --> 00:04:01.640
数据准备好后

00:04:01.639 --> 00:04:04.794
再准备每个图表

00:04:04.794 --> 00:04:06.799
每次绘制一个可视化

00:04:06.800 --> 00:04:09.080
就像之前版本的代码一样

00:04:09.080 --> 00:04:13.070
在这准备 graph_one 仍然有一些数据整理工作

00:04:13.069 --> 00:04:18.980
我要做一些排序 确保按照想要的正确顺序进行绘制

00:04:18.980 --> 00:04:22.730
获取国家列表 像之前的版本一样

00:04:22.730 --> 00:04:27.720
这里是为 plotly 准备好 graph_one

00:04:27.720 --> 00:04:30.185
这里也同样有布局的设置

00:04:30.185 --> 00:04:35.930
然后 使用创建的第二个 dataframe 准备 graph_two

00:04:35.930 --> 00:04:38.375
同样有一些数据整理操作

00:04:38.375 --> 00:04:41.750
然后准备 graph_two 和 layout_two

00:04:41.750 --> 00:04:45.730
graph_three 继续向下 graph_four

00:04:45.730 --> 00:04:53.015
然后追加所有图表 函数返回所有图表

00:04:53.014 --> 00:04:58.069
因此 data.py 文件的主要区别是

00:04:58.069 --> 00:05:03.139
我使用了 API 获取数据 而不是之前上传的 CSV 文件

00:05:03.139 --> 00:05:05.555
我使用了 API 获取数据 而不是之前上传的 CSV 文件

00:05:05.555 --> 00:05:08.660
接下来看一下 index.html

00:05:08.660 --> 00:05:13.790
index.html 与之前看起来非常相似

00:05:13.790 --> 00:05:18.560
唯一的区别是我添加了一个可折叠的过滤器

00:05:18.560 --> 00:05:23.225
本质上是一个可以提交的 HTML 表单

00:05:23.225 --> 00:05:26.420
我之前没有讲过 如何制作表单

00:05:26.420 --> 00:05:30.340
如何提交表单 以及这些逻辑如何运作

00:05:30.339 --> 00:05:31.669
但我稍后会带你浏览代码

00:05:31.670 --> 00:05:34.949
使你对这些内容有所了解

00:05:34.949 --> 00:05:38.649
这稍微超出了本课程的大纲

00:05:38.649 --> 00:05:43.189
但是如果你真的喜欢做这些 Web 开发工作

00:05:43.189 --> 00:05:48.004
这会让你知道 还有更多的东西要学习 你可以添加更多的功能

00:05:48.004 --> 00:05:53.569
向下滚动 这里是用于过滤器的下拉菜单

00:05:53.569 --> 00:06:00.980
所有这些都来自 Bootstrap 网站上的示例

00:06:00.980 --> 00:06:04.460
这里有一个按钮 是红色按钮 然后有一个下拉菜单

00:06:04.459 --> 00:06:08.409
你会看到这里使用了 Jinja

00:06:08.410 --> 00:06:12.830
一会儿我会解释其作用

00:06:12.829 --> 00:06:18.430
这里是表单 这个表单实际上可以提交

00:06:18.430 --> 00:06:22.000
通过点击此处的 submit 按钮

00:06:22.000 --> 00:06:27.754
那么这些 Jinja 代码在做什么?

00:06:27.754 --> 00:06:32.240
基本上 我从前端得到

00:06:32.240 --> 00:06:36.889
那些被选中被提交的变量

00:06:36.889 --> 00:06:42.034
做一些过滤 以便我知道如何根据之前提交的内容

00:06:42.035 --> 00:06:44.375
显示哪些需要被选中

00:06:44.375 --> 00:06:47.725
这里是填充所有国家的名称

00:06:47.725 --> 00:06:50.570
如果你对 JavaScript Jinja 和 HTML 不太熟悉 可能会有些混乱

00:06:50.569 --> 00:06:55.714
如果你对 JavaScript Jinja 和 HTML 不太熟悉 可能会有些混乱

00:06:55.714 --> 00:06:59.949
但是请再阅读一下代码 看看是否可以理解

00:06:59.949 --> 00:07:04.814
这个代码的另一个关键之处在下面这里

00:07:04.814 --> 00:07:08.344
我写了一些 JavaScript

00:07:08.345 --> 00:07:13.340
实际上是 jQuery 负责过滤器的功能

00:07:13.339 --> 00:07:17.644
比如 你可以在这里看到

00:07:17.644 --> 00:07:21.799
会根据 Select All 框来选中或取消选中框

00:07:21.800 --> 00:07:25.329
如果返回这里 点击 Select All

00:07:25.329 --> 00:07:29.164
这就是代码对应的功能 取消选中某个框的时候

00:07:29.165 --> 00:07:33.200
会将 Select All 的框也取消选中 所以在这里

00:07:33.199 --> 00:07:37.110
我点击一些框 会取消选中 Select All 框

00:07:37.110 --> 00:07:41.420
重新选中其他所有框时 Select All 也会被选中 就像你刚才看到的

00:07:41.420 --> 00:07:44.814
当重新选中所有框时 Select All 也被选中了

00:07:44.814 --> 00:07:51.680
还有一部分是 routes.py 而 routes.py 实际上是非常相似的

00:07:51.680 --> 00:07:59.660
如果从这里往下看 应该看起来和之前非常相似

00:07:59.660 --> 00:08:05.165
现在的区别是 routes.py 必须负责提交这个表单

00:08:05.165 --> 00:08:11.480
提交表单时 它会发送一个 POST 请求

00:08:11.480 --> 00:08:19.129
当你发送 POST 请求时

00:08:19.129 --> 00:08:23.839
代码就说 来读取这个表单 找出哪些国家被选中了

00:08:23.839 --> 00:08:29.569
将每个被选中的国家添加到这个 countries_selected 列表中

00:08:29.569 --> 00:08:35.240
然后你可以在此处看到 countries_selected 被发送到了前端的 index.html

00:08:35.240 --> 00:08:41.914
这就是 index.html 中许多 Jinja 代码使用的

00:08:41.914 --> 00:08:46.644
遍历这个 countries_selected 变量

00:08:46.644 --> 00:08:49.490
这样它就能根据过滤器 知道应该选中哪个框不应该选中哪个框

00:08:49.490 --> 00:08:52.580
这样它就能根据过滤器 知道应该选中哪个框不应该选中哪个框

00:08:52.580 --> 00:08:56.750
我知道这次浏览代码有点太快了 但是如果你将这些代码自己下载下来

00:08:56.750 --> 00:09:01.054
花时间阅读 弄清楚其中的逻辑

00:09:01.054 --> 00:09:06.334
会帮助你了解在一个 Web 应用中可以实现什么功能

00:09:06.335 --> 00:09:08.870
但主要需要考虑的是

00:09:08.870 --> 00:09:11.634
如果你想要完成项目的进阶版本

00:09:11.634 --> 00:09:14.504
是 data.py 中的功能

00:09:14.504 --> 00:09:19.189
这里的过滤器实际上只是一个多余的额外功能

00:09:19.190 --> 00:09:24.635
重点是看我如何使用 API

00:09:24.634 --> 00:09:30.929
在 data.py 中获取数据 进行绘图

