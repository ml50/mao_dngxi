WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.120
I've made another version of the World Bank data dashboard and this time,

00:00:05.120 --> 00:00:08.945
I've used the API on the backend to get the data.

00:00:08.945 --> 00:00:12.780
You'll also notice that there's a new red button.

00:00:12.779 --> 00:00:16.994
This is actually a menu where I've created a filter,

00:00:16.995 --> 00:00:19.830
where you can choose certain countries and

00:00:19.829 --> 00:00:25.459
submit and then it will filter out for just the countries that you've chosen.

00:00:25.460 --> 00:00:28.219
The reason why I have added this extra feature,

00:00:28.219 --> 00:00:32.004
is just in case you already know a little bit about web development.

00:00:32.005 --> 00:00:35.810
I'm trying to encourage you to add extra features if you want to

00:00:35.810 --> 00:00:39.950
and it also might help you understand a little bit,

00:00:39.950 --> 00:00:44.734
how the code works with the API on the backend.

00:00:44.734 --> 00:00:47.299
So what I'm gonna do is I'm going to show you

00:00:47.299 --> 00:00:49.789
the code behind this version of the web app.

00:00:49.789 --> 00:00:52.399
So that you can see how it works and how I've used

00:00:52.399 --> 00:00:56.979
the API to pull the data instead of using a CSV file.

00:00:56.979 --> 00:01:03.094
So here on the left you can see all of the files that make up

00:01:03.094 --> 00:01:06.019
this version of the web app and I'll also put

00:01:06.019 --> 00:01:09.519
this on GitHub so that you can download and take a look at it.

00:01:09.519 --> 00:01:13.879
The only files that have changed is this data.py

00:01:13.879 --> 00:01:19.444
file which is inside of scripts and that's where I'm doing all the data wrangling.

00:01:19.444 --> 00:01:23.929
Then there's index.html where I've added the code,

00:01:23.930 --> 00:01:31.010
that takes care of the red filter menu and then I've had to add

00:01:31.010 --> 00:01:34.204
a little bit of extra code into rootstock.py

00:01:34.204 --> 00:01:38.900
to take care of the logic for all of the filtering.

00:01:38.900 --> 00:01:43.435
So let's start with the data wrangling and data.py.

00:01:43.435 --> 00:01:49.594
Don't worry too much yet about how the red filter works on the front end.

00:01:49.594 --> 00:01:53.280
I'm just going to show you what the API.

00:01:53.280 --> 00:01:56.019
data wrangling code is doing.

00:01:56.019 --> 00:02:01.049
So I'm starting out with this country default dictionary,

00:02:01.049 --> 00:02:06.560
where I have the country name and the three character ISO codes.

00:02:06.560 --> 00:02:11.319
Before in earlier videos I used the two character ISO codes.

00:02:11.319 --> 00:02:15.019
In this code I actually use the three-character ISO codes,

00:02:15.020 --> 00:02:17.360
but either way works with the API.

00:02:17.360 --> 00:02:21.815
So here I have my return figures function like before and

00:02:21.814 --> 00:02:26.495
the difference now is that I'm inputting this list of countries.

00:02:26.495 --> 00:02:30.080
So it's the countries that I'm filtering for and by default I want

00:02:30.080 --> 00:02:34.590
all the countries. So let's scroll down.

00:02:34.590 --> 00:02:41.300
This logic here says that just in case there's no country's variable sent over

00:02:41.300 --> 00:02:47.490
my country default the country's variable and then I do a little bit of preparation here,

00:02:47.490 --> 00:02:51.550
where I make a list of the countries with the semicolon between

00:02:51.550 --> 00:02:57.155
each country name because that's what the API is going to expect in the URL.

00:02:57.155 --> 00:03:02.449
Then here I'm making a list of indicators that I want to grab because I'm going to

00:03:02.449 --> 00:03:07.594
iterate through them in a for loop and make all of the visualizations one at a time.

00:03:07.594 --> 00:03:10.034
So moving down a little bit,

00:03:10.034 --> 00:03:12.460
here's where I iterate through each indicator.

00:03:12.460 --> 00:03:19.159
So the first step is to get the URL string ready to send over to the World Bank API.

00:03:19.159 --> 00:03:23.525
Then I use the Request library down here in line 54

00:03:23.525 --> 00:03:29.439
to get the URL and then I receive the data back in Json.

00:03:29.439 --> 00:03:31.300
Here in line 59,

00:03:31.300 --> 00:03:34.670
I'm iterating through the data that I got back from

00:03:34.669 --> 00:03:38.954
the World Bank API and getting it ready for plotly.

00:03:38.955 --> 00:03:42.365
So that is the end of the foreloop so going back

00:03:42.365 --> 00:03:45.640
up what happens is that it goes to the next indicator,

00:03:45.639 --> 00:03:50.119
prepares the URL and then gets the data and

00:03:50.120 --> 00:03:55.444
then puts it in a dataframe and appends it to this data frames variable in line 63.

00:03:55.444 --> 00:03:58.549
So that I'm getting all the data prepared.

00:03:58.550 --> 00:04:01.640
Once the data is ready,

00:04:01.639 --> 00:04:04.794
I go and prepare each graph,

00:04:04.794 --> 00:04:06.799
each visualization one at a time,

00:04:06.800 --> 00:04:09.080
just like before and the other version of the code.

00:04:09.080 --> 00:04:13.070
So here I'm preparing graph one there is still some data wrangling I have to

00:04:13.069 --> 00:04:18.980
do some sorting to make sure that everything's in the right order that I want.

00:04:18.980 --> 00:04:22.730
I get the country list just like I did before and the other version of

00:04:22.730 --> 00:04:27.720
my app and here I'm preparing graph one for plotly.

00:04:27.720 --> 00:04:30.185
Then I have the layout here as well.

00:04:30.185 --> 00:04:35.930
Then I'm preparing graph two with the second dataframe that I created and

00:04:35.930 --> 00:04:38.375
again there's a little bit of data wrangling

00:04:38.375 --> 00:04:41.750
and then I prepare graph two and layout for two,

00:04:41.750 --> 00:04:45.730
graph three scrolling down graph

00:04:45.730 --> 00:04:53.015
four and then I append all the charts and my function returns all of the figures.

00:04:53.014 --> 00:04:58.069
So the major difference here in this data.py file is

00:04:58.069 --> 00:05:03.139
that I'm using the API to get the data instead of using CSV files,

00:05:03.139 --> 00:05:05.555
that I've uploaded as part of my web app.

00:05:05.555 --> 00:05:08.660
Next let's look at index.html.

00:05:08.660 --> 00:05:13.790
So index.html is very similar to what it looked like before.

00:05:13.790 --> 00:05:18.560
The only difference is that I've added a collapsible filter,

00:05:18.560 --> 00:05:23.225
which in reality is just an HTML form that you can submit.

00:05:23.225 --> 00:05:26.420
So I didn't show you how to make a form

00:05:26.420 --> 00:05:30.340
before or how to submit a form and how all of that logic works,

00:05:30.339 --> 00:05:31.669
but I'll walk you through the code

00:05:31.670 --> 00:05:34.949
a little bit just so you have an idea of what's going on.

00:05:34.949 --> 00:05:38.649
It's a little bit beyond the scope of this course,

00:05:38.649 --> 00:05:43.189
but it shows you that if you really like doing this web development stuff,

00:05:43.189 --> 00:05:48.004
that there's more to learn and more to do and you can keep adding more features.

00:05:48.004 --> 00:05:53.569
So scrolling down, here I have drop-down menu for filter.

00:05:53.569 --> 00:06:00.980
So all of this came from an example on the Bootstrap website and so

00:06:00.980 --> 00:06:04.460
I have a button here which is the red button and then I have a drop

00:06:04.459 --> 00:06:08.409
down menu and you can see here I'm using Ginger,

00:06:08.410 --> 00:06:12.830
which I'll explain in a minute what I'm doing and then there's

00:06:12.829 --> 00:06:18.430
a form and so then this form can actually be submitted,

00:06:18.430 --> 00:06:22.000
with this submit button down here.

00:06:22.000 --> 00:06:27.754
So what does all of this Ginger code doing.

00:06:27.754 --> 00:06:32.240
Essentially. I'm getting from the front-end which

00:06:32.240 --> 00:06:36.889
variables were selected or submitted and I

00:06:36.889 --> 00:06:42.034
am doing some filtering so that I know which ones should be checked

00:06:42.035 --> 00:06:44.375
based on what were submitted before

00:06:44.375 --> 00:06:47.725
and here I'm populating the names of all the countries.

00:06:47.725 --> 00:06:50.570
So maybe a little bit confusing if you're not too

00:06:50.569 --> 00:06:55.714
familiar with JavaScript and Ginger and html.

00:06:55.714 --> 00:06:59.949
But look at the code for a bit and see if you can figure it out.

00:06:59.949 --> 00:07:04.814
The other key to this code is down here,

00:07:04.814 --> 00:07:08.344
there's a little bit of JavaScript that I've written

00:07:08.345 --> 00:07:13.340
actually Jquery to take care of the filter.

00:07:13.339 --> 00:07:17.644
So for example you can see here that

00:07:17.644 --> 00:07:21.799
this checks or unchecks the filter box is based on the Select All box.

00:07:21.800 --> 00:07:25.329
So if you go back here and you hit Select All,

00:07:25.329 --> 00:07:29.164
that's what this is taken care of uncheck Select All box when

00:07:29.165 --> 00:07:33.200
unchecking another box so that's here when I click

00:07:33.199 --> 00:07:37.110
on something it unchecks the Select All box and then

00:07:37.110 --> 00:07:41.420
checks Select All when rechecking all the other boxes which you just saw.

00:07:41.420 --> 00:07:44.814
When I recheck everything Select All gets chosen.

00:07:44.814 --> 00:07:51.680
So the other part to look at is rootstock.py and rootstock.py is very similar in

00:07:51.680 --> 00:07:59.660
fact if you look from here down it should look quite similar to what we had before.

00:07:59.660 --> 00:08:05.165
The difference is now roots.py He has to take care of submitting this form.

00:08:05.165 --> 00:08:11.480
So what happens is when you submit the form it sends out something called a

00:08:11.480 --> 00:08:19.129
request a post request and so when you send out this post request.

00:08:19.129 --> 00:08:23.839
I'm saying hey read this form and figure out which countries were

00:08:23.839 --> 00:08:29.569
selected and then for each country that was selected appended to this list.

00:08:29.569 --> 00:08:35.240
Countries selected and then you can see here countries selected is sent to the front end

00:08:35.240 --> 00:08:41.914
at index.html and that's what a lot of the Ginger code in index.html was doing.

00:08:41.914 --> 00:08:46.644
It was iterating through this country's selected variable,

00:08:46.644 --> 00:08:49.490
so that it knew which check box should be

00:08:49.490 --> 00:08:52.580
checked and which ones shouldn't be based on the filter.

00:08:52.580 --> 00:08:56.750
So I know I'm kind of going through this quickly but I think if you download

00:08:56.750 --> 00:09:01.054
this code yourself and take the time to look at it and figure out all the logic.

00:09:01.054 --> 00:09:06.334
It'll be really helpful for just seeing what you can do with a web app.

00:09:06.335 --> 00:09:08.870
But the main thing to think about,

00:09:08.870 --> 00:09:11.634
if you're doing the advanced version of the project,

00:09:11.634 --> 00:09:14.504
is what's happening in data.py

00:09:14.504 --> 00:09:19.189
the filter thing here is really just extra and extra thing I made.

00:09:19.190 --> 00:09:24.635
But the main point is looking at how I've used the API

00:09:24.634 --> 00:09:30.929
in data.py to get the data and then use it to make the plots.

