WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.980
下面说说我是如何创建一个利用训练脚本的自定义 estimator 的

00:00:04.980 --> 00:00:09.285
首先我从 sagemaker.pytorch 导入了 PyTorch Estimator

00:00:09.285 --> 00:00:11.730
然后指定输出路径

00:00:11.730 --> 00:00:14.330
表示我要将训练过的模型保存到 S3 上的哪个位置

00:00:14.330 --> 00:00:18.600
然后创建一个 estimator 并传入几个构造函数参数

00:00:18.600 --> 00:00:21.960
先打开 PyTorch estimator 文档

00:00:21.960 --> 00:00:24.539
从这里可以看到 estimator 的参数包括入口点

00:00:24.539 --> 00:00:28.859
源目录以及几个超参数 包括框架版本

00:00:28.859 --> 00:00:33.899
向下滚动 可以看到入口点是指 Python 源文件的路径

00:00:33.899 --> 00:00:36.494
它将执行并作为训练的入口点

00:00:36.494 --> 00:00:40.769
源目录是指包含任何其他训练源代码依赖项的目录

00:00:40.770 --> 00:00:43.025
现在它将是保存了

00:00:43.024 --> 00:00:45.664
model.py 文件的源目录

00:00:45.664 --> 00:00:49.490
超参数是指在参数解析器中指定的项

00:00:49.490 --> 00:00:50.719
框架版本是指

00:00:50.719 --> 00:00:53.839
在执行模型时你希望使用的 PyTorch 版本

00:00:53.840 --> 00:00:55.845
我指定了入口点

00:00:55.844 --> 00:00:59.164
训练脚本以及源代码所在的目录

00:00:59.164 --> 00:01:01.070
因为我演示的是解决方案

00:01:01.070 --> 00:01:04.474
所以使用了 source_solution 中的代码

00:01:04.474 --> 00:01:07.789
但是如果你自己完成了 train.py 文件

00:01:07.790 --> 00:01:12.185
你可以在这里设为 source 并使用你完成的 train.py 文件

00:01:12.185 --> 00:01:15.350
然后指定常规的 SageMaker 参数

00:01:15.349 --> 00:01:19.194
包括角色和训练实例以及 SageMaker 会话

00:01:19.194 --> 00:01:22.329
我想使用最新版 PyTorch

00:01:22.329 --> 00:01:25.015
在录制本视频时为版本 1.0

00:01:25.015 --> 00:01:28.415
我在这里指定了模型和训练超参数

00:01:28.415 --> 00:01:32.240
我知道输入数据是二维的

00:01:32.239 --> 00:01:34.144
并且指定了隐藏节点的数量

00:01:34.144 --> 00:01:37.219
希望模型够复杂 能够发现数据中的模式

00:01:37.219 --> 00:01:40.219
我希望输出是一个值

00:01:40.219 --> 00:01:44.099
并且指定要训练 80 个周期

00:01:44.099 --> 00:01:45.774
在实际训练过程中

00:01:45.775 --> 00:01:49.590
我将观察模型损失

00:01:49.590 --> 00:01:53.600
如果损失继续下降 则训练更长时间

00:01:53.599 --> 00:01:55.714
如果损失停滞不变 则减少训练周期

00:01:55.715 --> 00:01:59.329
我已经创建了自定义 PyTorch estimator

00:01:59.329 --> 00:02:02.974
下一步是使用训练数据训练该 estimator

00:02:02.974 --> 00:02:04.780
在训练脚本中

00:02:04.780 --> 00:02:08.569
训练数据加载器明确要求输入是 csv 文件

00:02:08.569 --> 00:02:13.174
第一列是标签 其余列是特征

00:02:13.175 --> 00:02:15.740
所以我们不需要进一步处理

00:02:15.740 --> 00:02:19.219
之前存储到 S3 上的 train.csv 文件

00:02:19.219 --> 00:02:23.330
自定义 estimator 将直接接受该 csv 文件

00:02:23.330 --> 00:02:25.820
除了传入数据之外

00:02:25.819 --> 00:02:27.859
还将传入一个字典

00:02:27.860 --> 00:02:31.400
指定该数据将在训练渠道中处理

00:02:31.400 --> 00:02:33.950
这样就会启动具有这个名称的训练作业

00:02:33.949 --> 00:02:38.599
可以看到实例在运行以及模型参数详细信息

00:02:38.599 --> 00:02:41.180
例如应该看到训练脚本被调用

00:02:41.180 --> 00:02:43.685
并且设为指定的周期数

00:02:43.685 --> 00:02:46.969
隐藏维度 输入维度和输出维度

00:02:46.969 --> 00:02:51.169
然后 训练循环将在每个周期之后输出平均训练损失

00:02:51.169 --> 00:02:53.059
应该看到损失在下降

00:02:53.060 --> 00:02:54.620
在第 80 个周期

00:02:54.620 --> 00:02:58.069
损失从 0.8 下降到了 0.4

00:02:58.069 --> 00:03:01.534
看起来下降速度很慢 但是依然在下降

00:03:01.534 --> 00:03:03.514
所以可以设为训练更长时间

00:03:03.514 --> 00:03:05.059
我们完成了很多步骤

00:03:05.060 --> 00:03:08.360
从定义自定义 estimator 到训练该 estimator

00:03:08.360 --> 00:03:12.740
在部署该 estimator 并作出预测之前 还有一步要完成

00:03:12.740 --> 00:03:18.010
你可能注意到了 在之前的示例中 当我对 LinearLearner 调用 .deploy 时

00:03:18.009 --> 00:03:23.764
发生了两项操作 系统创建了 LinearLearner 模型并且创建了端点

00:03:23.764 --> 00:03:26.224
对于自定义 PyTorch 模型

00:03:26.224 --> 00:03:30.039
我需要单独创建模型和端点

00:03:30.039 --> 00:03:34.159
PyTorch 模型并没有自动内置 .predict 函数

00:03:34.159 --> 00:03:38.030
你可能注意到了 我们提供了 predict.py 文件

00:03:38.030 --> 00:03:40.189
此文件负责加载训练过的模型

00:03:40.189 --> 00:03:44.210
并将其应用到传入的数据上以生成预测

00:03:44.210 --> 00:03:47.510
就像 estimator 知道训练脚本在哪一样

00:03:47.509 --> 00:03:53.094
下个任务是创建一个知道这个 predict.py 文件在哪的 PyTorch 模型

00:03:53.094 --> 00:03:57.669
一个 PyTorch 模型需要几个构造函数参数

00:03:57.669 --> 00:04:00.409
包括入口点 这里是我们的 predict.py 文件

00:04:00.409 --> 00:04:03.379
还需要训练过的 estimator 数据

00:04:03.379 --> 00:04:05.120
即训练的模型属性

00:04:05.120 --> 00:04:09.485
它是压缩模型文件 我们之前通过它探索模型属性

00:04:09.485 --> 00:04:11.915
并且用来部署模型

00:04:11.914 --> 00:04:13.594
训练 estimator 后

00:04:13.594 --> 00:04:16.475
你可以通过调用 estimator.model_data 获取该 estimator

00:04:16.475 --> 00:04:19.430
请试着自己创建并部署此模型

00:04:19.430 --> 00:04:21.079
如果你完成了这些任务

00:04:21.079 --> 00:04:24.324
可以将部署的预测器应用到测试数据上 看看效果如何

00:04:24.324 --> 00:04:29.870
在下个视频中 我将演示一种解决方案以及一些测试结果

