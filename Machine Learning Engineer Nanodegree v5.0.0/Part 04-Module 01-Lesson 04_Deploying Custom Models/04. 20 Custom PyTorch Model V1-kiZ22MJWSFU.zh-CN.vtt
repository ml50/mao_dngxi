WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.850
我们已经有了二元 Moon Data

00:00:02.850 --> 00:00:07.560
下一步是定义和训练一个自定义 PyTorch 模型

00:00:07.559 --> 00:00:11.234
即一个执行二元分类的神经网络

00:00:11.234 --> 00:00:13.664
除了这个练习 notebook 之外

00:00:13.664 --> 00:00:15.899
这里还有一个 source 目录

00:00:15.900 --> 00:00:18.120
其中有三个文件

00:00:18.120 --> 00:00:21.525
分别是 train.py predict.py 和 model.py

00:00:21.524 --> 00:00:26.684
我们将在 model.py 中明确定义 PyTorch 模型的层级

00:00:26.684 --> 00:00:29.654
我们已经提供了完整的 predict.py

00:00:29.655 --> 00:00:31.560
你不需要更改任何地方

00:00:31.559 --> 00:00:33.644
它已经是完整的文件

00:00:33.645 --> 00:00:37.140
可以直接将训练过的模型应用到数据上并返回预测的类别分数

00:00:37.140 --> 00:00:39.619
最后是 train.py 文件

00:00:39.619 --> 00:00:42.709
我将在其中演示如何构建和训练自定义模型

00:00:42.710 --> 00:00:44.359
我们一步步地来

00:00:44.359 --> 00:00:49.085
你的第一个任务是在 model.py 中定义一个简单的二元分类器

00:00:49.085 --> 00:00:51.500
我在 notebook 中指出

00:00:51.500 --> 00:00:53.825
这个模型的参数是 input_dim 特征的数量

00:00:53.825 --> 00:00:57.320
然后将这个输入传入几个隐藏层

00:00:57.320 --> 00:00:59.914
并返回一个输出值

00:00:59.914 --> 00:01:02.750
表示接近 0 或 1 的类别分数

00:01:02.750 --> 00:01:05.810
分别对应紫点和黄点

00:01:05.810 --> 00:01:09.920
实际上 这个输出值应该是 S 型激活类别分数

00:01:09.920 --> 00:01:13.670
你甚至可以在 notebook 中显示 model.py 的内容

00:01:13.670 --> 00:01:17.225
这是我为你提供的 model.py 文件起始代码

00:01:17.224 --> 00:01:19.179
直接点击该文件

00:01:19.180 --> 00:01:22.605
所有任务在此文件中都标记为 TODO

00:01:22.605 --> 00:01:23.920
在 init 函数中

00:01:23.920 --> 00:01:29.120
你应该定义一个两层或三层的模型 参数包括输入特征的数量

00:01:29.120 --> 00:01:31.520
根据此隐藏维度创建隐藏层

00:01:31.519 --> 00:01:34.399
并生成 output_dim 个输出

00:01:34.400 --> 00:01:37.370
请在此 init 函数中指定所有层级

00:01:37.370 --> 00:01:40.660
然后在 forward 函数中指定网络的前馈行为

00:01:40.659 --> 00:01:43.729
别忘了在必要的位置应用激活函数

00:01:43.730 --> 00:01:46.743
并思考如何创建一个输出 0 或 1 标签的

00:01:46.743 --> 00:01:49.040
二元分类器

00:01:49.040 --> 00:01:51.200
Notebook 中有很多详情

00:01:51.200 --> 00:01:54.034
并提供了三层网络示例的链接

00:01:54.034 --> 00:02:00.030
请先尝试完成此 model.py 文件 然后再查看解答和后续文件

