WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.634
下面说说我是如何编写 train.py 文件中的 if 语句的

00:00:04.634 --> 00:00:06.719
首先向 parser 中添加

00:00:06.719 --> 00:00:09.719
三个模型参数

00:00:09.720 --> 00:00:13.545
我指定了 input_dim hidden_dim 和 output _dim

00:00:13.544 --> 00:00:16.140
这三个参数都是整数值

00:00:16.140 --> 00:00:18.600
并且我都指定了默认值

00:00:18.600 --> 00:00:21.450
Input_dim 表示输入特征的数量

00:00:21.449 --> 00:00:24.554
默认为 2 因为数据是二维的

00:00:24.554 --> 00:00:28.949
Hidden_dim 表示隐藏维度 默认为 10

00:00:28.949 --> 00:00:31.140
最后 output_dim 表示输出维度

00:00:31.140 --> 00:00:33.765
或我想输出多少个值

00:00:33.765 --> 00:00:36.119
我只想输出一个类别分数

00:00:36.119 --> 00:00:41.179
下个任务是传入相应的参数并实例化模型

00:00:41.179 --> 00:00:42.859
我知道如何实例化 SimpleNet

00:00:42.859 --> 00:00:45.530
只需传入合适的输入维度

00:00:45.530 --> 00:00:47.780
隐藏维度和输出维度

00:00:47.780 --> 00:00:51.259
将它们设为等于 args.input_dim

00:00:51.259 --> 00:00:54.649
使我们能够在实例化 estimator 时指定这些维度

00:00:54.649 --> 00:00:56.269
我还将这个模型移到了合适的设备上

00:00:56.270 --> 00:00:59.720
如果有 GPU 就移到 GPU 上

00:00:59.719 --> 00:01:04.069
接下来选择使用 Adam 优化器

00:01:04.069 --> 00:01:05.644
因为经验表明它很好用

00:01:05.644 --> 00:01:08.164
但是你也可以使用随机梯度下降法

00:01:08.165 --> 00:01:10.220
在这里传入模型参数

00:01:10.219 --> 00:01:12.500
以及学习速率

00:01:12.500 --> 00:01:14.028
对于 criterion

00:01:14.028 --> 00:01:18.414
我指定为 BCELoss 即二元交叉熵损失

00:01:18.415 --> 00:01:20.990
在 PyTorch 中 这时候普通的交叉熵损失不可行

00:01:20.989 --> 00:01:24.039
因为模型仅返回一个值

00:01:24.040 --> 00:01:27.145
BCELoss 非常适合

00:01:27.144 --> 00:01:29.049
if 语句就编写完了

00:01:29.049 --> 00:01:30.709
完整的 model optimizer和 criterion

00:01:30.709 --> 00:01:34.909
将传递到这个 train 函数中 它将保存训练过的模型

00:01:34.909 --> 00:01:36.890
现在回到 notebook

00:01:36.890 --> 00:01:40.594
我可以使用 !pygmentize 输出完整的 train.py 文件

00:01:40.594 --> 00:01:44.959
下一步是创建和训练一个 PyTorch estimator

00:01:44.959 --> 00:01:49.625
它将执行此训练脚本并使用在 S3 上存储的训练数据进行训练

00:01:49.625 --> 00:01:54.140
PyTorch estimator 的结构与其他 estimator 很相似

00:01:54.140 --> 00:01:57.064
我在这里导入了 PyTorch estimator

00:01:57.064 --> 00:02:00.620
你只需向构造函数传入一些参数

00:02:00.620 --> 00:02:03.409
在 SageMaker 中构建自定义模型时

00:02:03.409 --> 00:02:08.395
必须指定一个入口点 在此例中入口点指向训练脚本

00:02:08.395 --> 00:02:11.300
入口点会告诉 estimator 训练脚本在哪

00:02:11.300 --> 00:02:15.200
这样的话 当 .fit 被调用时 estimator 知道该怎么办

00:02:15.199 --> 00:02:19.699
我提供了 PyTorch estimator 的参考文档链接

00:02:19.699 --> 00:02:21.889
我认为仅参考此文档

00:02:21.889 --> 00:02:24.519
你就能完成此任务并训练自定义模型

00:02:24.520 --> 00:02:26.020
请试着自己完成任务

00:02:26.020 --> 00:02:29.330
我将在下个视频中介绍我的解决方案

