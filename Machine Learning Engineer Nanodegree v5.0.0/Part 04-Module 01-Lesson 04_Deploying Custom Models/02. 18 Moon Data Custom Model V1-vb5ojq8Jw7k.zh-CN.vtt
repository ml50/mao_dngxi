WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.935
我们已经学习了

00:00:01.935 --> 00:00:05.339
如何使用 LinearLearner 构建支付欺诈分类模型

00:00:05.339 --> 00:00:09.585
但是经常需要设计自定义的模型

00:00:09.585 --> 00:00:11.850
所以我创建了几个 Notebook

00:00:11.849 --> 00:00:14.594
旨在检测你创建和部署自定义模型的能力

00:00:14.595 --> 00:00:17.440
这些 Notebook 需要你更改一些文件

00:00:17.440 --> 00:00:19.695
在此 Notebook 实例页面

00:00:19.695 --> 00:00:22.335
我将选择 Open JupyterLab

00:00:22.335 --> 00:00:25.080
转到这样的启动器页面

00:00:25.079 --> 00:00:28.019
我发现通过该页面可以更好地处理多个文件

00:00:28.019 --> 00:00:31.620
左侧和顶部有一些独特的按钮

00:00:31.620 --> 00:00:35.325
你可以使用这个按钮上传数据

00:00:35.325 --> 00:00:38.925
并通过这个按钮探索一系列 SageMaker 示例 Notebook

00:00:38.924 --> 00:00:41.640
我们转到 Moon Data 目录

00:00:41.640 --> 00:00:46.295
打开这个练习 Notebook关闭启动器

00:00:46.295 --> 00:00:50.810
点击这个文件夹按钮可以收起这个侧栏

00:00:50.810 --> 00:00:53.990
对于此 Notebook 首先要注意的是内核

00:00:53.990 --> 00:00:56.600
我们选择的是 conda_pytorch_p36

00:00:56.600 --> 00:00:58.800
我们一直默认使用 MXNet

00:00:58.799 --> 00:01:02.959
但是如果要开发自定义 PyTorch 模型 就像在这个示例中

00:01:02.960 --> 00:01:04.795
则建议使用这个内核

00:01:04.795 --> 00:01:07.775
在此 Notebook 中 我将生成一些数据

00:01:07.775 --> 00:01:12.330
将数据上传到 S3 并使用数据训练自定义 PyTorch 分类器

00:01:12.329 --> 00:01:16.474
首先加载普通的数据管理库

00:01:16.474 --> 00:01:20.809
还从 sklearn 库导入了一些特定的函数

00:01:20.810 --> 00:01:23.840
包括 make_moons 和 train_test_split

00:01:23.840 --> 00:01:27.530
这些函数可以帮助我在下面生成 Moon Data

00:01:27.530 --> 00:01:31.085
打开 Moon Data 参考文档

00:01:31.084 --> 00:01:35.389
可以看到 make_moons 需要样本数量作为输入

00:01:35.390 --> 00:01:38.480
输出将生成 x 和 y

00:01:38.480 --> 00:01:41.525
x 表示生成的二维样本

00:01:41.525 --> 00:01:44.005
y 表示对应的类别标签

00:01:44.004 --> 00:01:46.409
每个数据点的标签都是 0 或 1

00:01:46.409 --> 00:01:49.954
在此单元格中 我指定要生成 600 个数据点

00:01:49.954 --> 00:01:51.980
noise_val 表示这些数据点有多分散

00:01:51.980 --> 00:01:54.260
噪点幅度是多少

00:01:54.260 --> 00:01:55.880
这个值越大

00:01:55.879 --> 00:01:57.560
数据的噪点就越多

00:01:57.560 --> 00:02:01.865
在这里调用 make_moons 并传入数据点数量和噪点参数

00:02:01.864 --> 00:02:03.649
然后获得 x 和 y

00:02:03.650 --> 00:02:07.370
你可以调整这些值 看看会生成什么样的数据

00:02:07.370 --> 00:02:12.020
然后将 x 和 y 划分为训练集和测试集

00:02:12.020 --> 00:02:15.814
在这里调用 train_test_split

00:02:15.814 --> 00:02:18.560
传入特征和标签以及测试集的大小

00:02:18.560 --> 00:02:22.189
这个分数表示测试集中应该有多少比例的数据

00:02:22.189 --> 00:02:25.925
我将保留四分之一的数据作为测试集

00:02:25.925 --> 00:02:27.380
生成数据后

00:02:27.379 --> 00:02:28.669
在这里绘制图形

00:02:28.669 --> 00:02:31.159
将特征数据绘制为散点图

00:02:31.159 --> 00:02:33.079
一个维度对应另一个维度

00:02:33.080 --> 00:02:35.105
并根据标签标注颜色

00:02:35.104 --> 00:02:38.530
标为 0 的所有点为紫色

00:02:38.530 --> 00:02:40.925
标为 1 的所有点为黄色

00:02:40.925 --> 00:02:44.405
这个数据是一个经典二元分类问题

00:02:44.405 --> 00:02:46.569
类别均匀分布

00:02:46.569 --> 00:02:50.944
但需要非线性分割线 添加噪点后比较难分类

00:02:50.944 --> 00:02:55.039
线性模型在此数据集上的效果并不好

00:02:55.039 --> 00:02:57.245
有必要使用自定义模型

00:02:57.245 --> 00:03:00.469
在此 Notebook 中 我将讲解一些练习

00:03:00.469 --> 00:03:04.120
在这些练习中 你将部署一个自定义 PyTorch 深度学习模型

00:03:04.120 --> 00:03:09.020
要注意的一点是 SageMaker estimator 暂时无法访问此数据

00:03:09.020 --> 00:03:12.245
estimator 需要用存储在 S3 上的数据进行训练

00:03:12.245 --> 00:03:13.849
接下来

00:03:13.849 --> 00:03:18.769
我将加载 SageMaker 特定库并获得几个变量

00:03:18.770 --> 00:03:21.075
首先是 sagemaker_session 和 roll

00:03:21.074 --> 00:03:23.479
然后设定默认存储桶

00:03:23.479 --> 00:03:25.864
一个用于存储数据的 S3 存储桶

00:03:25.865 --> 00:03:28.129
然后创建一个 train.csv 文件

00:03:28.129 --> 00:03:32.615
其中包含所有特征和标签

00:03:32.615 --> 00:03:35.270
然后将这个文件上传到 S3

00:03:35.270 --> 00:03:38.659
请完成函数 make_csv

00:03:38.659 --> 00:03:40.759
它的参数包括特征 x

00:03:40.759 --> 00:03:42.709
和对应的标签 y

00:03:42.710 --> 00:03:46.295
以及文件名和保存此文件的数据目录

00:03:46.294 --> 00:03:48.709
建议使用 Pandas

00:03:48.710 --> 00:03:51.890
将特征和标签连接为一个 dataframe

00:03:51.889 --> 00:03:53.929
然后将它们变成一个 csv 文件

00:03:53.930 --> 00:03:56.254
请根据 SageMaker 的文档

00:03:56.254 --> 00:03:59.305
创建特定格式的 csv 文件

00:03:59.305 --> 00:04:04.159
SageMaker 要求 csv 文件不能有标题

00:04:04.159 --> 00:04:08.780
并且目标变量（即类别标签）是在第一列

00:04:08.780 --> 00:04:10.805
在创建 csv 文件时

00:04:10.805 --> 00:04:12.760
应该将 header 设为 false

00:04:12.759 --> 00:04:14.840
使第一列等于类别标签

00:04:14.840 --> 00:04:17.569
其他列为特征

00:04:17.569 --> 00:04:19.189
请完成此函数

00:04:19.189 --> 00:04:21.350
如果你对自己的代码满意

00:04:21.350 --> 00:04:24.245
可以执行以下单元格创建一个 train.csv 文件

00:04:24.245 --> 00:04:25.475
如果你要检查你的代码

00:04:25.475 --> 00:04:28.260
请观看下个解答视频

