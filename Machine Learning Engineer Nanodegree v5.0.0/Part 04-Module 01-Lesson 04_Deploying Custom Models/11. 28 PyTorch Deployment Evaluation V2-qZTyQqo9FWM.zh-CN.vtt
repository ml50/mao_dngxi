WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.895
下面说说我是如何创建 PyTorch 模型的

00:00:02.895 --> 00:00:05.400
这些参数我们都熟悉

00:00:05.400 --> 00:00:07.980
包括角色和框架版本

00:00:07.980 --> 00:00:12.615
然后传入入口点 即 predict.py 文件所在的位置

00:00:12.615 --> 00:00:13.800
对于你的代码

00:00:13.800 --> 00:00:15.525
这个是 source 目录

00:00:15.525 --> 00:00:18.750
但是对于我的解答代码来说 这个是 source_solution 目录

00:00:18.750 --> 00:00:20.699
主要需要注意的是

00:00:20.699 --> 00:00:22.875
我传入了一些训练过的模型数据

00:00:22.875 --> 00:00:26.039
也就是在上面拟合的已训练 estimator 的模型数据

00:00:26.039 --> 00:00:29.429
这样就获得了可以部署的 PyTorch 模型

00:00:29.429 --> 00:00:31.304
在下个单元格中部署该模型

00:00:31.304 --> 00:00:35.570
调用 .deploy 并传入一些部署实例参数

00:00:35.570 --> 00:00:39.875
这样就创建了一个预测器 我可以使用它对测试数据进行预测

00:00:39.875 --> 00:00:42.965
打开这个 predict.py 文件

00:00:42.965 --> 00:00:46.730
可以看到 它的开头与 train.py 文件一样

00:00:46.729 --> 00:00:50.539
有很多导入语句 包括导入 SimpleNet 模型

00:00:50.539 --> 00:00:53.299
然后要求加载训练过的模型

00:00:53.299 --> 00:00:55.189
然后还有关于输入数据

00:00:55.189 --> 00:00:58.280
和输出内容的函数

00:00:58.280 --> 00:01:02.090
CONTENT_TYPE 将为 NumPy 数据

00:01:02.090 --> 00:01:04.265
在底部的 predict 函数中

00:01:04.265 --> 00:01:07.670
我将假设输入数据是 NumPy 类型

00:01:07.670 --> 00:01:11.930
然后将其变为能够传入 SimpleNet 模型的张量

00:01:11.930 --> 00:01:14.540
最后获得将模型应用到数据上后的结果

00:01:14.540 --> 00:01:17.305
应该是一个预测类别分数

00:01:17.305 --> 00:01:19.380
回到这个部署的预测器上

00:01:19.379 --> 00:01:23.795
我可以将它部署到测试数据特征上并评估模型

00:01:23.795 --> 00:01:26.310
实际上 我在这里提供了一个 evaluate 函数

00:01:26.310 --> 00:01:29.915
它与我们在 LinearLearner 示例中使用的 evaluate 函数很相似

00:01:29.915 --> 00:01:33.200
它的参数包括部署的预测器和测试数据

00:01:33.200 --> 00:01:35.359
并返回详细的指标信息

00:01:35.359 --> 00:01:37.879
主要区别是模型返回的是 numpy 格式的数据

00:01:37.879 --> 00:01:41.099
如 predict.py 文件所要求的那样

00:01:41.099 --> 00:01:44.000
所以不需要对数据进行太多的处理

00:01:44.000 --> 00:01:47.780
只是将输出类别分数四舍五入到 1 或 0

00:01:47.780 --> 00:01:51.950
表示预测标签 并压缩以删除任何空的维度

00:01:51.950 --> 00:01:53.880
然后代码和之前的一样

00:01:53.879 --> 00:01:58.744
将测试预测值与真实标签进行比较

00:01:58.745 --> 00:02:01.969
并计算真正例 假正例 真负例和假负例

00:02:01.969 --> 00:02:04.489
以及二元分类指标

00:02:04.489 --> 00:02:06.219
然后输出这些信息

00:02:06.219 --> 00:02:09.949
如果对预测器运行这些代码 结果是这样的

00:02:09.949 --> 00:02:12.530
准确率约为 80%

00:02:12.530 --> 00:02:15.050
对于这样的杂乱数据来说 结果很棒了

00:02:15.050 --> 00:02:19.160
建议你改进此模型

00:02:19.159 --> 00:02:23.629
方法包括增加隐藏维度以及使层级更复杂 或者训练更长时间

00:02:23.629 --> 00:02:26.509
然后像之前一样 评估完毕后

00:02:26.509 --> 00:02:28.564
你应该删除端点

00:02:28.564 --> 00:02:33.139
还建议转到 SageMaker 控制台

00:02:33.139 --> 00:02:37.099
并清理不再需要的所有模型 配置文件和数据

00:02:37.099 --> 00:02:39.919
搞定 你已经学习了如何部署自定义 PyTorch 模型

00:02:39.919 --> 00:02:42.859
能够部署你自己设计的自定义深度学习模型

00:02:42.860 --> 00:02:46.235
是很有用的技能 有助于完成各种任务

00:02:46.235 --> 00:02:50.375
尤其是传统的分类方法无法解决的任务

00:02:50.375 --> 00:02:53.044
此外 如果你想部署 SageMaker 内置模型

00:02:53.044 --> 00:02:56.014
之外的其他框架 这些技能也很有用

00:02:56.014 --> 00:02:59.629
使你能够更灵活地解决问题

00:02:59.629 --> 00:03:02.359
太棒了

00:03:02.360 --> 00:03:06.480
你完全可以解决你自己遇到的问题了

